<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并发和分布式编程</title>
      <link href="/2023/06/23/%E5%B9%B6%E5%8F%91%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/06/23/%E5%B9%B6%E5%8F%91%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.erlang.org/doc/reference_manual/processes.html">https://www.erlang.org/doc/reference_manual/processes.html</a><br><a href="https://www.erlang.org/doc/reference_manual/distributed.html">https://www.erlang.org/doc/reference_manual/distributed.html</a></p><p>erlang中关于并发和分布式编程的内容。</p><span id="more"></span><h1 id="Erlang中的通信"><a href="#Erlang中的通信" class="headerlink" title="Erlang中的通信"></a>Erlang中的通信</h1><p>在Erlang中，通信通过相互传递异步信号实现，通信的对象有进程和端口，进程用于内部通信，端口用于外部通信，常见的信号有exit, link, unlink, monitor, and demonitor signals等。</p><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><p>Erlang中的并发是基于进程的并发，每个进程都带有一个邮箱，这个邮箱是和进程同步创建的。</p><ul><li>self(). % 显示当前进程号</li><li>i() % 显示所有进程信息</li></ul><p>在erlang中进行并发编程有三类基本并发函数：创建进程、发送消息和接受消息。</p><h2 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h2><p>进程是自包含、独立的计算单元，单节点的创建方式有以下两种</p><ul><li>spawn(Fun) -&gt; pid()<br>不关心动态代码升级，或者确定程序不会在未来进行修改时用</li><li>spawn(Module, Function, Args) -&gt; pid()<br>支持热更新，确保运行进程能够正确 升级为新版模块代码</li></ul><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>向一个进程发送消息有三种方式：Pid、注册名和别名</p><ul><li><p>Pid</p></li><li><p>注册名</p><ul><li>register(RegName, PidOrPort) -&gt; true<br>注册进程，注册名必须是atom类型</li><li>registered()<br>返回所有已注册的名字</li><li>whereis(Name)<br>通过注册名获取Pid<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt; c(area_server_final).</span><br><span class="line">&#123;ok,area_server_final&#125;</span><br><span class="line"><span class="number">2</span>&gt; Pid = spawn(area_server_final, loop, []).      </span><br><span class="line">&lt;<span class="number">0.62</span>.<span class="number">0</span>&gt;</span><br><span class="line"><span class="number">3</span>&gt; register(area,Pid).</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">4</span>&gt; area!&#123;rectangle,<span class="number">4</span>,<span class="number">5</span>&#125;.</span><br><span class="line">&#123;rectangle,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="number">9</span>&gt; erlang:send(Pid, &#123;circle, <span class="number">2</span>&#125;). </span><br></pre></td></tr></table></figure></li></ul></li><li><p>别名<br>进程别名本质上是一种引用类型，别名设计的典型用例是请求/回复场景。发送回复时使用进程别名可以使回复接收方在操作超时或进程之间的连接丢失时防止回复到达其消息队列。</p></li></ul><h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><p>进程实际上隐藏了信息，我们无法直接访问这个函数的执行信息，但是可以通过发送和接受消息来进行交互，这点和服务器很像。在Fun中递归调用自身实现重复发送和接受消息。</p><ul><li>start 隐藏spawn和rpc</li><li>rpc 隐藏通信过程</li><li>loop 处理逻辑，要导出才能被spawn调用<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-export</span><span class="params">([start/<span class="number">0</span>, area/<span class="number">2</span>, loop/<span class="number">0</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    spawn(area_server, loop, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">area</span><span class="params">(Pid, What)</span> -&gt;</span></span><br><span class="line">    rpc(Pid, What).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rpc</span><span class="params">(Pid, Request)</span> -&gt;</span></span><br><span class="line">    Pid ! &#123;self(), Request&#125;,</span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">     &#123;Pid, Response&#125; -&gt;</span><br><span class="line">         Response</span><br><span class="line"> <span class="keyword">end</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">     &#123;From, &#123;rectangle, Width, Height&#125;&#125; -&gt;</span><br><span class="line">         From ! &#123;self(), Width * Height&#125;,</span><br><span class="line">         loop();</span><br><span class="line">     &#123;From, &#123;circle, R&#125;&#125; -&gt;</span><br><span class="line">         From ! &#123;self(), <span class="number">3.14159</span> * R * R&#125;,</span><br><span class="line">         loop();</span><br><span class="line">     &#123;From, Other&#125; -&gt;</span><br><span class="line">         From ! &#123;self(), &#123;error, Other&#125;&#125;,</span><br><span class="line">         loop()</span><br><span class="line"> <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>&gt; area_server:start().  </span><br><span class="line">&lt;<span class="number">0.89</span>.<span class="number">0</span>&gt;</span><br><span class="line"><span class="number">13</span>&gt; Server=area_server:start().   </span><br><span class="line">&lt;<span class="number">0.91</span>.<span class="number">0</span>&gt;</span><br><span class="line"><span class="number">14</span>&gt; area_server:area(Server, &#123;rectangle, <span class="number">1</span>,<span class="number">2</span>&#125;).</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="接收高级选项"><a href="#接收高级选项" class="headerlink" title="接收高级选项"></a>接收高级选项</h3><ol><li> 带超时的接收 </li></ol><ul><li>使用after指定</li><li>超时值为0，立即执行</li><li>超时值为原子<code>infinity</code>，永远不会超时<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">receive</span></span><br><span class="line">    &#123;From, Message&#125;-&gt;</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">after</span> Time-&gt;</span><br><span class="line">    Expressions</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li> 选择性接收 </li></ol><h2 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h2><ol><li>当指定的函数执行完毕，进程正常终止，退出原因是原子 normal</li><li>异常终止，在erlang中，将运行时错误和生成错误表示为以下三类：<ul><li>exit(Reason)</li><li>erlang:error(Reason)</li><li>erlang:error(Reason, Args)</li></ul></li></ol><h2 id="顺序代码的错误处理"><a href="#顺序代码的错误处理" class="headerlink" title="顺序代码的错误处理"></a>顺序代码的错误处理</h2><h3 id="错误的分类"><a href="#错误的分类" class="headerlink" title="错误的分类"></a>错误的分类</h3><p>程序的错误大致可分为以下四类：</p><ul><li><strong>Compile-time errors</strong>，编译产生的错误，例如一些语法错误，可以借助编译器和静态代码分析器找出错误。</li><li><strong>Logical errors</strong>，程序的行为与预想中的不同，例如点击按钮没有反应。</li><li><strong>Run-time errors</strong>，使程序发生崩溃的严重错误，例如运算符作用在错误的类型，也可以用error(Reason)来生成。</li><li><strong>Generated errors</strong>，在代码中调用 <a href="https://www.erlang.org/doc/man/erlang.html#exit-1">exit/1</a>和<code>[throw/1](https://www.erlang.org/doc/man/erlang.html#throw-1)</code>来生成错误。</li></ul><p>Erlang中，将<strong>Run-time errors</strong>和<strong>Generated errors</strong>表示为三类：error、exit、throw。</p><h3 id="用try-catch处理异常"><a href="#用try-catch处理异常" class="headerlink" title="用try catch处理异常"></a>用try catch处理异常</h3><p>程序结构：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> FuncOrExpressionSeq <span class="keyword">of</span></span><br><span class="line">    Patern1 [<span class="keyword">when</span> Guard1] -&gt; Expressions1;</span><br><span class="line">    Patern1 [<span class="keyword">when</span> Guard2] -&gt; Expressions2;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">ExceptionType1: ExPattern1 [<span class="keyword">when</span> ExGuard1] -&gt; ExExpressions1;</span><br><span class="line">ExceptionType2: ExPattern2 [<span class="keyword">when</span> ExGuard2] -&gt; ExExpressions2;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">after</span></span><br><span class="line">    AfterExpressions</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol><li> 捕获错误，在try中编写可能出错的代码，可以使用可选的of进行分支选择。 </li><li> 匹配错误 </li></ol><ul><li> 冒号前的ExceptionType取值为error、exit、throw中一种。 </li><li> 冒号后的ExPattern用于匹配<strong>catch的返回值</strong>，一般是错误的原因，以便进行处理。 </li><li>可选的Stacktrace用于匹配exit类型错误的堆栈信息</li></ul><ol start="3"><li> 处理错误，若模式匹配成功可以在-&gt;后处理，处理完成后执行after子句的内容。 </li></ol><p>实例</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">try</span></span><br><span class="line"><span class="comment">%%    exit(basketball),</span></span><br><span class="line"><span class="comment">%%    error(football),</span></span><br><span class="line">    throw(&#123;my_exception, <span class="string">&quot;Something happened&quot;</span>&#125;)</span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    exit:Reason -&gt;</span><br><span class="line">      io:format(<span class="string">&quot;error Reason:~w~n&quot;</span>, [Reason]);</span><br><span class="line">    error: Reason -&gt;</span><br><span class="line">      io:format(<span class="string">&quot;error Reason:~w~n&quot;</span>, [Reason]);</span><br><span class="line">    throw:&#123;my_exception, Desc&#125; -&gt;</span><br><span class="line">      io:format(standard_error, <span class="string">&quot;Error: ~s~n&quot;</span>, [Desc])</span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>常见错误原因</p><table><thead><tr><th><strong>Reason</strong></th><th><strong>Type of Error</strong></th></tr></thead><tbody><tr><td>badarg</td><td>Bad argument. The argument is of wrong data type, or is otherwise badly formed.</td></tr><tr><td>badarith</td><td>Bad argument in an arithmetic expression.</td></tr><tr><td>{badmatch,V}</td><td>Evaluation of a match expression failed. The value V did not match.</td></tr><tr><td>function_clause</td><td>No matching function clause is found when evaluating a function call.</td></tr><tr><td>{case_clause,V}</td><td>No matching branch is found when evaluating a case expression. The value V did not match.</td></tr><tr><td>if_clause</td><td>No true branch is found when evaluating an if expression.</td></tr><tr><td>{try_clause,V}</td><td>No matching branch is found when evaluating the of-section of a try expression. The value V did not match.</td></tr><tr><td>undef</td><td>The function cannot be found when evaluating a function call.</td></tr><tr><td>{badfun,F}</td><td>Something is wrong with a fun F.</td></tr><tr><td>{badarity,F}</td><td>A fun is applied to the wrong number of arguments. F describes the fun and the arguments.</td></tr><tr><td>timeout_value</td><td>The timeout value in a receive..after expression is evaluated to something else than an integer or infinity.</td></tr><tr><td>noproc</td><td>Trying to link or monitor to a non-existing process or port.</td></tr><tr><td>noconnection</td><td>A link or monitor to a remote process was broken because a connection between the nodes could not be established or was severed.</td></tr><tr><td>{nocatch,V}</td><td>Trying to evaluate a throw outside a catch. V is the thrown term.</td></tr><tr><td>system_limit</td><td>A system limit has been reached. See <a href="https://www.erlang.org/doc/efficiency_guide/advanced.html">Efficiency Guide</a></td></tr><tr><td>for information about system limits.</td><td></td></tr></tbody></table><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">try</span></span><br><span class="line"><span class="comment">%%    1 / 0,</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> <span class="keyword">of</span></span><br><span class="line">      <span class="number">0</span>-&gt;</span><br><span class="line">        ok</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    error: badarith -&gt;</span><br><span class="line">      io:format(<span class="string">&quot;arith error&quot;</span>);</span><br><span class="line">    error:&#123;case_clause,V&#125;-&gt;</span><br><span class="line">      io:format(<span class="string">&quot;Unmatch Pattern: ~w~n&quot;</span>,[V])</span><br><span class="line">  <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><h3 id="用catch处理异常"><a href="#用catch处理异常" class="headerlink" title="用catch处理异常"></a>用catch处理异常</h3><p>使用catch语句捕获异常，<strong>单独的catch语句和try catch里的catch的使用方式不同</strong>，会将错误转换为元组或Term。</p><ul><li>catch exit(Reason)-&gt; {‘EXIT’,Reason}</li><li>catch error(Reason) -&gt; {‘EXIT’,{Reason,Stack}} </li><li>catch throw(Any) -&gt; Any<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span>&gt; exit(foobar).</span><br><span class="line">** exception exit: foobar</span><br><span class="line"><span class="number">19</span>&gt; <span class="keyword">catch</span> exit(foobar).</span><br><span class="line">&#123;&#x27;EXIT&#x27;,foobar&#125;</span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="number">20</span>&gt; error(football).     </span><br><span class="line">** exception error: football</span><br><span class="line"><span class="number">21</span>&gt; <span class="keyword">catch</span> error(foobar). </span><br><span class="line">&#123;&#x27;EXIT&#x27;,&#123;foobar,[&#123;shell,apply_fun,<span class="number">3</span>,</span><br><span class="line">                        [&#123;file,<span class="string">&quot;shell.erl&quot;</span>&#125;,&#123;line,<span class="number">899</span>&#125;]&#125;,</span><br><span class="line">                 &#123;erl_eval,do_apply,<span class="number">6</span>,[&#123;file,<span class="string">&quot;erl_eval.erl&quot;</span>&#125;,&#123;line,<span class="number">674</span>&#125;]&#125;,</span><br><span class="line">                 &#123;erl_eval,expr,<span class="number">5</span>,[&#123;file,<span class="string">&quot;erl_eval.erl&quot;</span>&#125;,&#123;line,<span class="number">431</span>&#125;]&#125;,</span><br><span class="line">                 &#123;shell,exprs,<span class="number">7</span>,[&#123;file,<span class="string">&quot;shell.erl&quot;</span>&#125;,&#123;line,<span class="number">686</span>&#125;]&#125;,</span><br><span class="line">                 &#123;shell,eval_exprs,<span class="number">7</span>,[&#123;file,<span class="string">&quot;shell.erl&quot;</span>&#125;,&#123;line,<span class="number">641</span>&#125;]&#125;,</span><br><span class="line">                 &#123;shell,eval_loop,<span class="number">3</span>,[&#123;file,<span class="string">&quot;shell.erl&quot;</span>&#125;,&#123;line,<span class="number">626</span>&#125;]&#125;]&#125;&#125;</span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="number">22</span>&gt; throw(test).         </span><br><span class="line">** exception throw: test</span><br><span class="line"><span class="number">23</span>&gt; <span class="keyword">catch</span> throw(test). </span><br><span class="line">test</span><br></pre></td></tr></table></figure></li></ul><h2 id="并发中的异常处理"><a href="#并发中的异常处理" class="headerlink" title="并发中的异常处理"></a>并发中的异常处理</h2><blockquote><p>让其他进程修复错误”和“任其崩溃”</p></blockquote><p>基本思想是用一个进程监视另一个进程，发生错误时修复错误。<br>监视关系有两种，Link和monitor，进程间可以建立link关系，对<strong>进程、端口</strong>和节点的<strong>时间偏移量</strong> 可以建立monitor关系。</p><ul><li>连接（link）<ul><li>link(PidOrPort) -&gt; true</li><li>链接进程退出，收到的是退出信号，这意味着只有<strong>系统进程</strong>能够处理错误，普通进程会<strong>传递退出信号</strong>并一同退出<br>转换为系统进程的函数：process_flag(trap_exit, true)</li></ul></li><li>监视（monitor）<ul><li>monitor(Type :: process, Item :: monitor_process_identifier()) -&gt; MonitorRef</li><li>monitor(Type :: port, Item :: monitor_port_identifier()) -&gt; MonitorRef</li><li>monitor(Type :: time_offset, Item :: clock_service) -&gt; MonitorRef</li><li>监视进程收到的是DOWN<strong>消息</strong>而不是退出信号，通常会被服务器用来监视客户端的行为<br>DOWN信号：{‘DOWN’, Ref, process, Pid2, Reason}</li></ul></li></ul><p>案例</p><ul><li><p>退出时监控者执行某些计算</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">on_exit</span><span class="params">(Pid, Fun)</span> -&gt;</span></span><br><span class="line">spawn(<span class="keyword">fun</span>() -&gt;</span><br><span class="line">Ref = monitor(process, Pid),</span><br><span class="line"><span class="keyword">receive</span></span><br><span class="line">&#123;&#x27;DOWN&#x27;, Ref, process, Pid, Why&#125; -&gt;</span><br><span class="line">Fun(Why)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span>).</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 创建工作者进程</span></span><br><span class="line"><span class="number">2</span>&gt; Fun = <span class="keyword">fun</span>() -&gt;</span><br><span class="line">            <span class="keyword">receive</span></span><br><span class="line">            X -&gt; list_to_atom(X)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">end</span>.</span><br><span class="line">#Fun&lt;erl_eval.<span class="number">20.118419387</span>&gt;</span><br><span class="line"><span class="number">3</span>&gt; Pid = spawn(Fun).</span><br><span class="line"></span><br><span class="line"><span class="comment">% 监控进程</span></span><br><span class="line"><span class="number">8</span>&gt; tt:on_exit(Pid,<span class="keyword">fun</span>(Why)-&gt;io:format(<span class="string">&quot;~p died with: ~p~n&quot;</span>, [Pid, Why])<span class="keyword">end</span>).</span><br><span class="line">&lt;<span class="number">0.79</span>.<span class="number">0</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 使进程发送错误</span></span><br><span class="line"><span class="number">9</span>&gt; Pid ! hello.</span><br><span class="line">&lt;<span class="number">0.64</span>.<span class="number">0</span>&gt; died with: &#123;badarg,[&#123;erlang,list_to_atom,[hello],[]&#125;]&#125;</span><br></pre></td></tr></table></figure></li><li><p>让一组进程共同终止</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">start</span><span class="params">(Fs)</span> -&gt;</span></span><br><span class="line">  spawn(<span class="keyword">fun</span>() -&gt;</span><br><span class="line">    [spawn_link(F) || F &lt;- Fs],</span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">    <span class="keyword">after</span></span><br><span class="line">      infinity -&gt; <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>).</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">67</span>&gt;  Fun1 = <span class="keyword">fun</span>()-&gt;<span class="number">1</span><span class="keyword">end</span>.</span><br><span class="line">#Fun&lt;erl_eval.<span class="number">20.118419387</span>&gt;</span><br><span class="line"><span class="number">68</span>&gt; Fun2 = <span class="keyword">fun</span>()-&gt;<span class="number">2</span><span class="keyword">end</span>.</span><br><span class="line">#Fun&lt;erl_eval.<span class="number">20.118419387</span>&gt;</span><br><span class="line"><span class="number">69</span>&gt; Pid=spawn_test:start([Fun1,Fun2]). </span><br><span class="line">&lt;<span class="number">0.231</span>.<span class="number">0</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建永不终止的进程（退出时重启进程）</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">keep_alive</span><span class="params">(Name, Fun)</span> -&gt;</span></span><br><span class="line">register(Name, Pid = spawn(Fun)),</span><br><span class="line">on_exit(Pid, <span class="keyword">fun</span>(_Why) -&gt; keep_alive(Name, Fun) <span class="keyword">end</span>).</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>&gt; tt:keep_alive(worker,Fun).    </span><br><span class="line">&lt;<span class="number">0.64</span>.<span class="number">0</span>&gt;</span><br><span class="line"><span class="number">5</span>&gt; worker!hello.</span><br><span class="line">hello</span><br><span class="line"><span class="number">6</span>&gt;</span><br><span class="line">=ERROR REPORT==== <span class="number">21</span>-Jun-<span class="number">2023</span>::<span class="number">17</span>:<span class="number">35</span>:<span class="number">47</span> ===</span><br><span class="line">Error in process &lt;<span class="number">0.63</span>.<span class="number">0</span>&gt; with exit value:</span><br><span class="line">&#123;badarg,[&#123;erlang,list_to_atom,[hello],[]&#125;]&#125;</span><br><span class="line"><span class="number">6</span>&gt; worker!hello.</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>&gt; worker!hello.</span><br><span class="line">=ERROR REPORT==== <span class="number">21</span>-Jun-<span class="number">2023</span>::<span class="number">17</span>:<span class="number">35</span>:<span class="number">51</span> ===</span><br><span class="line">Error in process &lt;<span class="number">0.69</span>.<span class="number">0</span>&gt; with exit value:</span><br><span class="line">&#123;badarg,[&#123;erlang,list_to_atom,[hello],[]&#125;]&#125;</span><br><span class="line">hello</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2></li></ul><p>TODO</p><h2 id="链接Link"><a href="#链接Link" class="headerlink" title="链接Link"></a>链接Link</h2><p>TODO</p><h2 id="监督Monitor"><a href="#监督Monitor" class="headerlink" title="监督Monitor"></a>监督Monitor</h2><p>TODO</p><h2 id="进程字典"><a href="#进程字典" class="headerlink" title="进程字典"></a>进程字典</h2><p>进程字典是一个属于<strong>本进程</strong>的键值对数据结构，每个进程都存在一个进程区域存放进程字典。</p><ul><li><code>put(Key,value)-&gt;OldValue</code><br>注意会返回旧值</li><li><code>get(Key-&gt;Value)</code></li><li><code>get()-[&#123;Key,Value&#125;]</code></li><li><code>erase(Key)-&gt;Value</code></li><li><code>erase()-&gt;[&#123;Key,Value&#125;]</code><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>&gt; put(a,<span class="number">1</span>).</span><br><span class="line">undefined</span><br><span class="line"><span class="number">8</span>&gt; get(a).</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">9</span>&gt; put(a,<span class="number">2</span>). </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span>&gt; get().</span><br><span class="line">[&#123;a,<span class="number">2</span>&#125;]</span><br></pre></td></tr></table></figure>注意：进程字典在实际中较少用，因为可能会给程序引入不易察觉的bug（有时会忘记使用了进程字典），让调试变得困难。<br>建议使用进程字典来保存“<strong>一次性写入</strong>”的变量。如果某个键一次性获得一个值而且不会改变它，那么将其保存在进程字典里在某些时候还是可以接受的。</li></ul><h1 id="分布式编程"><a href="#分布式编程" class="headerlink" title="分布式编程"></a>分布式编程</h1><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>分布式erlang以节点为中心，节点是一个命名的ERTS，可以在同一台机器或在不同机器上，许多个节点组成一个分布式系统。</p><ul><li><p>节点命名，在一个分布式系统内，所有节点都必须使用同种命名模式，例如全是短命名，或者全是长命名。</p><ul><li><p>命名格式：<a href="mailto:&#x6e;&#x61;&#109;&#101;&#64;&#104;&#111;&#x73;&#116;&#x2e;&#110;&#x61;&#x6d;&#x65;">&#x6e;&#x61;&#109;&#101;&#64;&#104;&#111;&#x73;&#116;&#x2e;&#110;&#x61;&#x6d;&#x65;</a></p><ul><li>name为<code>-sname</code>或<code>-name</code>指定的节点名</li><li>host.name为主机标识，例如：”<a href="http://www.example.com&quot;或&quot;server1&quot;/">www.example.com&quot;或&quot;server1&quot;</a><br>配置hostname</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hostname</span><br><span class="line">sudo hostnamectl set-hostname your-new-hostname</span><br><span class="line">sudo systemctl restart NetworkManager</span><br><span class="line">%%</span><br><span class="line">sudo hostname new-hostname</span><br></pre></td></tr></table></figure></li></ul></li><li><p>节点间通信，为了能够相互通信， Erlang 的节点问必须共享一个私密的cookie 值。</p><ul><li><p>本机通信，可以使用短命名</p></li><li><p>局域网通信，可以使用短命名</p></li><li><p>外网通信</p><p>为了找到host，需要配置host文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost</span><br><span class="line">::1         localhost</span><br><span class="line"></span><br><span class="line">192.168.142.129 server.com server</span><br><span class="line">192.168.142.130 client.com client</span><br></pre></td></tr></table></figure></li><li><p>检测连通性<br><code>net_adm:ping(&#39;gandalf@server.com&#39;).</code></p></li></ul></li><li><p>连接节点，采用松散连接的方式，会在第一次用到节点名时连接：spawn(Node,M,F,A) or net_adm:ping(Node)</p></li></ul><p>注意事项：</p><p>hostname必须有点，单独一个server会报错，必须是<a href="http://www.server.com的形式/">www.server.com的形式</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(bilbo@client)1&gt; rpc:call(&#x27;gandalf@server&#x27;, kvs, store, [weather, cold]).</span><br><span class="line">=ERROR REPORT==== 24-Jun-2023::15:57:51.579811 ===</span><br><span class="line">** System running to use fully qualified hostnames **</span><br><span class="line">** Hostname server is illegal **</span><br></pre></td></tr></table></figure><h2 id="防火墙和端口"><a href="#防火墙和端口" class="headerlink" title="防火墙和端口"></a>防火墙和端口</h2><p>关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>打开所有端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h2 id="局域网通信"><a href="#局域网通信" class="headerlink" title="局域网通信"></a>局域网通信</h2><p>服务器</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hz@server socket_dist]$ erl -name gandalf -setcookie abc</span><br><span class="line">Erlang/OTP <span class="number">25</span> [erts-<span class="number">13.2</span>.<span class="number">1</span>] [source] [<span class="number">64</span>-bit] [smp:<span class="number">4</span>:<span class="number">4</span>] [ds:<span class="number">4</span>:<span class="number">4</span>:<span class="number">10</span>] [async-threads:<span class="number">1</span>] [jit:ns]</span><br><span class="line"></span><br><span class="line">Eshell V13.<span class="number">2.1</span>  (abort with ^G)</span><br><span class="line">(gandalf@server.com)<span class="number">1</span>&gt; kvs:start().</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hz@client ~]$ erl -name bilbo -setcookie abc</span><br><span class="line">Erlang/OTP 25 [erts-13.2.1] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [jit:ns]</span><br><span class="line"></span><br><span class="line">Eshell V13.2.1  (abort with ^G)</span><br><span class="line">(bilbo@client.com)1&gt; net_adm:ping(&#x27;gandalf@server.com&#x27;).</span><br><span class="line">pong</span><br><span class="line">(bilbo@client.com)2&gt; rpc:call(&#x27;gandalf@server.com&#x27;, kvs, store, [weather, cold]).</span><br><span class="line">true</span><br><span class="line">(bilbo@client.com)3&gt; rpc:call(&#x27;gandalf@server.com&#x27;, kvs, lookup, [weather]). </span><br><span class="line">&#123;ok,cold&#125;</span><br></pre></td></tr></table></figure><h2 id="外网通信"><a href="#外网通信" class="headerlink" title="外网通信"></a>外网通信</h2><ol><li><p>确保4369端口对TCP和UDP流量，都开放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -L</span><br><span class="line"># 如果防火墙规则中没有针对4369端口的条目，则新增</span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 4369 -j ACCEPT</span><br><span class="line">sudo iptables -A INPUT -p udp --dport 4369 -j ACCEPT</span><br><span class="line"># 让设置生效</span><br><span class="line">sudo yum install iptables-services</span><br><span class="line">sudo systemctl enable iptables</span><br><span class="line">sudo service iptables save</span><br><span class="line"># </span><br><span class="line">sudo iptables -L</span><br></pre></td></tr></table></figure></li><li><p>选择一个或一段连续端口给分布式Erlang使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -name gandalf -setcookie abc -kernel inet_dist_listen_min 1024 \ inet_dist_listen_max 65536</span><br></pre></td></tr></table></figure></li></ol><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>在阿里云的ecs上测试，用net_adm:ping不通，暂不知道是端口还是host设置有问题，待解决。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> erlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> erlang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>erlang中的容器</title>
      <link href="/2023/06/22/erlang%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/2023/06/22/erlang%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p> 介绍erlang中各种容器的用法。</p><span id="more"></span><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>容器，存储可变数量数据，类似是带头节点的单链表，所有操作从头开始。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[area,<span class="number">100</span>,<span class="number">200</span>,<span class="string">&quot;你好&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="模式匹配的列表操作"><a href="#模式匹配的列表操作" class="headerlink" title="模式匹配的列表操作"></a>模式匹配的列表操作</h2><p>列表的第一个元素被称为列表头（head），把列表头去掉，剩下的就被称为列表尾（tail）。<br>[H|T] ，其中一个是元素，一个是列表，并且前面必须是元素，后面是列表，开头可以有多个元素</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ThingsToBuy = [&#123;apples, <span class="number">10</span>&#125;,&#123;pears,<span class="number">6</span>&#125;,&#123;milk,<span class="number">3</span>&#125;].</span><br><span class="line">ThingsToBuy1 = [&#123;oranges,<span class="number">4</span>&#125;,&#123;newspaper,<span class="number">1</span>&#125;|ThingsToBuy]</span><br></pre></td></tr></table></figure><h4 id="列表推导（list-comprehension）"><a href="#列表推导（list-comprehension）" class="headerlink" title="列表推导（list comprehension）"></a>列表推导（list comprehension）</h4><p>能够生成元素并对生成的元素做测试的表达式。</p><ul><li>语法：<code>[X || Qualifier1, Qualifier2, ... ]</code><br>Qualifier1可以是生成器、位串生成器或过滤器 <ul><li>生成器（generator），<code>Pattern &lt;- ListExpr</code></li><li>位串（bitstring）生成器，<code>BitStringPattern &lt;= BitStringExpr</code></li><li>过滤器（filter）<br>判断函数（返回true或false）或布尔表达式，只有true的值会被加入列表</li></ul></li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].</span><br><span class="line"><span class="comment">% 从L中提取X，并加倍</span></span><br><span class="line">[<span class="number">2</span>*X || X &lt;- L].</span><br><span class="line"></span><br><span class="line"><span class="comment">%</span></span><br><span class="line">[ &#123;X,Y&#125; || x&lt;-[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], y &lt;- [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] ].</span><br><span class="line"></span><br><span class="line"><span class="comment">% 强制判断</span></span><br><span class="line">[throw(<span class="string">&quot;this_fun_not_use_uid_prop&quot;</span>) || z_prop_kit:get_prop_max(EncodeProp) =:= <span class="number">1</span>],</span><br></pre></td></tr></table></figure><h4 id="归集器"><a href="#归集器" class="headerlink" title="归集器"></a>归集器</h4><p>尾递归优化方法，程序<strong>只遍历列表一次</strong>，把奇偶参数分别添加到合适的列表里。这些列表被称为归集器（accumulator）。<br>区别在于：奇偶列表里的元素顺序是反转的</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">odds_and_evens</span><span class="params">(L)</span>-&gt;</span></span><br><span class="line">  odds_and_evens_acc(L, [], []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">odds_and_evens_acc</span><span class="params">([H|T],Odds, Events)</span>-&gt;</span></span><br><span class="line">  <span class="keyword">case</span> (H <span class="keyword">rem</span> <span class="number">2</span>) <span class="keyword">of</span></span><br><span class="line">    <span class="number">1</span>-&gt;</span><br><span class="line">      odds_and_evens_acc(T, [H|Odds], Events);</span><br><span class="line">    <span class="number">0</span>-&gt;</span><br><span class="line">      odds_and_evens_acc(T, Odds, [H|Events])</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">odds_and_evens_acc</span><span class="params">([],Odds, Events)</span>-&gt;</span></span><br><span class="line">  &#123;Odds, Events&#125;.</span><br></pre></td></tr></table></figure><h4 id="常用BIF"><a href="#常用BIF" class="headerlink" title="常用BIF"></a>常用BIF</h4><ul><li>hd(List) -&gt; term()<br>取列表头</li><li>tl(List) -&gt; term()<br>取除列表头的部分</li><li>length(List) -&gt; integer() &gt;= 0<br>列表长度</li></ul><h4 id="lists模块提供的处理函数"><a href="#lists模块提供的处理函数" class="headerlink" title="lists模块提供的处理函数"></a>lists模块提供的处理函数</h4><ul><li>member(Elem, List) -&gt; boolean()<br>是否是成员</li><li>append(ListOfLists) -&gt; List1</li><li>append(List1, List2) -&gt; List3</li><li>reverse(List1) -&gt; List2</li><li>reverse(List1, Tail) -&gt; List2<br>反转List1并将Tail插入到列表尾</li><li>delete(Elem, List1) -&gt; List2</li><li>filter(Pred, List1) -&gt; List2<br>List2是Pred函数返回True的结果</li><li>sort(List1) -&gt; List2</li><li>sort(Fun, List1) -&gt; List2<br>使用自定义排序函数Fun来排序<br>对fun(A,B)，当A&lt;=B返回true，否则返回false</li><li>nth(N, List) -&gt; Elem</li><li>nthtail(N, List) -&gt; Tail</li><li>sublist(List1, Len) -&gt; List2</li><li>sublist(List1, Start, Len) -&gt; List2</li><li>search(Pred, List) -&gt; {value, Value} | false</li></ul><p>遍历，基本都是用匿名函数</p><ul><li>foldl(Fun, Acc0, List) -&gt; Acc1<br>对List里的元素连续调用Fun(Elem, AccIn)，Acc0是累加器的初始值</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (Elem, Acc) -&gt;</span><br><span class="line">            [Elem | Acc]</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:foldl(Fun, [], [a, b]).</span><br><span class="line"><span class="comment">% [b,a]</span></span><br></pre></td></tr></table></figure><ul><li>foldr(Fun, Acc0, List) -&gt; Acc1<br>和foldl的遍历顺序相反，是从右到左</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (Elem, Acc) -&gt;</span><br><span class="line">            [Elem | Acc]</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:foldr(Fun, [], [a, b]).</span><br><span class="line"><span class="comment">% [a,b]</span></span><br></pre></td></tr></table></figure><ul><li>map(Fun, List1) -&gt; List2<br>获取映射</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (a) -&gt;</span><br><span class="line">            x;</span><br><span class="line">          (b)-&gt;</span><br><span class="line">            y</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:map(Fun, [a,b]).</span><br><span class="line"><span class="comment">% [x,y]</span></span><br></pre></td></tr></table></figure><ul><li>mapfoldl(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>结合map和foldl</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (X, Acc) -&gt;</span><br><span class="line">            &#123;<span class="number">2</span>*X, [X + <span class="number">1</span> | Acc]&#125;</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:mapfoldl(Fun, [], [<span class="number">1</span>, <span class="number">2</span>]).</span><br><span class="line"><span class="comment">% &#123;[2,4],[3,2]&#125;</span></span><br></pre></td></tr></table></figure><ul><li>mapfoldr(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>结合map和foldr</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (X, Acc) -&gt;</span><br><span class="line">            &#123;<span class="number">2</span>*X, [X + <span class="number">1</span> | Acc]&#125;</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:mapfoldl(Fun, [], [<span class="number">1</span>, <span class="number">2</span>]).</span><br><span class="line"><span class="comment">% &#123;[2,4],[2,3]&#125;</span></span><br></pre></td></tr></table></figure><ul><li>foreach(Fun, List) -&gt; ok<br>对List的每个元素执行Fun操作</li></ul><p>元组列表的操作</p><ul><li>keydelete(Key, N, TupleList1) -&gt; TupleList2</li><li>keyfind(Key, N, TupleList) -&gt; Tuple | false</li><li>keymap(Fun, N, TupleList1) -&gt; TupleList2</li><li>keymember(Key, N, TupleList) -&gt; boolean()</li><li>keymerge(N, TupleList1, TupleList2) -&gt; TupleList3</li><li>keyreplace(Key, N, TupleList1, NewTuple) -&gt; TupleList2</li><li>keysearch(Key, N, TupleList) -&gt; {value, Tuple} | false</li><li>keysort(N, TupleList1) -&gt; TupleList2</li><li>keystore(Key, N, TupleList1, NewTuple) -&gt; TupleList2</li><li>keytake(Key, N, TupleList1) -&gt; {value, Tuple, TupleList2} | false</li></ul><h4 id="z-lib提供的处理函数"><a href="#z-lib提供的处理函数" class="headerlink" title="z_lib提供的处理函数"></a>z_lib提供的处理函数</h4><ul><li>get_list_range/1<br>get_list_range(List::[term()]) -&gt; return() where return() = {Len::integer(), Min::term(), Max::term()} | false.<br>获得列表的最大最小值</li><li>get_value(List, Key, Default) -&gt; any()<br>从元组列表或Tree中，获得指定的键值，如果键不存在，使用默认值</li><li>get_value(List, Key, ValuePos, Default) -&gt; any()<br>从元组列表或Tree中，获得指定的键值，如果键不存在，使用默认值，可以指定值的位置</li><li>get_value(List, Key, KeyPos, ValuePos, Default)<br>可以指定键和值的位置</li><li>get_values(KVList, KeyDefaultList)<br>从元组列表或Tree中，获得指定的键值，如果键不存在，使用默认值</li><li>get_values(KVList, ValuePos,KeyDefaultList)</li><li>get_values(KVList, KeyPos, ValuePos, KeyDefaultList)</li></ul><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>容器，存放固定数目的数据，类似于数组，可随机存取。用元组管理的项数不宜超过五六项。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;area,<span class="number">100</span>,<span class="number">200</span>,<span class="string">&quot;你好&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="常用BIF-1"><a href="#常用BIF-1" class="headerlink" title="常用BIF"></a>常用BIF</h4><ul><li>element(N, Tuple) -&gt; term()<br>获取指定位置数据</li><li>size(Item) -&gt; integer() &gt;= 0<br>获取元组长度</li><li>erlang:insert_element(Index, Tuple1, Term) -&gt; Tuple2<br>在Index位置插入Term</li><li>erlang:append_element(Tuple1, Term) -&gt; Tuple2<br>在尾部插入</li><li>erlang:delete_element(Index, Tuple1) -&gt; Tuple2<br>删除指定位置元素</li><li>setelement(Index, Tuple1, Value) -&gt; Tuple2<br>将Index位置更新为Value，返回新元组</li><li>erlang:make_tuple(Arity, InitialValue) -&gt; tuple()<br>创建具有Arity个InitialValue的元组</li><li>erlang:make_tuple(Arity, DefaultValue, InitList) -&gt; tuple()<br>创建具有Arity个DefaultValue的元组，并以InitList指定<br>如下指定第5个元素为zz，第2个元素（多次出现以最后一个为准）为aa</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; erlang:make_tuple(<span class="number">5</span>, [], [&#123;<span class="number">2</span>,ignored&#125;,&#123;<span class="number">5</span>,zz&#125;,&#123;<span class="number">2</span>,aa&#125;]).</span><br><span class="line">&#123;[],aa,[],[],zz&#125;</span><br></pre></td></tr></table></figure><p>遍历元组的方法，核心是传入索引</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(Tuple, F, A)</span> -&gt;</span></span><br><span class="line">  foreach(Tuple, <span class="number">1</span>, tuple_size(Tuple), F, A).</span><br><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(Tuple, I, N, F, A)</span> <span class="title">when</span> I =&lt; N -&gt;</span></span><br><span class="line">  F(A, element(I, Tuple)),</span><br><span class="line">  foreach(Tuple, I + <span class="number">1</span>, N, F, A);</span><br><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(_Tuple, _I, _N, _F, A)</span> -&gt;</span></span><br><span class="line">  A.</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>元组可用于实现字典</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MY_Dict = dict:new(),</span><br><span class="line">MY_Dict1 = dict:append(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>, MY_Dict),</span><br><span class="line">dict:fetch_keys(MY_Dict1).</span><br></pre></td></tr></table></figure><h1 id="映射组"><a href="#映射组" class="headerlink" title="映射组"></a>映射组</h1><p>也是键值对结构，但key可以不是原子，用于当<strong>键不能预先知道</strong>时用来表示键-值数据结构；</p><ul><li>当存在大量不同的键时用来表示数据；</li><li>当方便使用很重要而效率无关紧要时作为万能的数据结构使用；</li><li>用作“自解释型”的数据结构，也就是说，用户容易从键名猜出值的含义；</li><li>用来表示键-值解析树，例如XML或配置文件；</li><li>用JSON来和其他编程语言通信。</li></ul><ol><li><p>操作符</p><ul><li><code>=&gt;</code>，更新现有键或创建新键</li><li><code>:=</code>，更新现有键    </li></ul></li><li><p>原生操作</p><ul><li>创建映射组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&gt; #&#123;a=&gt;1,b=&gt;2&#125;.   #&#123;a =&gt; 1,b =&gt; 2&#125;</span><br></pre></td></tr></table></figure><ul><li>更新映射组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F1 = #&#123;a=&gt;1,b=&gt;2&#125;. F2 = #&#123;b=&gt;2,a=&gt;1&#125;. %F1=F2. F3 = F1#&#123;c=&gt;xx&#125; F4 = F3#&#123;c:=3&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用api操作</p><ul><li>创建映射组<br>maps:new().</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&gt; MapGroup = maps:new().</span><br><span class="line">#&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>向映射组中添加映射<br>put(Key, Value, Map1) -&gt; Map2</li></ul></li></ol><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2&gt; MapGroup1 = maps:put(a, 1, MapGroup).</span><br><span class="line">#&#123;a =&gt; 1&#125;</span><br></pre></td></tr></table></figure>- 从映射组中获取**值**  * get(Key, Map) -&gt; Value  * get(Key, Map, Default) -&gt; Value | Default<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3&gt; Value = maps:get(a, MapGroup1). </span><br><span class="line">1</span><br><span class="line">4&gt; Value1 = maps:get(c, MapGroup1, 1).</span><br><span class="line">1</span><br></pre></td></tr></table></figure>- 更新  * update(Key, Value, Map1) -&gt; Map2    Map1不是Map抛badmap    Key不存在抛badkey  * update_with(Key, Fun, Map1) -&gt; Map2  * update_with(Key, Fun, Init, Map1) -&gt; Map2<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MapGroup2 = maps:update(a, <span class="number">2</span>, MapGroup1).</span><br></pre></td></tr></table></figure>- 从映射组中删除映射  * remove(Key, Map1) -&gt; Map2<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5&gt; MapGroup2= maps:remove(a, MapGroup1).</span><br><span class="line">#&#123;&#125;</span><br></pre></td></tr></table></figure>  - **遍历**映射组，打印每个映射<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6&gt; Fun = fun(Key, Value, Acc) -&gt;</span><br><span class="line">                io:format(&quot;Key: ~p, Value: ~p~n&quot;, [Key, Value]), Acc       </span><br><span class="line">          end,</span><br><span class="line">maps:fold(Fun, [], MapGroup).</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li><p>模式匹配<br>和列表一样，在函数<strong>参数</strong>中使用映射组可以提取相应的字段</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_puid(#login&#123;puid=V&#125;) -&gt; V.</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> erlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> erlang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统监控</title>
      <link href="/2023/06/22/Linux%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"/>
      <url>/2023/06/22/Linux%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p>Linux中系统监控的工具，进程、IO、网络等。</p><span id="more"></span><h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><ul><li><p>ps：显示当前所有<strong>进程</strong>的运行情况。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">13316 pts/0    00:00:00 bash</span><br><span class="line">16999 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure></li><li><p>top：<strong>实时显示</strong>当前所有<strong>任务</strong>的资源占用情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                </span><br><span class="line"> 1173 root      10 -10  166140  49928  10452 S   1.7  2.8   2:24.79 AliYunDunMonito                                                                        </span><br><span class="line">13233 hz        20   0  709408  46020  15864 S   1.0  2.6   0:06.84 node                                                                                   </span><br><span class="line"> 1109 root      20   0  815440  14616   7292 S   0.3  0.8   0:08.32 aliyun-service                                                                         </span><br><span class="line">    1 root      20   0   43628   4000   2600 S   0.0  0.2   0:00.77 systemd                                                                                </span><br><span class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kthreadd                                                                               </span><br><span class="line">    4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                                                           </span><br><span class="line">    6 root      20   0       0      0      0 S   0.0  0.0   0:00.12 ksoftirqd/0             </span><br></pre></td></tr></table></figure></li><li><p>pstree 以树状的模式输出进程列表，该模式显示了进程间的父/子关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ pstree</span><br><span class="line">systemd─┬─AliYunDun───9*[&#123;AliYunDun&#125;]</span><br><span class="line">        ├─AliYunDunMonito───25*[&#123;AliYunDunMonito&#125;]</span><br><span class="line">        ├─AliYunDunUpdate───6*[&#123;AliYunDunUpdate&#125;]</span><br><span class="line">        ├─2*[agetty]</span><br><span class="line">        ├─aliyun-service───7*[&#123;aliyun-service&#125;]</span><br><span class="line">        ├─assist_daemon───7*[&#123;assist_daemon&#125;]</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─chronyd</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon</span><br><span class="line">        ├─dhclient</span><br><span class="line">        ├─epmd</span><br><span class="line">        ├─gssproxy───5*[&#123;gssproxy&#125;]</span><br><span class="line">        ├─master─┬─pickup</span><br><span class="line">        │        └─qmgr</span><br><span class="line">        ├─polkitd───6*[&#123;polkitd&#125;]</span><br><span class="line">        ├─rpcbind</span><br><span class="line">        ├─rsyslogd───2*[&#123;rsyslogd&#125;]</span><br><span class="line">        ├─sshd───sshd───sshd───bash─┬─sh───node─┬─node─┬─bash─┬─pstree</span><br><span class="line">        │                           │           │      │      └─python3</span><br><span class="line">        │                           │           │      ├─bash</span><br><span class="line">        │                           │           │      └─12*[&#123;node&#125;]</span><br><span class="line">        │                           │           ├─node─┬─node───6*[&#123;node&#125;]</span><br><span class="line">        │                           │           │      └─11*[&#123;node&#125;]</span><br><span class="line">        │                           │           ├─node───12*[&#123;node&#125;]</span><br><span class="line">        │                           │           └─10*[&#123;node&#125;]</span><br><span class="line">        │                           └─sleep</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned───4*[&#123;tuned&#125;]</span><br></pre></td></tr></table></figure></li><li><p>vmstat<br>虚拟内存统计，报告有关进程、内存、分页、块 IO、中断和 CPU 活动等信息。<br>如果想要持续查看输出，可以在命令后面加上一个间隔时间（以秒为单位），命令将按照间隔时间来动态更新显示的内容（比如，vmstat 5）。按下Ctrl-C键可以终止输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ vmstat 5</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 1  0      0 158636  49584 1228320    0    0    38    52  936 1747  2  1 98  0  0</span><br></pre></td></tr></table></figure></li><li><p>jobs：列出所有活动作业的状态信息。</p></li></ul><h3 id="控制进程"><a href="#控制进程" class="headerlink" title="控制进程"></a>控制进程</h3><h4 id="暂停和中断进程"><a href="#暂停和中断进程" class="headerlink" title="暂停和中断进程"></a>暂停和中断进程</h4><p>按下<strong>Ctrl-Z</strong>键，程序将会暂停，此时可以用fg和bg让其继续工作。</p><p>在终端里按下<strong>Ctrl-C</strong>键将会中断（interrupt）一个程序，它意味着我们委婉地<strong>请求程序结束</strong>。许多（但不是所有）命令行程序都可以使用这种方法来实现中断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ jobs</span><br><span class="line">[hz@aliyun erlang-project]$ python3</span><br><span class="line">Python 3.6.8 (default, Nov 16 2020, 16:55:22) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">[1]+  Stopped                 python3</span><br><span class="line">[hz@aliyun erlang-project]$ jobs</span><br><span class="line">[1]+  Stopped                 python3</span><br></pre></td></tr></table></figure><h4 id="使进程后台运行"><a href="#使进程后台运行" class="headerlink" title="使进程后台运行"></a>使进程后台运行</h4><p>在命令后面加上和号字符（&amp;）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit &amp;</span><br></pre></td></tr></table></figure><h4 id="使进程回到前台运行"><a href="#使进程回到前台运行" class="headerlink" title="使进程回到前台运行"></a>使进程回到前台运行</h4><p>使用fg设置在前台中运行作业，要用到作业编号（jobspec选项），一般先用jobs命令查看挂起的进程的作业号，再用fg命令使其运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fg</span> %1</span><br></pre></td></tr></table></figure><h4 id="在后台运行"><a href="#在后台运行" class="headerlink" title="在后台运行"></a>在后台运行</h4><p>此时可以用fg命令设置在前台中运行作业，也可以用bg命令设置在后台中运行作业。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span> %1</span><br></pre></td></tr></table></figure><h2 id="IO相关"><a href="#IO相关" class="headerlink" title="IO相关"></a>IO相关</h2><ul><li><p>iostat CPU 的使用情况，以及设备、分区和网络文件系统（NFS）的 IO 统计信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ iostat </span><br><span class="line">Linux 3.10.0-1160.90.1.el7.x86_64 (aliyun.ecs)  06/24/2023      _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           1.58    0.00    0.60    0.06    0.00   97.76</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">vda               5.12        68.74        95.46     593791     824644</span><br></pre></td></tr></table></figure></li><li><p>iotop 命令利用 Linux 内核监控 I/O 使用情况，它按进程或线程的顺序显示 I/O 使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> sudo iotop</span><br><span class="line"> </span><br><span class="line"> TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND                                                                                     </span><br><span class="line">13312 be/4 hz          0.00 B/s    0.00 B/s  0.00 %  0.00 % node /home/hz/.vscode-server/bin/97dec172d3256f~onServerMain --node-ipc --clientProcessId=13267</span><br><span class="line">    1 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % systemd --switched-root --system --deserialize 22</span><br><span class="line">    2 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kthreadd]</span><br><span class="line">13315 be/4 hz          0.00 B/s    0.00 B/s  0.00 %  0.00 % node /home/hz/.vscode-server/bin/97dec172d3256f~onServerMain --node-ipc --clientProcessId=13267</span><br><span class="line">    4 be/0 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [kworker/0:0H]</span><br><span class="line"> 1029 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % python2 -Es /usr/sbin/tuned -l -P</span><br><span class="line">    6 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.00 % [ksoftirqd/0]</span><br></pre></td></tr></table></figure></li></ul><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><ul><li><p>ping：向网络主机发送ICMP ECHO_REQUEST数据包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ ping youkia.com</span><br><span class="line">PING youkia.com (117.78.38.96) 56(84) bytes of data.</span><br><span class="line">64 bytes from ecs-117-78-38-96.compute.hwclouds-dns.com (117.78.38.96): icmp_seq=1 ttl=46 time=55.3 ms</span><br><span class="line">64 bytes from ecs-117-78-38-96.compute.hwclouds-dns.com (117.78.38.96): icmp_seq=2 ttl=46 time=55.3 ms</span><br><span class="line">64 bytes from ecs-117-78-38-96.compute.hwclouds-dns.com (117.78.38.96): icmp_seq=3 ttl=46 time=55.3 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>traceroute：显示数据包到网络主机的路由路径。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ traceroute youkia.com</span><br><span class="line">traceroute to youkia.com (117.78.38.96), 30 hops max, 60 byte packets</span><br><span class="line"> 1  11.63.116.46 (11.63.116.46)  1.122 ms  1.124 ms  1.137 ms</span><br><span class="line"> 2  11.63.116.113 (11.63.116.113)  1.233 ms 10.124.228.125 (10.124.228.125)  1.290 ms 10.124.228.81 (10.124.228.81)  1.281 ms</span><br><span class="line"> 3  11.88.168.49 (11.88.168.49)  1.557 ms 11.48.239.121 (11.48.239.121)  1.137 ms 11.48.239.197 (11.48.239.197)  0.825 ms</span><br><span class="line"> 4  45.112.220.65 (45.112.220.65)  1.807 ms 45.112.220.89 (45.112.220.89)  1.356 ms 45.112.220.13 (45.112.220.13)  1.865 ms</span><br><span class="line"> 5  117.49.54.102 (117.49.54.102)  9.292 ms  9.277 ms 117.49.54.50 (117.49.54.50)  5.757 ms</span><br><span class="line"> 6  11.94.166.53 (11.94.166.53)  45.763 ms * 11.94.136.185 (11.94.136.185)  60.216 ms</span><br><span class="line"> 7  45.112.223.250 (45.112.223.250)  50.328 ms 10.102.154.246 (10.102.154.246)  41.797 ms 45.112.216.34 (45.112.216.34)  44.119 ms</span><br><span class="line"> 8  103.216.40.49 (103.216.40.49)  43.525 ms  43.945 ms  43.536 ms</span><br></pre></td></tr></table></figure></li><li><p>netstat：显示网络连接、路由表、网络接口数据、伪连接以及多点传送成员等信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ netstat -ie</span><br><span class="line">Kernel Interface table</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.173.142  netmask 255.255.240.0  broadcast 172.17.175.255</span><br><span class="line">        inet6 fe80::216:3eff:fe0d:5a2f  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:16:3e:0d:5a:2f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 24134  bytes 7211877 (6.8 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 24984  bytes 14476371 (13.8 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 28338  bytes 5183587 (4.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 28338  bytes 5183587 (4.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ss 获取套接字统计信息，可以显示类似于 netstat 的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有 TCP 或 UDP 套接字</span><br><span class="line">[hz@aliyun erlang-project]$ ss -t -a</span><br><span class="line">State       Recv-Q Send-Q                              Local Address:Port                                               Peer Address:Port                </span><br><span class="line">LISTEN      0      128                                             *:sunrpc                                                        *:*                    </span><br><span class="line">LISTEN      0      128                                             *:epmd                                                          *:*                   </span><br></pre></td></tr></table></figure></li><li><p>tcpdump</p><ul><li><p><strong>-i</strong> : 选择要捕获的接口，通常是以太网卡或无线网卡，也可以是 <code>vlan</code> 或其他特殊接口。如果该系统上只有一个网络接口，则无需指定。<br>注意：当是本机内部通信时, 走的是lo，此时是抓不到包的，必须指定网卡。</p></li><li><p><strong>-nn</strong> : 单个 n 表示不解析域名，直接显示 IP；两个 n 表示不解析域名和端口。这样不仅方便查看 IP 和端口号，而且在抓取大量数据时非常高效，因为域名解析会降低抓取速度。</p></li><li><p><strong>-s0</strong> : tcpdump 默认只会截取前 <code>96</code> 字节的内容，要想截取所有的报文内容，可以使用 <code>-s number</code>， <code>number</code> 就是你要截取的报文字节数，如果是 0 的话，表示截取报文全部内容。</p></li><li><p><strong>-v</strong> : 使用 <code>-v</code>，<code>-vv</code> 和 <code>-vvv</code> 来显示更多的详细信息，通常会显示更多与特定协议相关的信息。</p></li><li><p><code>port 80</code> : 这是一个常见的端口过滤器，表示仅抓取 <code>80</code> 端口上的流量，通常是 HTTP。</p></li><li><p>-A 以 ASCII 格式打印每个数据包</p></li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 -nn -s0 -v port 80</span><br><span class="line">tcpdump -A -s0 port 80 <span class="comment"># 以ASCII字符串 打印数据包</span></span><br><span class="line">tcpdump -i eth0 udp <span class="comment"># 指定协议</span></span><br><span class="line">tcpdump -i eth0 proto 17 <span class="comment"># 同上一条命令</span></span><br><span class="line">tcpdump -i eth0 -s0 -w test.pcap <span class="comment"># 写入文件</span></span><br><span class="line">tcpdump -i eth0 -s0 -l port 80 | grep <span class="string">&#x27;Server:&#x27;</span> <span class="comment"># 要实时将抓取到的数据通过管道传递给其他工具来处理 需要使用行缓冲模式</span></span><br></pre></td></tr></table></figure><ul><li><p>过滤器</p><ul><li><p>过滤host</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 1.2.3.4 # 指定主机 </span><br><span class="line">tcpdump -i eth0 dst 10.10.1.20 # src和dst是可选项=</span><br></pre></td></tr></table></figure></li><li><p>过滤网段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tcpdump net 192.168.1 # 三元组 192.168.1.x 发出或发往</span><br><span class="line">tcpdump src net 10 # 一元组 表示子网掩码255.0.0.0</span><br><span class="line"># 二元组 255.255.0.0</span><br><span class="line"># 四元组 某主机</span><br><span class="line">tcpdump src net 172.16.0.0/12 # CIDR</span><br></pre></td></tr></table></figure></li><li><p>过滤协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -n proto \\icmp# 保留字用双斜杠</span><br></pre></td></tr></table></figure></li><li><p>过滤端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump port 389</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="综合工具"><a href="#综合工具" class="headerlink" title="综合工具"></a>综合工具</h2><ul><li><p>dstat 显示 CPU 使用率、内存使用率、磁盘 I/O、网络流量等系统资源的情况</p><ul><li>-l ：显示负载统计量</li><li>-m ：显示内存使用率（包括used，buffer，cache，free值）</li><li>-r ：显示I/O统计</li><li>-s ：显示交换分区使用情况</li><li>-t ：将当前时间显示在第一行</li><li>–fs ：显示文件系统统计数据（包括文件总数量和inodes值）</li><li>–nocolor ：不显示颜色（有时候有用）</li><li>–socket ：显示网络统计数据</li><li>–tcp ：显示常用的TCP统计</li><li>–udp ：显示监听的UDP接口及其当前用量的一些动态数据</li><li>附带插件<ul><li>-–disk-util ：显示某一时间磁盘的忙碌状况</li><li>-–freespace ：显示当前磁盘空间使用率</li><li>-–proc-count ：显示正在运行的程序数量</li><li>-–top-bio ：指出块I/O最大的进程</li><li>-–top-cpu ：图形化显示CPU占用最大的进程</li><li>-–top-io ：显示正常I/O最大的进程</li><li>-–top-mem ：显示占用最多内存的进程</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[hz@aliyun erlang-project]$ dstat</span><br><span class="line">You did not select any stats, using -cdngy by default.</span><br><span class="line">----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system--</span><br><span class="line">usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw </span><br><span class="line">  2   1  98   0   0   0|  71k   98k|   0     0 |   0     0 |1851  3457 </span><br><span class="line">  1   1  98   0   0   0|   0     0 | 840B 3842B|   0     0 |2021  3567 </span><br><span class="line">  1   1  98   0   0   0|   0     0 | 120B  260B|   0     0 |1854  3420 </span><br><span class="line">  2   1  97   0   0   0|   0     0 | 460B  500B|   0     0 |1955  3532 </span><br><span class="line">  1   1  99   0   0   0|   0     0 | 120B  122B|   0     0 |1798  3296 </span><br><span class="line"> </span><br><span class="line"># 监控swap，process，sockets，filesystem并显示监控的时间</span><br><span class="line">[hz@aliyun erlang-project]$ dstat -tsp --socket --fs</span><br><span class="line">----system---- ----swap--- ---procs--- ------sockets------ --filesystem-</span><br><span class="line">     time     | used  free|run blk new|tot tcp udp raw frg|files  inodes</span><br><span class="line">24-06 23:39:21|   0     0 |0.0   0 5.5|223  11   4   0   0| 1280  49802 </span><br><span class="line">24-06 23:39:22|   0     0 |  0   0 8.0|229  11   4   0   0| 1344  49823 </span><br><span class="line">24-06 23:39:23|   0     0 |  0   0 7.0|223  11   4   0   0| 1344  49804 </span><br><span class="line">24-06 23:39:24|   0     0 |  0   0   0|223  11   4   0   0| 1344  49804 ^C</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gen_server</title>
      <link href="/2023/04/12/gen_server/"/>
      <url>/2023/04/12/gen_server/</url>
      
        <content type="html"><![CDATA[<p>介绍四大行为模式之一的gen_server</p><span id="more"></span><p>gen_server用于实现客户端/服务器模型，代码包括三部分：api，回调函数，实现函数（Internal functions）</p><p>回调模块的编写步骤：</p><ol><li><p>确定回调模块名。</p></li><li><p>编写接口函数。</p></li><li><p>在回调模块里编写六个必需的回调函数。</p><ul><li><p>init 服务器初始化</p></li><li><p>handle_call 处理同步请求</p></li><li><p>handle_cast 处理异步请求</p></li><li><p>handle_info 处理其他请求时必须实现</p></li><li><p>terminate 终止服务器</p></li><li><p>code_change 处理其他请求时必须实现</p></li></ul></li><li><p>回调函数更多是处理请求的发送和回复，具体的逻辑要编写一些私有函数（Internal functions）来实现。</p></li></ol><p>面积服务器例子如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%% API</span></span><br><span class="line"><span class="function"><span class="title">area</span><span class="params">(Thing)</span> -&gt;</span></span><br><span class="line">  gen_server:call(?MODULE, &#123;area, Thing&#125;).</span><br><span class="line"><span class="comment">%%% Spawning and gen_server implementation</span></span><br><span class="line"><span class="function"><span class="title">handle_call</span><span class="params">(&#123;area, Thing&#125;, _From, N)</span> -&gt;</span></span><br><span class="line">  &#123;reply, compute_area(Thing), N + <span class="number">1</span>&#125;.</span><br><span class="line"><span class="comment">%%% Internal functions</span></span><br><span class="line"><span class="function"><span class="title">compute_area</span><span class="params">(&#123;square, X&#125;)</span> -&gt;</span> X * X;</span><br><span class="line"><span class="function"><span class="title">compute_area</span><span class="params">(&#123;rectangle, X, Y&#125;)</span> -&gt;</span> X * Y.</span><br></pre></td></tr></table></figure><h3 id="启动gen-server"><a href="#启动gen-server" class="headerlink" title="启动gen_server"></a>启动gen_server</h3><ul><li><p><strong>start</strong><br>启动独立（standalone ）的gen_server，不包括在监督树的一部分。</p><ul><li>start(Module :: module(),<pre><code>Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre></li><li>start(ServerName :: server_name(),<pre><code>Module :: module(),Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre></li></ul></li><li><p><strong>start_link</strong><br>启动一个在监控树中的gen_server，这个函数应该直接或间接<strong>被supervision调用</strong></p><ul><li><p>start_link(Module :: module(),</p><pre><code>Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre></li><li><p>start_link(ServerName :: server_name(),</p><pre><code>Module :: module(),Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre><ul><li><p>按Name 指定的别名把进程注册到本地。</p></li><li><p>Mod 是回调模块的名字，其中应当包含各种回调函数以及与server相关的代码</p></li><li><p>Args 是一个Erlang 数据项 ，会被传递给相应的callback 函数用于初始化server 状态。</p></li><li><p>Opts 是一个列表，其中包括与进程和调试相关的各种选项</p></li></ul></li></ul></li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p>Module:init(Args) -&gt; Result</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Args = term()</span><br><span class="line">Result = &#123;ok,State&#125;</span><br><span class="line">  | &#123;ok,State,Timeout&#125;</span><br><span class="line">  | &#123;ok,State,hibernate&#125;</span><br><span class="line">  | &#123;ok,State,&#123;continue,Continue&#125;&#125;</span><br><span class="line">  | &#123;stop,Reason&#125;</span><br><span class="line">  | ignore</span><br><span class="line"> State = term()</span><br><span class="line"> Timeout = timeout()</span><br><span class="line"> Reason = term()</span><br></pre></td></tr></table></figure></li></ul><h3 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h3><p>实现远程过程调用，将所有的数据包装成Request来发送</p><ul><li>call(ServerRef :: server_ref(), Request :: term()) -&gt;<pre><code>Reply :: term()</code></pre></li><li>call(ServerRef :: server_ref(), Request :: term(), Timeout :: timeout()) -&gt;<pre><code>Reply :: term()</code></pre></li><li>Module:handle_call(Request, From, State) -&gt; Result</li></ul><p>复杂程度更高的应用程序经常会让gen_server回复一个noreply返回值，并把真正的回复任务委派给另一个进程。要了解更多这方面的信息，请阅读“Design Principles”①（设计原则）文档，以及sys和proc_lib模块的手册页。</p><h3 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h3><p>实现了一个播发（cast），也就是没有返回值的调用（实<br>际上就是一个消息，但习惯上称它为播发来与远程过程调用相区分）。异步请求是<strong>不期待回应</strong>的，因此handle_cast没有From参数。</p><ul><li>cast(ServerRef :: server_ref(), Request :: term()) -&gt; ok</li><li>Module:handle_cast(Request, State) -&gt; Result<ul><li>返回<ul><li>{noreply, NewState} 改变服务器状态</li><li>{stop, …} 停止服务器</li></ul></li></ul></li></ul><h3 id="处理自发性消息"><a href="#处理自发性消息" class="headerlink" title="处理自发性消息"></a>处理自发性消息</h3><p>回调函数handle_info(Info, State)被用来处理发给服务器的自发性消息。自发性消息是一切未经显式调用gen_server:call或gen_server:cast而到达服务器的消息。</p><ul><li>Module:handle_info(Info, State) -&gt; Result</li></ul><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><ul><li>Module:code_change(OldVsn, State, Extra) -&gt; {ok, NewState} | {error, Reason}</li></ul><h3 id="停止gen-server"><a href="#停止gen-server" class="headerlink" title="停止gen_server"></a>停止gen_server</h3><p>若gen_server是监控树的一部分，不需要关闭，由监控者的关闭策略来关闭。</p><p>如果是独立的gen_server，使用terminate函数关闭</p><ul><li>Module:terminate(Reason, State)</li></ul><p>当我们从单个服务器转向系统时，就会用到很多服务器。我们希望能以一致的方式监视它们、重启退出的服务器以及记录错误。这就是下一章的主题</p><p>构建系统</p><ul><li>当服务器崩溃时，需要一种机制来检测这种情况并重启它，为此将用到监控树（supervisiontree）这个概念。创建一个<strong>监控</strong>器来管理服务器，如果服务器崩溃就重启它们。</li><li>如果服务器确实崩溃了，我们希望知道它崩溃的原因，这样就能在未来修复这个问题。<br>为了记录所有错误，可以使用OTP的错误记录器。我们会展示<strong>如何配置错误记录器</strong>，以及如何根据错误日志生成错误报告。</li><li>计算质数（特别是大质数）时，CPU可能会过热，这就需要开启一个强力风扇来避免这种情况。要做到这一点，需要考虑警报。我们会用OTP<strong>事件处理框架</strong>来生成和处理警报</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> erlang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> erlang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 和 Github Pages 搭建博客</title>
      <link href="/2021/07/22/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/22/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>首先需要安装 node.js 和 git，网上有安装教程</p><p><strong>使用Hexo的常用命令先放在开头</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s <span class="comment"># 调试</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">hexo clean &amp;&amp; hexo deploy <span class="comment"># 发布</span></span><br><span class="line"> <span class="comment"># 新建一博客</span></span><br></pre></td></tr></table></figure><hr><p>正式开始开始搭建博客 <span id="more"></span></p><h2 id="Hexo本地设置"><a href="#Hexo本地设置" class="headerlink" title="Hexo本地设置"></a>Hexo本地设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo clean   <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo s <span class="comment"># 启动服务器查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo d # 自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure><h3 id="一键部署到GitHub"><a href="#一键部署到GitHub" class="headerlink" title="一键部署到GitHub"></a>一键部署到GitHub</h3><p>安装 <strong>deployer</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>打开 <strong>_config.yml</strong> 文件，加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/honghangzhi/honghangzhi.github.io  #你的仓库网址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>在命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:honghangzhi/honghangzhi.github.io.git</span><br><span class="line">hexo clean &amp;&amp; hexo deploy</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>在 <a href="https://xxx.github.io/">https://xxx.github.io</a> 打开</p><h3 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h3><p>更新博客每次都重新<strong>部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>修改 <strong>_config.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>选择主题 - /themes/next/_config.yml - chemes</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br></pre></td></tr></table></figure><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="友情链接：几个热门的主题"><a href="#友情链接：几个热门的主题" class="headerlink" title="友情链接：几个热门的主题"></a>友情链接：几个热门的主题</h3><ul><li><a href="https://github.com/theme-next/hexo-theme-next">next</a></li><li><a href="http://theme-next.iissnan.com/">老版next文档</a></li><li><a href="https://github.com/litten/hexo-theme-yilia">yilia</a></li></ul><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>两个配置文件：</p><ul><li>站点配置文件，根目录下的 <strong>_config.yml</strong> 文件</li><li>主题配置文件，\root\themes\next 下的 <strong>_config.yml</strong>  文件</li></ul><h3 id="显示文章字数和阅读时长"><a href="#显示文章字数和阅读时长" class="headerlink" title="显示文章字数和阅读时长"></a>显示文章字数和阅读时长</h3><p>在站点配置文件，根目录下的 <strong>_config.yml</strong> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: <span class="literal">true</span> <span class="comment"># 文章字数</span></span><br><span class="line">  time: <span class="literal">true</span> <span class="comment"># 阅读时长</span></span><br><span class="line">  total_symbols: <span class="literal">false</span> <span class="comment"># 所有文章总字数</span></span><br><span class="line">  total_time: <span class="literal">false</span> <span class="comment"># 所有文章阅读中时长</span></span><br></pre></td></tr></table></figure><p><strong>以下的设置均在主题配置文件中设置</strong></p><h3 id="设置菜单栏"><a href="#设置菜单栏" class="headerlink" title="设置菜单栏"></a>设置菜单栏</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span>                      <span class="comment">#首页</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span>       <span class="comment">#分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span>                 <span class="comment">#标签</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span>      <span class="comment">#归档</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span>               <span class="comment">#关于</span></span><br><span class="line">  <span class="comment"># resources: /resources/ || download   #资源</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar    #日历</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat      #腾讯公益404</span></span><br></pre></td></tr></table></figure><p>此时菜单栏并没有页面，在根目录执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;resources&quot;</span><br></pre></td></tr></table></figure><p>来生成页面，sources文件夹下会生成categories、tags、about、resources四个文件，每个文件中有一个<code>index.md</code>文件，修改内容分别如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 资源</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;resources&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="菜单栏添加搜索框（Local-Search）"><a href="#菜单栏添加搜索框（Local-Search）" class="headerlink" title="菜单栏添加搜索框（Local Search）"></a>菜单栏添加搜索框（Local Search）</h3><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br></pre></td></tr></table></figure><p>主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>将图片 avatar.gif 移动到 \root\themes\next\source\images 目录下，在主题配置文件配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.gif   #图片的位置，也可以是http://xxx.com/avatar.png</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true   #头像展示在圈里</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false  #头像随光标旋转</span><br></pre></td></tr></table></figure><h3 id="社交网站链接"><a href="#社交网站链接" class="headerlink" title="社交网站链接"></a>社交网站链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/honghangzhi || fab fa-github</span><br></pre></td></tr></table></figure><h3 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><h3 id="暗夜模式-新版next主题内置"><a href="#暗夜模式-新版next主题内置" class="headerlink" title="暗夜模式 - 新版next主题内置"></a>暗夜模式 - 新版next主题内置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="设置博文内链接为蓝色"><a href="#设置博文内链接为蓝色" class="headerlink" title="设置博文内链接为蓝色"></a>设置博文内链接为蓝色</h3><p>在 themes/next/source/css/_common/components/post/post.styl文件中末尾加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">     color: #0593d3;</span><br><span class="line">     border-bottom: none;</span><br><span class="line">     &amp;:hover &#123;</span><br><span class="line">       color: #0477ab;</span><br><span class="line">       text-decoration: underline;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="设置文章末尾”本文结束”标记"><a href="#设置文章末尾”本文结束”标记" class="headerlink" title="设置文章末尾”本文结束”标记"></a>设置文章末尾”本文结束”标记</h3><p>在路径 /themes/next/layout/_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:24px;&quot;&gt;（完）&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开/themes/next/layout/_macro/post.swig文件，在post-footer前添加代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index and theme.passage_end_tag.enabled %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h3 id="设置建站时间"><a href="#设置建站时间" class="headerlink" title="设置建站时间"></a>设置建站时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2020-02   #建站时间</span><br></pre></td></tr></table></figure><h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h3><h4 id="（1）安装插件"><a href="#（1）安装插件" class="headerlink" title="（1）安装插件"></a>（1）安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h4 id="（2）设置置顶标志"><a href="#（2）设置置顶标志" class="headerlink" title="（2）设置置顶标志"></a>（2）设置置顶标志</h4><p>打开blog/themes/next/layout/_macro目录下的post.swig文件，定位到 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> 标签下，插入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）在文章中添加top"><a href="#（3）在文章中添加top" class="headerlink" title="（3）在文章中添加top"></a>（3）在文章中添加top</h4><p>然后在需要置顶的文章的Front-matter中加上top: true即可，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="添加评论（使用valine）"><a href="#添加评论（使用valine）" class="headerlink" title="添加评论（使用valine）"></a>添加评论（使用valine）</h3><p>可以参考这篇<a href="https://blog.csdn.net/blue_zy/article/details/79071414?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162688580716780265414057%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162688580716780265414057&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-79071414.first_rank_v2_pc_rank_v29&utm_term=hexo+%E8%AF%84%E8%AE%BA">文章</a>，步骤</p><h4 id="（1）注册Leancloud"><a href="#（1）注册Leancloud" class="headerlink" title="（1）注册Leancloud"></a>（1）注册Leancloud</h4><p>① <a href="https://console.leancloud.cn/apps">LeanCloud</a>注册<br>② 创建应用<br>③ 应用 - 设置 - 应用凭证，复制<strong>AppID</strong>和<strong>AppKey</strong></p><h4 id="（2）修改主题配置文件"><a href="#（2）修改主题配置文件" class="headerlink" title="（2）修改主题配置文件"></a>（2）修改主题配置文件</h4><p>将复制的<strong>AppID</strong>和<strong>AppKey</strong>添加到配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line">  active: valine</span><br><span class="line">  </span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: # Your leancloud application appid</span><br><span class="line">  appkey # Your leancloud application appkey</span><br></pre></td></tr></table></figure><h3 id="添加多级分类"><a href="#添加多级分类" class="headerlink" title="添加多级分类"></a>添加多级分类</h3><p>next 内置多级分类，在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories: </span><br><span class="line">- 父目录</span><br><span class="line">- 子目录</span><br></pre></td></tr></table></figure><p>此时查看博文将显示 <code>父目录，子目录</code></p><h4 id="设置多级分类只显示子类别"><a href="#设置多级分类只显示子类别" class="headerlink" title="设置多级分类只显示子类别"></a>设置多级分类只显示子类别</h4><p>搜索 <code>post.in</code> 将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if post.categories and post.categories.length and theme.post_meta.categories %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;far fa-folder&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.in&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;%- for cat in post.categories.toArray() %&#125;</span><br><span class="line">      &lt;span itemprop=&quot;about&quot; itemscope itemtype=&quot;http://schema.org/Thing&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(cat.path) &#125;&#125;&quot; itemprop=&quot;url&quot; rel=&quot;index&quot;&gt;&lt;span itemprop=&quot;name&quot;&gt;&#123;&#123; cat.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">      &#123;%- set cat_length = post.categories.length %&#125;</span><br><span class="line">      &#123;%- if cat_length &gt; 1 and loop.index !== cat_length %&#125;</span><br><span class="line">        &#123;&#123; __(&#x27;symbol.comma&#x27;) &#125;&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>替换如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if post.categories and post.categories.length and theme.post_meta.categories %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;far fa-folder&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.in&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;%- for cat in post.categories.toArray() %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;%- if loop.last %&#125;</span><br><span class="line">        &lt;span itemprop=&quot;about&quot; itemscope itemtype=&quot;http://schema.org/Thing&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;&#123;&#123; url_for(cat.path) &#125;&#125;&quot; itemprop=&quot;url&quot; rel=&quot;index&quot;&gt;&lt;span itemprop=&quot;name&quot;&gt;&#123;&#123; cat.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="启用fancybox：点击查看图片大图"><a href="#启用fancybox：点击查看图片大图" class="headerlink" title="启用fancybox：点击查看图片大图"></a>启用fancybox：点击查看图片大图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><ul><li><p>免费域名：<a href="https://www.freenom.com/zh/index.html?lang=zh">https://www.freenom.com/zh/index.html?lang=zh</a></p></li><li><p>付费域名</p><ul><li><p>阿里云：<a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com/</a></p></li><li><p>腾讯云：<a href="https://dnspod.cloud.tencent.com/">https://dnspod.cloud.tencent.com/</a></p></li></ul></li></ul><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>TODO</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://hexo.io/docs/one-command-deployment">Hexo</a></li><li><a href="https://hexo.io/zh-cn/">Hexo中文</a></li><li><a href="https://docs.github.com/cn/pages">Github Pages</a></li></ul><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul><li><p><a href="https://blog.csdn.net/wapchief/article/details/54602515?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162677118916780262589207%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162677118916780262589207&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduend~default-1-54602515.pc_v2_rank_blog_default&utm_term=hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">搭建教程</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/106060640">主题美化参考</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/configuration.html">关于写作</a></p></li><li><p><a href="https://juejin.cn/post/6844903720296120328">https://juejin.cn/post/6844903720296120328</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
