<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>列表和元组</title>
      <link href="/2023/06/23/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/"/>
      <url>/2023/06/23/%E5%88%97%E8%A1%A8%E5%92%8C%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>容器，存储可变数量数据，类似是带头节点的单链表，所有操作从头开始。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[area,<span class="number">100</span>,<span class="number">200</span>,<span class="string">&quot;你好&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="模式匹配的列表操作"><a href="#模式匹配的列表操作" class="headerlink" title="模式匹配的列表操作"></a>模式匹配的列表操作</h2><p>列表的第一个元素被称为列表头（head），把列表头去掉，剩下的就被称为列表尾（tail）。<br>[H|T] ，其中一个是元素，一个是列表，并且前面必须是元素，后面是列表，开头可以有多个元素</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ThingsToBuy = [&#123;apples, <span class="number">10</span>&#125;,&#123;pears,<span class="number">6</span>&#125;,&#123;milk,<span class="number">3</span>&#125;].</span><br><span class="line">ThingsToBuy1 = [&#123;oranges,<span class="number">4</span>&#125;,&#123;newspaper,<span class="number">1</span>&#125;|ThingsToBuy]</span><br></pre></td></tr></table></figure><h4 id="列表推导（list-comprehension）"><a href="#列表推导（list-comprehension）" class="headerlink" title="列表推导（list comprehension）"></a>列表推导（list comprehension）</h4><p>能够生成元素并对生成的元素做测试的表达式。</p><ul><li><p>语法：<code>[X || Qualifier1, Qualifier2, ... ]</code><br>Qualifier1可以是生成器、位串生成器或过滤器 </p><ul><li>生成器（generator），<code>Pattern &lt;- ListExpr</code></li><li>位串（bitstring）生成器，<code>BitStringPattern &lt;= BitStringExpr</code></li><li>过滤器（filter）<br>判断函数（返回true或false）或布尔表达式，只有true的值会被加入列表<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">L=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].</span><br><span class="line"><span class="comment">% 从L中提取X，并加倍</span></span><br><span class="line">[<span class="number">2</span>*X || X &lt;- L].</span><br><span class="line"></span><br><span class="line"><span class="comment">%</span></span><br><span class="line">[ &#123;X,Y&#125; || x&lt;-[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], y &lt;- [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] ].</span><br><span class="line"></span><br><span class="line"><span class="comment">% 强制判断</span></span><br><span class="line">[throw(<span class="string">&quot;this_fun_not_use_uid_prop&quot;</span>) || z_prop_kit:get_prop_max(EncodeProp) =:= <span class="number">1</span>],</span><br></pre></td></tr></table></figure><h4 id="归集器"><a href="#归集器" class="headerlink" title="归集器"></a>归集器</h4>尾递归优化方法，程序<strong>只遍历列表一次</strong>，把奇偶参数分别添加到合适的列表里。这些列表被称为归集器（accumulator）。<br>区别在于：奇偶列表里的元素顺序是反转的<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">odds_and_evens</span><span class="params">(L)</span>-&gt;</span></span><br><span class="line">  odds_and_evens_acc(L, [], []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">odds_and_evens_acc</span><span class="params">([H|T],Odds, Events)</span>-&gt;</span></span><br><span class="line">  <span class="keyword">case</span> (H <span class="keyword">rem</span> <span class="number">2</span>) <span class="keyword">of</span></span><br><span class="line">    <span class="number">1</span>-&gt;</span><br><span class="line">      odds_and_evens_acc(T, [H|Odds], Events);</span><br><span class="line">    <span class="number">0</span>-&gt;</span><br><span class="line">      odds_and_evens_acc(T, Odds, [H|Events])</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="title">odds_and_evens_acc</span><span class="params">([],Odds, Events)</span>-&gt;</span></span><br><span class="line">  &#123;Odds, Events&#125;.</span><br></pre></td></tr></table></figure><h4 id="常用BIF"><a href="#常用BIF" class="headerlink" title="常用BIF"></a>常用BIF</h4></li></ul></li><li><p>hd(List) -&gt; term()<br>取列表头</p></li><li><p>tl(List) -&gt; term()<br>取除列表头的部分</p></li><li><p>length(List) -&gt; integer() &gt;= 0<br>列表长度</p><h4 id="lists模块提供的处理函数"><a href="#lists模块提供的处理函数" class="headerlink" title="lists模块提供的处理函数"></a>lists模块提供的处理函数</h4></li><li><p>member(Elem, List) -&gt; boolean()<br>是否是成员</p></li><li><p>append(ListOfLists) -&gt; List1</p></li><li><p>append(List1, List2) -&gt; List3</p></li><li><p>reverse(List1) -&gt; List2</p></li><li><p>reverse(List1, Tail) -&gt; List2<br>反转List1并将Tail插入到列表尾</p></li><li><p>delete(Elem, List1) -&gt; List2</p></li><li><p>filter(Pred, List1) -&gt; List2<br>List2是Pred函数返回True的结果</p></li><li><p>sort(List1) -&gt; List2</p></li><li><p>sort(Fun, List1) -&gt; List2<br>使用自定义排序函数Fun来排序<br>对fun(A,B)，当A&lt;=B返回true，否则返回false</p></li><li><p>nth(N, List) -&gt; Elem</p></li><li><p>nthtail(N, List) -&gt; Tail</p></li><li><p>sublist(List1, Len) -&gt; List2</p></li><li><p>sublist(List1, Start, Len) -&gt; List2</p></li><li><p>search(Pred, List) -&gt; {value, Value} | false</p></li></ul><p>遍历，基本都是用匿名函数</p><ul><li><p>foldl(Fun, Acc0, List) -&gt; Acc1<br>对List里的元素连续调用Fun(Elem, AccIn)，Acc0是累加器的初始值</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (Elem, Acc) -&gt;</span><br><span class="line">            [Elem | Acc]</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:foldl(Fun, [], [a, b]).</span><br><span class="line"><span class="comment">% [b,a]</span></span><br></pre></td></tr></table></figure></li><li><p>foldr(Fun, Acc0, List) -&gt; Acc1<br>和foldl的遍历顺序相反，是从右到左</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (Elem, Acc) -&gt;</span><br><span class="line">            [Elem | Acc]</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:foldr(Fun, [], [a, b]).</span><br><span class="line"><span class="comment">% [a,b]</span></span><br></pre></td></tr></table></figure></li><li><p>map(Fun, List1) -&gt; List2<br>获取映射</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (a) -&gt;</span><br><span class="line">            x;</span><br><span class="line">          (b)-&gt;</span><br><span class="line">            y</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:map(Fun, [a,b]).</span><br><span class="line"><span class="comment">% [x,y]</span></span><br></pre></td></tr></table></figure></li><li><p>mapfoldl(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>结合map和foldl</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (X, Acc) -&gt;</span><br><span class="line">            &#123;<span class="number">2</span>*X, [X + <span class="number">1</span> | Acc]&#125;</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:mapfoldl(Fun, [], [<span class="number">1</span>, <span class="number">2</span>]).</span><br><span class="line"><span class="comment">% &#123;[2,4],[3,2]&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>mapfoldr(Fun, Acc0, List1) -&gt; {List2, Acc1}<br>结合map和foldr</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  Fun = <span class="keyword">fun</span></span><br><span class="line">          (X, Acc) -&gt;</span><br><span class="line">            &#123;<span class="number">2</span>*X, [X + <span class="number">1</span> | Acc]&#125;</span><br><span class="line">        <span class="keyword">end</span>,</span><br><span class="line">  lists:mapfoldl(Fun, [], [<span class="number">1</span>, <span class="number">2</span>]).</span><br><span class="line"><span class="comment">% &#123;[2,4],[2,3]&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>foreach(Fun, List) -&gt; ok<br>对List的每个元素执行Fun操作</p></li></ul><p>元组列表的操作</p><ul><li><p>keydelete(Key, N, TupleList1) -&gt; TupleList2</p></li><li><p>keyfind(Key, N, TupleList) -&gt; Tuple | false</p></li><li><p>keymap(Fun, N, TupleList1) -&gt; TupleList2</p></li><li><p>keymember(Key, N, TupleList) -&gt; boolean()</p></li><li><p>keymerge(N, TupleList1, TupleList2) -&gt; TupleList3</p></li><li><p>keyreplace(Key, N, TupleList1, NewTuple) -&gt; TupleList2</p></li><li><p>keysearch(Key, N, TupleList) -&gt; {value, Tuple} | false</p></li><li><p>keysort(N, TupleList1) -&gt; TupleList2</p></li><li><p>keystore(Key, N, TupleList1, NewTuple) -&gt; TupleList2</p></li><li><p>keytake(Key, N, TupleList1) -&gt; {value, Tuple, TupleList2} | false</p><h4 id="z-lib提供的处理函数"><a href="#z-lib提供的处理函数" class="headerlink" title="z_lib提供的处理函数"></a>z_lib提供的处理函数</h4></li><li><p>get_list_range/1<br>get_list_range(List::[term()]) -&gt; return() where return() = {Len::integer(), Min::term(), Max::term()} | false.<br>获得列表的最大最小值</p></li><li><p>get_value(List, Key, Default) -&gt; any()<br>从元组列表或Tree中，获得指定的键值，如果键不存在，使用默认值</p></li><li><p>get_value(List, Key, ValuePos, Default) -&gt; any()<br>从元组列表或Tree中，获得指定的键值，如果键不存在，使用默认值，可以指定值的位置</p></li><li><p>get_value(List, Key, KeyPos, ValuePos, Default)<br>可以指定键和值的位置</p></li><li><p>get_values(KVList, KeyDefaultList)<br>从元组列表或Tree中，获得指定的键值，如果键不存在，使用默认值</p></li><li><p>get_values(KVList, ValuePos,KeyDefaultList)</p></li><li><p>get_values(KVList, KeyPos, ValuePos, KeyDefaultList)</p></li></ul><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>容器，存放固定数目的数据，类似于数组，可随机存取。用元组管理的项数不宜超过五六项。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;area,<span class="number">100</span>,<span class="number">200</span>,<span class="string">&quot;你好&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="常用BIF-1"><a href="#常用BIF-1" class="headerlink" title="常用BIF"></a>常用BIF</h4><ul><li>element(N, Tuple) -&gt; term()<br>获取指定位置数据</li><li>size(Item) -&gt; integer() &gt;= 0<br>获取元组长度</li><li>erlang:insert_element(Index, Tuple1, Term) -&gt; Tuple2<br>在Index位置插入Term</li><li>erlang:append_element(Tuple1, Term) -&gt; Tuple2<br>在尾部插入</li><li>erlang:delete_element(Index, Tuple1) -&gt; Tuple2<br>删除指定位置元素</li><li>setelement(Index, Tuple1, Value) -&gt; Tuple2<br>将Index位置更新为Value，返回新元组</li><li>erlang:make_tuple(Arity, InitialValue) -&gt; tuple()<br>创建具有Arity个InitialValue的元组</li><li>erlang:make_tuple(Arity, DefaultValue, InitList) -&gt; tuple()<br>创建具有Arity个DefaultValue的元组，并以InitList指定<br>如下指定第5个元素为zz，第2个元素（多次出现以最后一个为准）为aa<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; erlang:make_tuple(<span class="number">5</span>, [], [&#123;<span class="number">2</span>,ignored&#125;,&#123;<span class="number">5</span>,zz&#125;,&#123;<span class="number">2</span>,aa&#125;]).</span><br><span class="line">&#123;[],aa,[],[],zz&#125;</span><br></pre></td></tr></table></figure>遍历元组的方法，核心是传入索引<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(Tuple, F, A)</span> -&gt;</span></span><br><span class="line">  foreach(Tuple, <span class="number">1</span>, tuple_size(Tuple), F, A).</span><br><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(Tuple, I, N, F, A)</span> <span class="title">when</span> I =&lt; N -&gt;</span></span><br><span class="line">  F(A, element(I, Tuple)),</span><br><span class="line">  foreach(Tuple, I + <span class="number">1</span>, N, F, A);</span><br><span class="line"><span class="function"><span class="title">foreach</span><span class="params">(_Tuple, _I, _N, _F, A)</span> -&gt;</span></span><br><span class="line">  A.</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4>元组可用于实现字典<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MY_Dict = dict:new(),</span><br><span class="line">MY_Dict1 = dict:append(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>, MY_Dict),</span><br><span class="line">dict:fetch_keys(MY_Dict1).</span><br></pre></td></tr></table></figure></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> erlang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/23/hello-world/"/>
      <url>/2023/06/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>. <span id="more"></span></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git基本使用</title>
      <link href="/2023/05/21/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/21/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="仓库、用户配置"><a href="#仓库、用户配置" class="headerlink" title="仓库、用户配置"></a>仓库、用户配置</h2><ol><li>配置用户名和邮箱</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置SSH</li></ol><p>使用SSH上传项目不需要登录</p><ul><li>生成 SSH Key ，输入命令：<br><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br>之后点回车</li><li>目录 .ssh 下，文件 id_rsa(密匙) 和 id_rsa.pub(公匙) </li><li>在代码托管网站 Add SSH Key ：粘贴 id_rsa.pub(公匙)  内容<br><code>cd .ssh</code><br><code>cat id_rsa.pub</code></li></ul><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 排除所有.开头的隐藏文件:</span><br><span class="line">.*</span><br><span class="line"># 排除所有.class文件:</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># 不排除.gitignore和App.class:  !+filename</span><br><span class="line">!.gitignore</span><br><span class="line">!App.class</span><br></pre></td></tr></table></figure><h2 id="为命令指定别名"><a href="#为命令指定别名" class="headerlink" title="为命令指定别名"></a>为命令指定别名</h2><p>可以为长命令指定别名免去重复输入的麻烦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">st -&gt; status</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>.git/config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">    co = checkout</span><br><span class="line">    ci = commit</span><br><span class="line">    br = branch</span><br><span class="line">    st = status</span><br><span class="line">[user]</span><br><span class="line">    name = Your Name</span><br><span class="line">    email = your@email.com</span><br></pre></td></tr></table></figure><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="版本库（repository）"><a href="#版本库（repository）" class="headerlink" title="版本库（repository）"></a>版本库（repository）</h2><p>维持项目整个生命周期的完整副本。</p><h2 id="Git对象类型"><a href="#Git对象类型" class="headerlink" title="Git对象类型"></a>Git对象类型</h2><ul><li>块（big large object，blob）：文件的每一个版本，只包含数据，而不包含元数据</li><li>目录树（tree）：记录路径和元数据</li><li>提交（commit）：版本库变化的元数据</li><li>标签（tag）：分配别名给对象（通常是提交对象）</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>临时、动态的二进制文件（指针）</p><p>stage，合并(merge)</p><h2 id="可寻址内容名称（SHA1、散列码、对象ID）"><a href="#可寻址内容名称（SHA1、散列码、对象ID）" class="headerlink" title="可寻址内容名称（SHA1、散列码、对象ID）"></a>可寻址内容名称（SHA1、散列码、对象ID）</h2><p>每个对象都有一个唯一名称（使用SHA1得到的SHA1散列值，160位数，40位十六进制数）</p><h2 id="Git追踪内容"><a href="#Git追踪内容" class="headerlink" title="Git追踪内容"></a>Git追踪内容</h2><ul><li>追踪的是内容而不是文件（根据SHA1判断），同一个文件放在不同目录将指向同一个对象。</li><li>版本变更时，存储每个文件的每个版本。</li></ul><h2 id="路径名与内容"><a href="#路径名与内容" class="headerlink" title="路径名与内容"></a>路径名与内容</h2><table><thead><tr><th>系统</th><th>索引机制</th><th>数据存储</th></tr></thead><tbody><tr><td>传统数据库</td><td>索引顺序存取方法（ISAM）</td><td>数据记录</td></tr><tr><td>UNIX文件系统</td><td>目录（/path/to/file）</td><td>数据库</td></tr><tr><td>Git</td><td>.git/objects/hash、树对象内容</td><td>blob对象、树对象</td></tr></tbody></table><p>路径名与内容只为了重建文件和目录，物理结构和传统数据库和UNIX文件系统不同。</p><h2 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h2><h1 id="工作概念"><a href="#工作概念" class="headerlink" title="工作概念"></a>工作概念</h1><p>.<strong><code>git目录内容</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">COMMIT_EDITMSG  </span><br><span class="line">config       </span><br><span class="line">HEAD            </span><br><span class="line">description  </span><br><span class="line">index   </span><br><span class="line">hooks/  </span><br><span class="line">info/  </span><br><span class="line">objects/</span><br><span class="line">logs/  </span><br><span class="line">refs/</span><br></pre></td></tr></table></figure><p>对新文件，根据内容计算SHA1散列值，将散列值的十六进制形式作为文件名放入对象库</p><p>通过唯一前缀查找文件<code>git rev-parse 3b18e512d</code></p><p>通过标签查找<code>git rev-parse v 1.0</code></p><h2 id="文件和树"><a href="#文件和树" class="headerlink" title="文件和树"></a>文件和树</h2><p>每次使用<code>git add、git rm、git mv</code>等命令时，Git为文件内容创建对象和更新索引</p><p><code>git write-tree</code>用于将索引写入一个树对象</p><p><code>git cat-file -p tree_sha1</code>可以看到树对象下文件属性（八进制）、对象类型、SHA1值、文件名等元数据信息</p><h1 id="文件管理和索引"><a href="#文件管理和索引" class="headerlink" title="文件管理和索引"></a>文件管理和索引</h1><p>编辑文件后交给版本控制系统管理，索引是用于<strong>暂存</strong>的中间层。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 查看索引状态</span></span><br><span class="line">git differ <span class="comment"># 显示未暂存的变更</span></span><br><span class="line">git differ --cached <span class="comment"># 显示已经暂存</span></span><br></pre></td></tr></table></figure><h2 id="Git文件分类"><a href="#Git文件分类" class="headerlink" title="Git文件分类"></a>Git文件分类</h2><ul><li>已追踪的（Tracked）：已在版本库或已暂存</li><li>被忽略的（Ignored）</li><li>未追踪的（Untracked）</li></ul><h2 id="使用git-add"><a href="#使用git-add" class="headerlink" title="使用git add"></a>使用git add</h2><p>暂存文件</p><h2 id="使用git-commit的注意事项"><a href="#使用git-commit的注意事项" class="headerlink" title="使用git commit的注意事项"></a>使用git commit的注意事项</h2><p><code>git commit --all</code>将暂存所有已知的和修改的文件并提交</p><h2 id="使用git-rm"><a href="#使用git-rm" class="headerlink" title="使用git rm"></a>使用git rm</h2><p><code>git rm</code>在版本库和工作空间同时删除文件</p><p><code>git rm --cached</code>将文件从暂存改为未暂存</p><h2 id="使用git-mv"><a href="#使用git-mv" class="headerlink" title="使用git mv"></a>使用git mv</h2><p>Git特性：即使文件重命名仍能保留信息</p><h2 id="gitnore文件"><a href="#gitnore文件" class="headerlink" title=".gitnore文件"></a>.gitnore文件</h2><ul><li>空行忽略</li><li>以#开头作为注释，但如果跟在其他文本后面将不是注释</li><li>简单文件名匹配任何目录的同名文件</li><li>目录由末尾的/标记，但不匹配文件或符号链接</li><li>shell通配符，不能跨目录匹配，例：debug/32bit/*.o</li><li>! 对同行其余部分取反</li></ul><p>每个目录都能有.gitnore文件，越近优先级越高</p><h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><p>git commit</p><p>git log 查看提交记录</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>git checkout</p><p>-b 创建并切换到新分支</p><p>git switch</p><p>分支合并</p><p>git merge 合并到当前分支</p><p>git rebase  重定向到目标分支</p><p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去</p><h2 id="在提交树上移动"><a href="#在提交树上移动" class="headerlink" title="在提交树上移动"></a>在提交树上移动</h2><h3 id="分离head"><a href="#分离head" class="headerlink" title="分离head"></a>分离head</h3><p>HEAD 是一个对当前所在分支的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD <strong>通常情况下是指向分支名</strong>的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p><code>cat .git/HEAD</code></p><p>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。在命令执行之前的状态如下所示：</p><p>HEAD -&gt; main -&gt; C1</p><p>HEAD 指向 main， main 指向 C1</p><p>注意：当使用切换分支 git checkout 会使head指向当前分支</p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><p>解决哈希值指定提交记录不方便的问题，引入类似目录操作的相对引用</p><ul><li>使用 <code>^</code> 向上移动 1 个提交记录，<code>main^</code>=main的父节点，<code>main^^</code>=main的爷节点，</li><li>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></li></ul><h3 id="强制修改分支位置"><a href="#强制修改分支位置" class="headerlink" title="强制修改分支位置"></a>强制修改分支位置</h3><p>你现在是相对引用的专家了，现在用它来做点实际事情。</p><p>我使用相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f main HEAD~3</span><br></pre></td></tr></table></figure><p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级父提交。</p><h2 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h2><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 </p><ul><li><code>git reset</code> ，需要有一个参数，只对本地库有效，对远程库无效</li><li><code>git revert</code>，对远程库有效，会在本分支后新建一个和回退处相同的分支</li></ul><h2 id="整理提交记录"><a href="#整理提交记录" class="headerlink" title="整理提交记录"></a>整理提交记录</h2><p>开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”, 而接下来就讲的就是它的实现方式，非常清晰、灵活，还很生动。</p><p><code>git cherry-pick &lt;提交号&gt;...</code><br>如果你想将一些提交复制到当前所在的位置（HEAD）下面的话， Cherry-pick 是最直接的方式了。我个人非常喜欢 cherry-pick，因为它特别简单。</p><p>优点是合并多个</p><p><code>git cherry-pick C2 C4</code></p><p>当你知道你所需要的提交记录（<strong>并且</strong>还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。</p><p>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了</p><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>当 rebase UI界面打开时, 你能做3件事:</p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。 遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。</li></ul><p><code>git rebase -i HEAD~4</code></p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h2 id="本地栈式提交"><a href="#本地栈式提交" class="headerlink" title="本地栈式提交"></a>本地栈式提交</h2><p>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。</p><p>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 <code>bugFix</code> 分支里的工作合并回 <code>main</code> 分支了。你可以选择通过 fast-forward 快速合并到 <code>main</code> 分支上，但这样的话 <code>main</code> 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码管理 </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>otp</title>
      <link href="/2023/04/12/otp/"/>
      <url>/2023/04/12/otp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.erlang.org/doc/applications.html">Erlang/OTP Applications</a></p><ul><li><a href="https://www.erlang.org/doc/system_principles/system_principles.html">Erlang – System Principles</a></li><li><a href="https://www.erlang.org/doc/design_principles/users_guide.html">Erlang – OTP Design Principles</a></li></ul><p>借助分布式系统，你可以达到可伸缩性。事实上，可用性（ availability ）、一致性(consistency ）和可伸缩性（ scalability ） 三者环环相扣，相互影响。从单节点上的井发模型与消息传递概念为起点，我们又将其扩展，跨越网络，用于集群。E rlang 的虚拟<br>机利用了今天多核系统的优势，允许进程以真正并发的方式运行在不同的核心上。由于Erlang 虚拟机拥有“对称多处理器”（ SM P ）方面的能力， Erlang 已做好准备帮助应用程序｜随着每片CPU 核心数的增加而垂直伸展。并且由于在集群上添加节点是如此轻松一一新加入的节点只需出问一个已有的节点便能加入整个网络一一水平伸缩问题也就迎刃而解了。终于，你可以聚焦于解决分布式系统中那些真正的挑战了，即，如何将你的数据和状态分布在不可靠的主机和网络上。</p><h1 id="OTP设计原则"><a href="#OTP设计原则" class="headerlink" title="OTP设计原则"></a>OTP设计原则</h1><p> 监督树</p><p> 监督树是otp的基本概念，将进程分为工作者和 监督者：</p><ul><li>工作者是实际进行计算的进程。</li><li>监督者观察工作者的行为，当发生错误时可以重启工作者</li><li>监督树是把代码组织成监督者和工作者，使设计容错性成为可能。</li></ul><p>行为模式（behavior）</p><p>在监控树中，许多进程的结构相似，有着共同的模式，这些模式称为行为。otp将行为抽象为一个模块，称为<strong>行为模块</strong>，只负责进程通用的部分，如发出请求，接收响应等，具体的处理过程在<strong>回调模块</strong>编写，这种组织方式可以减小代码的耦合度。以下是一个简单的例子：</p><p>行为模块</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(server)</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([start/<span class="number">1</span>])</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([call/<span class="number">2</span>, cast/<span class="number">2</span>])</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([init/<span class="number">1</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">(Mod)</span> -&gt;</span></span><br><span class="line">    spawn(server, init, [Mod]).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">call</span><span class="params">(Name, Req)</span> -&gt;</span></span><br><span class="line">    Name ! &#123;call, self(), Req&#125;,</span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">        &#123;Name, Res&#125; -&gt;</span><br><span class="line">            Res</span><br><span class="line">    <span class="keyword">end</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">cast</span><span class="params">(Name, Req)</span> -&gt;</span></span><br><span class="line">    Name ! &#123;cast, Req&#125;,</span><br><span class="line">    ok.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">init</span><span class="params">(Mod)</span> -&gt;</span></span><br><span class="line">    register(Mod, self()),</span><br><span class="line">    State = Mod:init(),</span><br><span class="line">    loop(Mod, State).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">(Mod, State)</span> -&gt;</span></span><br><span class="line">    <span class="keyword">receive</span></span><br><span class="line">        &#123;call, From, Req&#125; -&gt;</span><br><span class="line">            &#123;Res, State2&#125; = Mod:handle_call(Req, State),</span><br><span class="line">            From ! &#123;Mod, Res&#125;,</span><br><span class="line">            loop(Mod, State2);</span><br><span class="line">        &#123;cast, Req&#125; -&gt;</span><br><span class="line">            State2 = Mod:handle_cast(Req, State),</span><br><span class="line">            loop(Mod, State2)</span><br><span class="line">    <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>回调模块</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(ch2)</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([start/<span class="number">0</span>])</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([alloc/<span class="number">0</span>, free/<span class="number">1</span>])</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([init/<span class="number">0</span>, handle_call/<span class="number">2</span>, handle_cast/<span class="number">2</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    server:start(ch2).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">alloc</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    server:call(ch2, alloc).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">free</span><span class="params">(Ch)</span> -&gt;</span></span><br><span class="line">    server:cast(ch2, &#123;free, Ch&#125;).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">init</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    channels().</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handle_call</span><span class="params">(alloc, Chs)</span> -&gt;</span></span><br><span class="line">    alloc(Chs). <span class="comment">% =&gt; &#123;Ch,Chs2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">handle_cast</span><span class="params">(&#123;free, Ch&#125;, Chs)</span> -&gt;</span></span><br><span class="line">    free(Ch, Chs). <span class="comment">% =&gt; Chs2</span></span><br></pre></td></tr></table></figure><p>标准的内置otp行为模块有以下四类：</p><ul><li>gen_server，用于建立client-server行为模型</li><li>gen_statem，用于有限状态机编程</li><li>gen_event，用于编写事件处理器</li><li>supervisor，用于构建具备容错能力的监督树</li></ul><p>除了标准化行为模块，otp还为回调模块中的函数实现提供了许多有用的编程库和工具，统称为应用（Applications），例如Mnesia（数据库）、eunit（测试库）等。</p><h1 id="behaviour"><a href="#behaviour" class="headerlink" title="behaviour"></a>behaviour</h1><h2 id="gen-server-behaviour"><a href="#gen-server-behaviour" class="headerlink" title="gen_server behaviour"></a>gen_server behaviour</h2><p>gen_server用于实现客户端/服务器模型，代码包括三部分：api，回调函数，实现函数（Internal functions）</p><p>回调模块的编写步骤：</p><ol><li><p>确定回调模块名。</p></li><li><p>编写接口函数。</p></li><li><p>在回调模块里编写六个必需的回调函数。</p><ul><li><p>init 服务器初始化</p></li><li><p>handle_call 处理同步请求</p></li><li><p>handle_cast 处理异步请求</p></li><li><p>handle_info 处理其他请求时必须实现</p></li><li><p>terminate 终止服务器</p></li><li><p>code_change 处理其他请求时必须实现</p></li></ul></li><li><p>回调函数更多是处理请求的发送和回复，具体的逻辑要编写一些私有函数（Internal functions）来实现。</p></li></ol><p>面积服务器例子如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%% API</span></span><br><span class="line"><span class="function"><span class="title">area</span><span class="params">(Thing)</span> -&gt;</span></span><br><span class="line">  gen_server:call(?MODULE, &#123;area, Thing&#125;).</span><br><span class="line"><span class="comment">%%% Spawning and gen_server implementation</span></span><br><span class="line"><span class="function"><span class="title">handle_call</span><span class="params">(&#123;area, Thing&#125;, _From, N)</span> -&gt;</span></span><br><span class="line">  &#123;reply, compute_area(Thing), N + <span class="number">1</span>&#125;.</span><br><span class="line"><span class="comment">%%% Internal functions</span></span><br><span class="line"><span class="function"><span class="title">compute_area</span><span class="params">(&#123;square, X&#125;)</span> -&gt;</span> X * X;</span><br><span class="line"><span class="function"><span class="title">compute_area</span><span class="params">(&#123;rectangle, X, Y&#125;)</span> -&gt;</span> X * Y.</span><br></pre></td></tr></table></figure><h3 id="启动gen-server"><a href="#启动gen-server" class="headerlink" title="启动gen_server"></a>启动gen_server</h3><ul><li><p><strong>start</strong><br>启动独立的gen_server，standalone ，不包括在监督树的一部分。</p><ul><li>start(Module :: module(),<pre><code>Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre></li><li>start(ServerName :: server_name(),<pre><code>Module :: module(),Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre></li></ul></li><li><p><strong>start_link</strong><br>启动一个在监控树中的gen_server，这个函数应该直接或间接<strong>被supervision调用</strong></p><ul><li><p>start_link(Module :: module(),</p><pre><code>Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre></li><li><p>start_link(ServerName :: server_name(),</p><pre><code>Module :: module(),Args :: term(),Options :: [start_opt()]) -&gt;   start_ret()</code></pre><ul><li><p>按Name 指定的别名把进程注册到本地。</p></li><li><p>Mod 是回调模块的名字，其中应当包含各种回调函数以及与server相关的代码</p></li><li><p>Args 是一个Erlang 数据项 ，会被传递给相应的callback 函数用于初始化server 状态。</p></li><li><p>Opts 是一个列表，其中包括与进程和调试相关的各种选项</p></li></ul></li></ul></li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p>Module:init(Args) -&gt; Result</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Args = term()</span><br><span class="line">Result = &#123;ok,State&#125;</span><br><span class="line">  | &#123;ok,State,Timeout&#125;</span><br><span class="line">  | &#123;ok,State,hibernate&#125;</span><br><span class="line">  | &#123;ok,State,&#123;continue,Continue&#125;&#125;</span><br><span class="line">  | &#123;stop,Reason&#125;</span><br><span class="line">  | ignore</span><br><span class="line"> State = term()</span><br><span class="line"> Timeout = timeout()</span><br><span class="line"> Reason = term()</span><br></pre></td></tr></table></figure></li></ul><h3 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h3><p>实现远程过程调用，将所有的数据包装成Request来发送</p><ul><li>call(ServerRef :: server_ref(), Request :: term()) -&gt;<pre><code>Reply :: term()</code></pre></li><li>call(ServerRef :: server_ref(), Request :: term(), Timeout :: timeout()) -&gt;<pre><code>Reply :: term()</code></pre></li><li>Module:handle_call(Request, From, State) -&gt; Result</li></ul><p>复杂程度更高的应用程序经常会让gen_server回复一个noreply返回值，并把真正的回复任务委派给另一个进程。要了解更多这方面的信息，请阅读“Design Principles”①（设计原则）文档，以及sys和proc_lib模块的手册页。</p><h3 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h3><p>实现了一个播发（cast），也就是没有返回值的调用（实<br>际上就是一个消息，但习惯上称它为播发来与远程过程调用相区分）。异步请求是<strong>不期待回应</strong>的，因此handle_cast没有From参数。</p><ul><li>cast(ServerRef :: server_ref(), Request :: term()) -&gt; ok</li><li>Module:handle_cast(Request, State) -&gt; Result<ul><li>返回<ul><li>{noreply, NewState} 改变服务器状态</li><li>{stop, …} 停止服务器</li></ul></li></ul></li></ul><h3 id="处理自发性消息"><a href="#处理自发性消息" class="headerlink" title="处理自发性消息"></a>处理自发性消息</h3><p>回调函数handle_info(Info, State)被用来处理发给服务器的自发性消息。自发性消息是一切未经显式调用gen_server:call或gen_server:cast而到达服务器的消息。</p><ul><li>Module:handle_info(Info, State) -&gt; Result</li></ul><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><ul><li>Module:code_change(OldVsn, State, Extra) -&gt; {ok, NewState} | {error, Reason}</li></ul><h3 id="停止gen-server"><a href="#停止gen-server" class="headerlink" title="停止gen_server"></a>停止gen_server</h3><p>若gen_server是监控树的一部分，不需要关闭，由监控者的关闭策略来关闭。</p><p>如果是独立的gen_server，使用terminate函数关闭</p><ul><li>Module:terminate(Reason, State)</li></ul><p>当我们从单个服务器转向系统时，就会用到很多服务器。我们希望能以一致的方式监视它们、重启退出的服务器以及记录错误。这就是下一章的主题</p><p>构建系统</p><ul><li>当服务器崩溃时，需要一种机制来检测这种情况并重启它，为此将用到监控树（supervisiontree）这个概念。创建一个<strong>监控</strong>器来管理服务器，如果服务器崩溃就重启它们。</li><li>如果服务器确实崩溃了，我们希望知道它崩溃的原因，这样就能在未来修复这个问题。<br>为了记录所有错误，可以使用OTP的错误记录器。我们会展示<strong>如何配置错误记录器</strong>，以及如何根据错误日志生成错误报告。</li><li>计算质数（特别是大质数）时，CPU可能会过热，这就需要开启一个强力风扇来避免这种情况。要做到这一点，需要考虑警报。我们会用OTP<strong>事件处理框架</strong>来生成和处理警报</li></ul><h2 id="gen-statem-behaviour"><a href="#gen-statem-behaviour" class="headerlink" title="gen_statem behaviour"></a>gen_statem behaviour</h2><ul><li>init/1 </li><li>format_status/2 </li><li>state_name/3 </li><li>handle_event/4 </li><li>terminate/3</li><li>code_change/4 </li><li>callback_mode/0</li></ul><h2 id="gen-fsm"><a href="#gen-fsm" class="headerlink" title="gen_fsm"></a>gen_fsm</h2><p>在OTP19已弃用</p><h2 id="gen-event-behaviour"><a href="#gen-event-behaviour" class="headerlink" title="gen_event behaviour"></a>gen_event behaviour</h2><p>事件就是已发生的事情：它是值得注意的，程序员认为有人应该对它做些什么。<br>如果在编程的时候发生了一件值得注意的事，就会发送一个event消息给某个注册进程（<strong>事件的形式就是一个消息</strong>），就像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RegProcName ! &#123;event, E&#125;</span><br></pre></td></tr></table></figure><p>发送消息后我们不知道（也不关心）它的命运。只是完成自己的任务，告诉其他人有什么事发生。</p><ul><li>初始的处理函数是什么都不做</li><li>发送事件就是发送消息</li><li>添加事件处理器可以把处理函数从什么都不做变成传入的函数</li></ul><p>事件管理器（<strong>event manager</strong>）是一个接收事件的命名对象，事件是error、alarm或其他需要被记录的日志信息。</p><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><ol><li><p>启动事件管理器</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span><span class="params">(start_link() -&gt; &#123;ok, pid()&#125; | &#123;error, &#123;already_started, pid()&#125;&#125;)</span>.</span><br><span class="line"><span class="function"><span class="title">start_link</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  gen_event:start_link(&#123;local, error_man&#125;).</span><br></pre></td></tr></table></figure></li><li><p>添加事件管理器</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span><span class="params">(add_handler() -&gt; ok | &#123;&#x27;EXIT&#x27;, Reason :: term()&#125; | term())</span>.</span><br><span class="line"><span class="function"><span class="title">add_handler</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  gen_event:add_handler(error_man, terminal_logger, []).</span><br></pre></td></tr></table></figure></li><li><p>删除事件管理器</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gen_event:delete_handler(error_man, terminal_logger, []).</span><br></pre></td></tr></table></figure></li><li><p>替换事件管理器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swap_handler(EventMgrRef, &#123;Handler1,Args1&#125;, &#123;Handler2,Args2&#125;) -&gt; Result</span><br></pre></td></tr></table></figure></li><li><p>发送事件</p><ul><li>直接调用函数（过时）</li><li>显示调用</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gen_event:notify(error_man, no_reply).</span><br></pre></td></tr></table></figure></li><li><p>停止事件管理器</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gen_event:stop(error_man).</span><br></pre></td></tr></table></figure></li><li><p>处理事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module:handle_event(Event, State) -&gt; Result</span><br></pre></td></tr></table></figure><ul><li>Event是一个{EventType,Event-Arg}形式的<strong>二元组</strong>，其中EventType是<strong>set_event</strong>或<strong>clear_event</strong>（event是自定义的事件名），而EventArg是一个用户提供的参数。</li><li>返回 {ok, NewState}。</li></ul></li></ol><p>实质上，事件表示系统状态的改变，事件管理器就是维护<code>&#123;Module, State&#125;</code>二元组列表。</p><p>注：Module is an event handler, and State is the internal state of that event handler.</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><ul><li>init/1 添加新事件管理器时调用</li><li>handle_event/2 接收到事件时调用</li><li>handle_call/2 接收到请求时调用</li><li>handle_info/2 接收到非事件和同步请求时调用</li><li>terminate/2 删除事件管理器时调用 </li><li>code_change/3 热更新时调用</li></ul><p>swap_handler(EventMgrRef, {Handler1,Args1}, {Handler2,Args2}) -&gt; Result</p><h3 id="错误记录器"><a href="#错误记录器" class="headerlink" title="错误记录器"></a>错误记录器</h3><p><a href="https://www.erlang.org/doc/man/error_logger.html">Erlang – error_logger</a></p><ul><li><p>记录错误：在代码里中做的函数调用</p><ul><li>error_logger:error_msg(String)</li><li>error_logger:error_msg(Format, Data)</li><li>error_logger:error_report(Report)</li></ul></li><li><p>配置：错误记录器在何处以及如何保存数据；</p><ul><li><p>显示在erlang shell （默认）</p></li><li><p>文本文件</p></li><li><p>滚动日志：新消息进来后会被附加到日志的末尾，如果日志满了，最早的条目就会被删除。</p><p>极其有用。你决定日志应当占据多少个文件，以及每个日志文件能有多大，然后系统负责在一个大型循环缓冲区里删除旧日志文件和创建新文件。可以调整日志的大小来保存最近几天的操作记录</p></li></ul></li><li><p>分析日志：使用rb模块</p></li></ul><h3 id="警报记录器"><a href="#警报记录器" class="headerlink" title="警报记录器"></a>警报记录器</h3><p><a href="https://www.erlang.org/doc/man/alarm_handler.html">Erlang – alarm_handler</a></p><h2 id="supervisor-behaviour"><a href="#supervisor-behaviour" class="headerlink" title="supervisor behaviour"></a>supervisor behaviour</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(ch_sup)</span>.</span><br><span class="line"><span class="keyword">-behaviour</span><span class="params">(supervisor)</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">-export</span><span class="params">([start_link/<span class="number">0</span>])</span>.</span><br><span class="line"><span class="keyword">-export</span><span class="params">([init/<span class="number">1</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_link</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    supervisor:start_link(ch_sup, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">init</span><span class="params">(_Args)</span> -&gt;</span></span><br><span class="line">    SupFlags = #&#123;strategy =&gt; one_for_one, intensity =&gt; <span class="number">1</span>, period =&gt; <span class="number">5</span>&#125;,</span><br><span class="line">    ChildSpecs = [#&#123;id =&gt; ch3,</span><br><span class="line">                    start =&gt; &#123;ch3, start_link, []&#125;,</span><br><span class="line">                    restart =&gt; permanent,</span><br><span class="line">                    shutdown =&gt; brutal_kill,</span><br><span class="line">                    type =&gt; worker,</span><br><span class="line">                    modules =&gt; [ch3]&#125;],</span><br><span class="line">    &#123;ok, &#123;SupFlags, ChildSpecs&#125;&#125;.</span><br></pre></td></tr></table></figure><p>必须实现init回调函数，会在启动时被调用</p><ul><li>返回值：<code>&#123;ok, &#123;SupFlags, ChildSpecs&#125;&#125;</code></li><li>SupFlags表示监督者配置</li><li>ChildSpecs是子进程标识符列表</li></ul><h3 id="SupFlags"><a href="#SupFlags" class="headerlink" title="SupFlags"></a>SupFlags</h3><ul><li>strategy 重启策略<ul><li>one_for_all 若一个子进程终止，终止所有子进程并重启所有子进程</li><li>one_for_one <strong>默认</strong>策略，若一个子进程终止，只有该进程会重启</li><li>rest_for_one 若一个子进程终止，终止该进程以后启动的所有子进程（ChildSpecs中指定的顺序）并重启所有终止的子进程</li><li>simple_one_for_one 简化的one_for_one 策略，监督者不启动子进程，而是在运行中使用<code>supervisor:start_child(Sup, List)</code>函数添加</li></ul></li><li>intensity（默认1）和period（默认5） 重启强度<br>监督者在period内重启了intensity次子进程，监督者和子进程都会被终止</li><li>auto_shutdown 当重要的子进程（significant children）关闭时关闭自身<ul><li>never 默认</li><li>any_significant</li><li>all_significant</li></ul></li></ul><h3 id="ChildSpecs"><a href="#ChildSpecs" class="headerlink" title="ChildSpecs"></a>ChildSpecs</h3><ul><li>id 必须配置，用于监督者<strong>内部</strong>标识子进程</li><li>start 必须配置，子进程的启动方法，例：<code>start =&gt; &#123;&#39;AModule&#39;, start_link, []&#125;</code></li><li>restart 何时重启<ul><li>permanent 总是重启（包括正常关闭）</li><li>transient 非正常终止时重启</li><li>temporary 永不重启</li></ul></li><li>significant 布尔类型，标识重要进程</li><li>shutdown <ul><li>brutal_kill 无条件使用<code>exit(Child, kill)</code>终止</li><li>timeout 通知子进程让其自己关闭，等待接收退出信号，超时没收到信号无条件使用<code>exit(Child, kill)</code>终止</li><li>若子进程是另一个监督者，必须设置为<strong>infinity</strong>来提供足够的关闭时间</li></ul></li><li>type <ul><li>worker</li><li>supervisor</li></ul></li><li>modules</li></ul><p>多个子进程的配置</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">init</span><span class="params">([])</span> -&gt;</span></span><br><span class="line">  gen_event:swap_handler(alarm_handler, &#123;alarm_handler, swap&#125;, &#123;my_alarm_handler, xyz&#125;),</span><br><span class="line">  &#123;ok, &#123;&#123;one_for_one, <span class="number">3</span>, <span class="number">10</span>&#125;, <span class="comment">% RestartStrategy MaxRestarts Time</span></span><br><span class="line">    [</span><br><span class="line">      &#123;tag1, <span class="comment">%% worker1</span></span><br><span class="line">        &#123;area_server, start_link, []&#125;,</span><br><span class="line">        permanent,</span><br><span class="line">        <span class="number">10000</span>,</span><br><span class="line">        worker,</span><br><span class="line">        [area_server]&#125;,</span><br><span class="line">      &#123;tag2, <span class="comment">%% worker2</span></span><br><span class="line">        &#123;prime_server, start_link, []&#125;,</span><br><span class="line">        permanent,</span><br><span class="line">        <span class="number">10000</span>,</span><br><span class="line">        worker,</span><br><span class="line">        [prime_server]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;&#125;.</span><br></pre></td></tr></table></figure><p>worker启动格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;Tag, &#123;Mod, Func, ArgList&#125;,</span><br><span class="line">  Restart,</span><br><span class="line">  Shutdown,</span><br><span class="line">  Type,</span><br><span class="line">  [Mod1]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深入控制behaviour"><a href="#深入控制behaviour" class="headerlink" title="深入控制behaviour"></a>深入控制behaviour</h2><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>application把监督树、模块和其他资源（C语言代码等）打包成一个半独立的单位，为大型erlang系统提供构件</p><h3 id="application目录结构"><a href="#application目录结构" class="headerlink" title="application目录结构"></a>application目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">─ $&#123;application&#125;</span><br><span class="line">  ├── doc</span><br><span class="line">  │   ├── internal</span><br><span class="line">  │   ├── examples</span><br><span class="line">  │   └── src</span><br><span class="line">  ├── include</span><br><span class="line">  ├── priv</span><br><span class="line">  ├── src</span><br><span class="line">  │   └── $&#123;application&#125;.app.src</span><br><span class="line">  └── test</span><br></pre></td></tr></table></figure><ul><li>ebin 包括beam文件和application配置文件（.app文件）</li><li>src  源文件和不希望其他application使用的头文件</li><li>priv application所需的非erlang文件，包括图像、脚本等</li><li>include 导出的可由其他application使用的头文件</li><li>doc - Recommended. Any source documentation should be placed in sub-directories here.</li><li>doc/internal - Recommended. Any documentation that describes implementation details about this application, not intended for publication, should be placed here.</li><li>doc/examples - Recommended. Source code for examples on how to use this application should be placed here. It is encouraged that examples are sourced to the public documentation from this directory.</li><li>doc/src - Recommended. All source files for documentation, such as Markdown, AsciiDoc or XML-files, should be placed here.</li><li>test - Recommended. All files regarding tests, such as test suites and test specifications, should be placed here.</li></ul><h3 id="回调函数-1"><a href="#回调函数-1" class="headerlink" title="回调函数"></a>回调函数</h3><p>一般情况下，只需要start和stop回调函数，除非需要实现分布式下的接管和故障转移或复制的启动策略。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(&#x27;my_application&#x27;)</span>.</span><br><span class="line"><span class="keyword">-behaviour</span><span class="params">(application)</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">-export</span><span class="params">([start/<span class="number">2</span>, stop/<span class="number">1</span>])</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span><span class="params">(_StartType, _StartArgs)</span> -&gt;</span></span><br><span class="line">  &#x27;MyApp&#x27;_sup:start_link().</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span><span class="params">(_State)</span> -&gt;</span></span><br><span class="line">  ok.</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Erlang的.app文件和.config文件是Erlang应用程序的配置文件。</p><ul><li>.app文件是一个应用程序描述文件，它描述了应用程序的名称、版本、模块、依赖项等信息。</li><li>.config文件是一个配置文件，它包含应用程序的配置信息，例如端口号、日志级别等。12</li></ul><p><strong>注意</strong>：目录必须用<code>/</code>，不能用<code>\</code></p><p>application需要使用后缀名为<code>.app</code>的配置文件来启动，详细配置见<a href="https://www.erlang.org/doc/man/app.html">Erlang – app</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;application, ch_app,</span><br><span class="line"> [&#123;description, &quot;Channel allocator&quot;&#125;,</span><br><span class="line">  &#123;vsn, &quot;1&quot;&#125;,</span><br><span class="line">  &#123;modules, [ch_app, ch_sup, ch3]&#125;,</span><br><span class="line">  &#123;registered, [ch3]&#125;,</span><br><span class="line">  &#123;applications, [kernel, stdlib, sasl]&#125;,</span><br><span class="line">  &#123;mod, &#123;ch_app,[]&#125;&#125;,</span><br><span class="line">  &#123;env, [&#123;file, &quot;/usr/local/log&quot;&#125;]&#125;</span><br><span class="line"> ]&#125;.</span><br></pre></td></tr></table></figure><p>使用systools必须配置以下选项</p><ul><li>description 自由设定，调用<code>application:which_applications()</code>获取</li><li>vsn 表示application 版本的字符串。它应该反映目录的名称，并且应该由自动<br>构建系统中的脚本设置， 而不是手动设置。如果省赂，默认值为空字柯：串。</li><li>modules 用于指明创建发行版和加载application时使用的模块列表，在此导出的模块与ebin目录中包含的beam 文件一一对应</li><li>registered 包含了此application 中运行的全部注册进程名称</li><li>applications 依赖的其他application的列表</li></ul><p>其他选项</p><ul><li>mod 指明了application 的回调模块以及传递给启动函数的参数</li><li>env 用于为application 设置环境变量，环境变量的值可以使用<code>application:get_ env(Key)</code>或<code>application:get_all_env()</code> 函数获取</li></ul><h3 id="加载和卸载"><a href="#加载和卸载" class="headerlink" title="加载和卸载"></a>加载和卸载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application:load(ch_app).</span><br><span class="line">application:unload(ch_app).</span><br><span class="line">application:unload(ch_app).</span><br></pre></td></tr></table></figure><h3 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application:start(ch_app).</span><br><span class="line">application:start(ch_app).</span><br><span class="line">application:start(ch_app).</span><br></pre></td></tr></table></figure><h2 id="内含型application"><a href="#内含型application" class="headerlink" title="内含型application"></a>内含型application</h2><p>一个application可以包含另一个application，被包含的application称为<strong>内含型application（included application）</strong>，不被其他application包含的application称为**主application（primary application)**。</p><p>内含型application有自己的目录和.app文件，但监督树作为主application的监督树的一部分启动，因此可以实现同步启动。</p><h2 id="分布式application"><a href="#分布式application" class="headerlink" title="分布式application"></a>分布式application</h2><h2 id="自定义behaviour"><a href="#自定义behaviour" class="headerlink" title="自定义behaviour"></a>自定义behaviour</h2><p>除了四个标准的典型的行为，还可以自定义行为。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-behaviour</span><span class="params">(cowboy_middleware)</span>.</span><br></pre></td></tr></table></figure><h1 id="常用Applications"><a href="#常用Applications" class="headerlink" title="常用Applications"></a>常用Applications</h1><h2 id="mnesia"><a href="#mnesia" class="headerlink" title="mnesia"></a>mnesia</h2><h2 id="obdc"><a href="#obdc" class="headerlink" title="obdc"></a>obdc</h2><h2 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h2><h2 id="eunit"><a href="#eunit" class="headerlink" title="eunit"></a>eunit</h2><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>将多个application组合成完整的系统，称为发布（release）</p><p>发布资源文件</p><p>详细配置见<a href="https://www.erlang.org/doc/man/rel.html">Erlang – rel</a></p><p><code>release.rel</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;release, &#123;Name,Vsn&#125;, &#123;erts, EVsn&#125;,</span><br><span class="line"> [&#123;Application1, AppVsn1&#125;,</span><br><span class="line">   ...</span><br><span class="line">  &#123;ApplicationN, AppVsnN&#125;]&#125;.</span><br></pre></td></tr></table></figure><p>创建启动脚本<code>ch_rel-1.boot</code></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systools:make_script(<span class="string">&quot;ch_rel-1&quot;</span>, [local]).</span><br></pre></td></tr></table></figure><p>使用启动脚本启动</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -boot ch_rel-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>创建发布包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systools:make_script(&quot;ch_rel-1&quot;).</span><br><span class="line">systools:make_tar(&quot;ch_rel-1&quot;).</span><br></pre></td></tr></table></figure><h2 id="发布管理"><a href="#发布管理" class="headerlink" title="发布管理"></a>发布管理</h2><p>系统升降级的能力</p><h1 id="sasl"><a href="#sasl" class="headerlink" title="sasl"></a>sasl</h1><p>sasl是erlang内置的系统功能库，提供以下功能：</p><ul><li>错误日志</li><li>警报处理</li><li>发布处理</li><li>报告浏览</li></ul><p><a href="https://www.erlang.org/doc/apps/sasl/sasl_intro.html">Erlang – Introduction</a></p><h1 id="虚拟机启动参数"><a href="#虚拟机启动参数" class="headerlink" title="虚拟机启动参数"></a>虚拟机启动参数</h1><p><a href="https://www.erlang.org/doc/man/erl.html">Erlang – erl</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> erlang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>erlang基础</title>
      <link href="/2023/04/11/erlang%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/11/erlang%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://www.erlang.org/doc/reference_manual/users_guide.html">Erlang – Erlang Reference Manual</a></p><p><a href="https://www.erlang.org/doc/man_index.html">Erlang/OTP Manual Page Index</a></p><p>zinx项目</p><h1 id="erlang基础"><a href="#erlang基础" class="headerlink" title="erlang基础"></a>erlang基础</h1><h2 id="erlang简介"><a href="#erlang简介" class="headerlink" title="erlang简介"></a>erlang简介</h2><p>函数式编程语言，语义上分布式，天生支持并发，运行于虚拟机，创建进程微秒级，采用消息传递。</p><p>支持热更新</p><p>低成本实现并发</p><p>otp：开放类型平台</p><p>参考</p><ul><li><a href="https://www.erlang.org/doc/man/erlang.html">BIF</a></li><li>数据结构</li><li><a href="https://www.erlang.org/doc/man/sets.html">Erlang – sets</a></li><li><a href="https://www.erlang.org/doc/man/dict.html">Erlang – dict</a></li><li><a href="https://www.erlang.org/doc/man/gb_trees.html">Erlang – gb_trees</a></li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>建议切换到root用户安装，因为使用erlc编译时是用root的环境</p><h2 id="数据类型简介"><a href="#数据类型简介" class="headerlink" title="数据类型简介"></a>数据类型简介</h2><p>erlang没有用户定义类型，只能通过将erlang term组合成复合类型。</p><h3 id="term"><a href="#term" class="headerlink" title="term"></a>term</h3><ul><li><p>Constant</p><ul><li><p>Numbers</p><ul><li><p>整数，没有上限。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%  $&#123;Char&#125; 创建ASCII对应的整数</span></span><br><span class="line">$A <span class="comment">% 62</span></span><br><span class="line"><span class="comment">%% &lt;Base&gt;#&lt;Value&gt; 创建Base进制整数</span></span><br><span class="line"><span class="number">16#ffff</span> <span class="comment">%65535</span></span><br></pre></td></tr></table></figure></li><li><p>浮点数</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12.345</span> </span><br><span class="line">-27.<span class="number">45e-05</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>原子（Atoms），表示常量值，相当于C或Java里的枚举类型，或者Scheme或Ruby里的符号。</p><p>小写字母开头定义原子，或者用单引号定义大写字母开头的原子，而双引号用于定义字符串.</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">atom</span><br><span class="line">&#x27;ATOM&#x27;</span><br></pre></td></tr></table></figure></li><li><p>Fun</p></li><li><p>Port Identifier</p></li><li><p>Pids，存储进程标识</p></li><li><p>reference，存储系统储唯一引用</p></li><li><p>位串（ Bit Strings），用于存储未类型化内存区域，不足8位的位串称为二进制型（binaries）</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;<span class="number">10</span>,<span class="number">20</span>&gt;&gt;.</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Compound</p><ul><li>turples</li><li>Lists<ul><li>string</li></ul></li><li>Map</li></ul></li></ul><h2 id="模式识别"><a href="#模式识别" class="headerlink" title="模式识别"></a>模式识别</h2><p>三种情况会发生模式识别</p><ul><li>表达式 <code>Lhs = Rhs</code></li><li>调用函数</li><li>case和receive限定符</li></ul><h3 id="Pattern-Expression"><a href="#Pattern-Expression" class="headerlink" title="Pattern = Expression"></a>Pattern = Expression</h3><h3 id="calling-a-function"><a href="#calling-a-function" class="headerlink" title="calling a function"></a>calling a function</h3><p>erlang的变量是一次性赋值变量，相当于C++中的const变量</p><p>=号是模式匹配操作符</p><p><code>Lhs = Rhs</code>表示计算右侧之和左侧的模式匹配，只有成功才返回这个值</p><p>使用<code>f().</code>命令使shell解除所有绑定</p><p>可以修改的内存区域有个专业术语叫作可变状态（mutable state）。Erlang是一种函数式编程语言，具有不可变状态。</p><p>如果使用C或Java这些传统编程语言来为多核CPU编程，就不得不对付共享内存的问题。为了不破坏共享内存，访问时必须给这些内存加锁。访问共享内存的程序在操作共享内存时万万不可崩溃。Erlang里没有可变状态，没有共享内存，也没有锁。这让程序并行变得简单了。</p><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><h3 id="二进制型与位语法"><a href="#二进制型与位语法" class="headerlink" title="二进制型与位语法"></a>二进制型与位语法</h3><p>位串（bitstring），位数不是8的整数倍的二进制型</p><p>简化网络编程</p><ol><li><p>创建和打印<br>双小于号与双大于号之间的一列<strong>整数</strong>或<strong>字符串</strong><br>类似于字符串，如果可打印成字符串就打印成字符串</p> <figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>&gt;&gt;.</span><br></pre></td></tr></table></figure></li><li><p>操作二进制型，可以使用以下两种方式：</p><ul><li><p>内置函数</p><p>* </p></li><li><p>位语法</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%X占3位 Y占7位 Z占6位 共16位</span></span><br><span class="line">M = &lt;&lt;X:<span class="number">3</span>, Y:<span class="number">7</span>, Z:<span class="number">6</span>&gt;&gt;.</span><br><span class="line"></span><br><span class="line">Red=<span class="number">2</span>.</span><br><span class="line">Green=<span class="number">61</span>.</span><br><span class="line">Blue=<span class="number">20</span>.</span><br><span class="line">Mem=&lt;&lt;Red:<span class="number">5</span>,Green:<span class="number">6</span>,Blue:<span class="number">5</span>&gt;&gt;.</span><br><span class="line">&lt;&lt;R1:<span class="number">5</span>,G2:<span class="number">6</span>,B3:<span class="number">5</span>&gt;&gt;=Mem.</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>把一些<strong>数量固定</strong>（在初始化时确定数量）的项目归组成单一的实体</p><p>相当于struct，区别在于元组是匿名的</p><p>用元组管理的项数不宜超过五六项，项数超过这一级别维护起来就会很头疼</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;area,<span class="number">100</span>,<span class="number">200</span>,<span class="string">&quot;你好&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>提取元组的值，使用模式匹配</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Point = &#123;point, <span class="number">10</span>, <span class="number">45</span>&#125;.</span><br><span class="line"></span><br><span class="line">&#123;point, X, Y&#125; = Point</span><br><span class="line">&#123;point, X, _&#125; = Point <span class="comment">% 下划线表示匿名变量</span></span><br></pre></td></tr></table></figure><h4 id="常用BIF"><a href="#常用BIF" class="headerlink" title="常用BIF"></a>常用BIF</h4><ul><li>element(N, Tuple) -&gt; term()</li><li>size(Item) -&gt; integer() &gt;= 0</li><li>erlang:insert_element(Index, Tuple1, Term) -&gt; Tuple2</li><li>setelement(Index, Tuple1, Value) -&gt; Tuple2</li></ul><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MY_Dict = dict:new(),</span><br><span class="line">MY_Dict1 = dict:append(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>, MY_Dict),</span><br><span class="line">dict:fetch_keys(MY_Dict1).</span><br></pre></td></tr></table></figure><h4 id="非平衡二叉树"><a href="#非平衡二叉树" class="headerlink" title="非平衡二叉树"></a>非平衡二叉树</h4><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表（list）被用来存放<strong>任意数量</strong>的事物</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">100</span>,area,<span class="string">&quot;你好&quot;</span>]</span><br></pre></td></tr></table></figure><p>列表的第一个元素被称为列表头（head）。假设把列表头去掉，剩下的就被称为列表尾（tail）。</p><p>访问列表头是一种非常高效的操作，因此基本上所有的列表处理函数都从提取列表头开始，<br>然后对它做一些操作，接着处理列表尾。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ThingsToBuy = [&#123;apples, <span class="number">10</span>&#125;,&#123;pears,<span class="number">6</span>&#125;,&#123;milk,<span class="number">3</span>&#125;].</span><br><span class="line">ThingsToBuy1 = [&#123;oranges,<span class="number">4</span>&#125;,&#123;newspaper,<span class="number">1</span>&#125;|ThingsToBuy]</span><br></pre></td></tr></table></figure><h4 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h4><p>能够生成元素并对生成的元素做测试的表达式。</p><p>[Expression 11 Generat o 「s , Tests , Generators , Test s]</p><ul><li>语法：<code>[X || Qualifier1, Qualifier2, ... ]</code><br>Qualifier1可以是生成器、位串生成器或过滤器<ul><li>生成器（generator），<code>Pattern &lt;- ListExpr</code></li><li>位串（bitstring）生成器，<code>BitStringPattern &lt;= BitStringExpr</code></li><li>过滤器（filter），判断函数（返回true或false）或布尔表达式<br>只有true的值会被加入列表</li></ul></li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].</span><br><span class="line">[<span class="number">2</span>*X || X &lt;- L]. <span class="comment">% 从L中提取X，X加倍</span></span><br><span class="line"></span><br><span class="line">[ &#123;X,Y&#125; I I x ＜－口， <span class="number">2</span>], y &lt;- [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] ].</span><br></pre></td></tr></table></figure><ul><li>lists:seq(1, N)返回一个包含从1到N所有整数的列表</li></ul><h4 id="常用BIF-1"><a href="#常用BIF-1" class="headerlink" title="常用BIF"></a>常用BIF</h4><ul><li>hd(List) -&gt; term()<br>Returns the head of List, that is, the first element<br>Example: hd([a,b,c,d]) =) a.</li><li>tl(List) -&gt; term()<br>Returns the tail of List, that is, the list minus the first element<br>Example: tl([a,b,c,d]) =) [b,c,d].</li><li>length(List) -&gt; integer() &gt;= 0<br>Returns the length of the list L<br>Example: length([a,b,c,d]) =) 4.</li></ul><h4 id="lists模块提供的常用处理函数"><a href="#lists模块提供的常用处理函数" class="headerlink" title="lists模块提供的常用处理函数"></a>lists模块提供的常用处理函数</h4><ul><li>member(Elem, List) -&gt; boolean()</li><li>append(ListOfLists) -&gt; List1</li><li>append(List1, List2) -&gt; List3</li><li>reverse(List1) -&gt; List2</li><li>reverse(List1, Tail) -&gt; List2<br>反转List1并将Tail插入到列表尾</li><li>delete(Elem, List1) -&gt; List2</li><li>filter(Pred, List1) -&gt; List2<br>List2是Pred函数返回True的结果</li><li>map(Fun, List1) -&gt; List2</li><li>foreach(Fun, List) -&gt; ok</li><li>sort(List1) -&gt; List2</li><li>sort(Fun, List1) -&gt; List2<br>使用自定义排序函数Fun来排序<br>对fun(A,B)，当A&lt;=B返回true，否则返回false</li><li>nth(N, List) -&gt; Elem</li><li>nthtail(N, List) -&gt; Tail</li><li>sublist(List1, Len) -&gt; List2</li><li>sublist(List1, Start, Len) -&gt; List2</li><li>search(Pred, List) -&gt; {value, Value} | false</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>严格来说，Erlang里没有字符串。要在Erlang里表示字符串，可以选择一个由整数组成的<strong>列表</strong>或者一个二进制型</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">127</span>,<span class="number">128</span>]</span><br><span class="line"><span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">&#x27;hello world&#x27;  <span class="comment">%原子，描述、常量、元组介绍</span></span><br></pre></td></tr></table></figure><p>大写字母开头是变量（左值），其他或单引号包含是原子（右值）</p><p>变量只能赋值一次，要修改只能解绑<code>f(X)</code></p><p>当shell打印某个列表的值时，如果列表内的所有整数都代表可打印字符，它就会将其打印成<br>字符串字面量。否则，打印成列表记法</p><h4 id="集合sets"><a href="#集合sets" class="headerlink" title="集合sets"></a>集合sets</h4><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>记录</p><p><code>rr(“records.txt”).</code></p><p>记录，进阶版的元组，提供键值对的存储和使用方式，可阅读性更好，但实质上只是一种语法糖（不是真正的数据类型），在其糖衣之下，它们都是靠元组来实现的。</p><p>编译确定，速度快，不能动态改变</p><ul><li>当你可以用一些预先确定且数量固定的原子来表示数据时；</li><li>当记录里的元素数量和元素名称不会随时间而改变时；</li><li>当存储空间是个问题时，典型的案例是你有一大堆元组，并且每个元组都有相同的结构。</li><li>第一个参数指定了记录的名字。第二个参数，是一个<br>由<strong>原子构成的元组</strong>，定义了记录中有哪些字段。</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-record</span><span class="params">(Name, &#123;</span></span><br><span class="line"><span class="params">               <span class="comment">%key1和key2，带默认值</span></span></span><br><span class="line"><span class="params">               key1=Default1,</span></span><br><span class="line"><span class="params">               key2=Default2,</span></span><br><span class="line"><span class="params">               ...</span></span><br><span class="line"><span class="params">   key3, <span class="comment">%value=undefined</span></span></span><br><span class="line"><span class="params">              &#125;)</span>.</span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="keyword">-record</span><span class="params">(todo, &#123;status=reminder,who=joe,text&#125;)</span>.</span><br></pre></td></tr></table></figure><ol><li><p>创建和更新记录</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X1 = #todo&#123;status=urgent, text=<span class="string">&quot;Fix rrata in book&quot;</span>&#125;.</span><br><span class="line">X2 = X1#todo&#123;status=done&#125;.</span><br></pre></td></tr></table></figure></li><li><p>提取记录字段</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#todo&#123;who=W, text=Txt&#125; = X2. </span><br><span class="line">W.</span><br><span class="line">Txt.</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">X2#todo.text.</span><br></pre></td></tr></table></figure></li><li><p>函数</p></li></ol><figure class="highlight erl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">clear_Status</span><span class="params">(#todo&#123;status=S, who=W&#125;=R)</span>-&gt;</span> <span class="comment">% 匹配记录字段</span></span><br><span class="line">R#todo&#123;status=finished&#125; <span class="comment">% 创建新字段</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数中使用</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="映射组"><a href="#映射组" class="headerlink" title="映射组"></a>映射组</h3><p>也是键值对结构，但key可以不是原子，用于当<strong>键不能预先知道</strong>时用来表示键-值数据结构；</p><ul><li>当存在大量不同的键时用来表示数据；</li><li>当方便使用很重要而效率无关紧要时作为万能的数据结构使用；</li><li>用作“自解释型”的数据结构，也就是说，用户容易从键名猜出值的含义；</li><li>用来表示键-值解析树，例如XML或配置文件；</li><li>用JSON来和其他编程语言通信。</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;Key1 op Vall, Key2 Op Val2, .., KeyN Op ValN&#125;</span><br></pre></td></tr></table></figure><p>Op</p><ul><li><code>=&gt;</code>，更新现有键或创建新键</li><li><code>:=</code>，更新现有键</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">F1 = #&#123;a=&gt;<span class="number">1</span>,b=&gt;<span class="number">2</span>&#125;.</span><br><span class="line">F2 = #&#123;b=&gt;<span class="number">2</span>,a=&gt;<span class="number">1</span>&#125;.</span><br><span class="line"><span class="comment">%F1=F2.</span></span><br><span class="line">F3 = F1#&#123;c=&gt;xx&#125;</span><br><span class="line">F4 = F3#&#123;c:=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">Facts=#&#123;&#123;wife,fred&#125;=&gt;<span class="string">&quot;Sue&quot;</span>, &#123;age, fred&#125;=&gt;<span class="number">45</span>, &#123;daughter, fred&#125;=&gt;</span><br><span class="line"><span class="string">&quot;Mary&quot;</span>,&#123;likes,jim&#125;=&gt;[...]&#125;.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><p>Operator Description Type Operands Prio</p><ul><li>X + X unary mixed 1</li></ul><ul><li>X - X unary mixed 1<br>X * Y X * Y binary mixed 2<br>X / Y X / Y (floating point division) binary mixed 2<br>X div Y integer division of X and Y binary integer 2<br>X rem Y integer remainder of X divided by Y binary integer 2<br>X band Y bitwise and of X and Y binary integer 2<br>X + Y X + Y binary mixed 3<br>X - Y X - Y binary mixed 3<br>X bor Y bitwise or of X and Y binary integer 3<br>X bxor Y arithmetic bitwise xor X and Y binary integer 3<br>X bsl N arithmetic bitshift left of X by N bits binary integer 3<br>X bsr N bitshift right of X by N bits binary integer 3</li></ul><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><table><thead><tr><th>操 作 符</th><th>结 合 性</th></tr></thead><tbody><tr><td>:</td><td></td></tr><tr><td>#</td><td></td></tr><tr><td>（一元）+、（一元）、bnot、not</td><td></td></tr><tr><td>/、*、div、rem、band、and</td><td>左结合</td></tr><tr><td>+、-、bor、bxor、bsl、bsr、or、xor</td><td>左结合</td></tr><tr><td>++、–</td><td>右结合</td></tr><tr><td>==、/=、=&lt;、&lt;、&gt;=、&gt;、=:=、=/=</td><td></td></tr><tr><td>andalso</td><td></td></tr><tr><td>orelse</td><td></td></tr><tr><td>= !</td><td>右结合</td></tr><tr><td>catch</td><td></td></tr></tbody></table><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><h2 id="类型的表示"><a href="#类型的表示" class="headerlink" title="类型的表示"></a>类型的表示</h2><p>语法：<code>T1::A|B|C </code><br>T1被定义为A、B或C其中之一</p><p>这里的A，B，C可以用erlang的内置类型来表示，具体的内置类型可以在<a href="https://www.erlang.org/doc/man/erlang.html">Erlang – erlang</a>查找。</p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><p>使用opaque指令可以创建不透明类型</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-type Union :: Type1 | Type2.</span><br><span class="line">-type Atom :: atom<span class="params">()</span> | Erlang_Atom.</span><br><span class="line">-type Fun :: fun<span class="params">()</span> | fun<span class="params">((...)</span>-&gt;Type).</span><br><span class="line">-opaque rich_text<span class="params">()</span>::[&#123;font<span class="params">()</span>, char<span class="params">()</span>&#125;].</span><br></pre></td></tr></table></figure><h3 id="类型规范"><a href="#类型规范" class="headerlink" title="类型规范"></a>类型规范</h3><p>函数规范可以规定某个函数的参数类型和返回值类型，when用于引入额外的类型变量。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-spec</span> file:open<span class="params">(FileName, Modes)</span>-&gt;</span><br><span class="line">               &#123;ok, Handle&#125; | &#123;error, Why&#125; when</span><br><span class="line">                                               FileName::string<span class="params">()</span>,</span><br><span class="line">                                               Modes::[Mode],</span><br><span class="line">                                               Mode::read|write,</span><br><span class="line">                                               Handle::file_handle<span class="params">()</span>,</span><br><span class="line">                                               Why::error_term<span class="params">()</span>.</span><br></pre></td></tr></table></figure><h3 id="导出类型和本地类型"><a href="#导出类型和本地类型" class="headerlink" title="导出类型和本地类型"></a>导出类型和本地类型</h3><p>a.erl</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(a)</span>.</span><br><span class="line">-type rich_text<span class="params">()</span>::[&#123;font<span class="params">()</span>, char<span class="params">()</span>&#125;].</span><br><span class="line">-type font::integer<span class="params">()</span>.</span><br><span class="line">-export_type<span class="params">([rich_text/<span class="number">0</span>, font/<span class="number">0</span>])</span></span><br></pre></td></tr></table></figure><p>b.erl</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">-module</span><span class="params">(b)</span>.</span><br><span class="line"><span class="keyword">-spec</span> rich_text_length<span class="params">(a:rich_text())</span>-&gt;integer<span class="params">()</span>.</span><br></pre></td></tr></table></figure><h2 id="dialyzer"><a href="#dialyzer" class="headerlink" title="dialyzer"></a>dialyzer</h2><p>​    <a href="https://www.erlang.org/doc/apps/dialyzer/index.html">Erlang – Dialyzer Reference Manual</a></p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="case和if表达式"><a href="#case和if表达式" class="headerlink" title="case和if表达式"></a>case和if表达式</h3><p>执行Expression，模式匹配，执行Expr_seq1</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> Expression <span class="keyword">of</span></span><br><span class="line">    pattern1 [<span class="keyword">when</span> Guard] -&gt; Expr_seq1;</span><br><span class="line">pattern2 [<span class="keyword">when</span> Guard] -&gt; Expr_seq2;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span></span><br><span class="line">Guard1-&gt;</span><br><span class="line">        Expr_seq1</span><br><span class="line">    Guard2-&gt;</span><br><span class="line">        Expr_seq2</span><br><span class="line">    ...</span><br><span class="line"><span class="literal">true</span> -&gt; </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="块表达式"><a href="#块表达式" class="headerlink" title="块表达式"></a>块表达式</h3><h3 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h3><ul><li></li><li></li></ul><h3 id="短路布尔表达式"><a href="#短路布尔表达式" class="headerlink" title="短路布尔表达式"></a>短路布尔表达式</h3><ul><li>Expr1 orelse Expr2</li><li>Expr1 andelse Expr2</li></ul><h2 id="热更新和动态代码载入"><a href="#热更新和动态代码载入" class="headerlink" title="热更新和动态代码载入"></a>热更新和动态代码载入</h2><p>codes.erl</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">start</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  spawn(codes, loop, []).</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">()</span> -&gt;</span> <span class="keyword">receive</span></span><br><span class="line">           <span class="keyword">after</span></span><br><span class="line">             <span class="number">2000</span> -&gt; ok</span><br><span class="line">           <span class="keyword">end</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">loop</span><span class="params">()</span> -&gt;</span></span><br><span class="line">  sleep(),</span><br><span class="line">  Val = test:test(),</span><br><span class="line">  io:format(<span class="string">&quot;Value is ~p~n&quot;</span>,[Val]),</span><br><span class="line">  loop().</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test.erl</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span> -&gt;</span></span><br><span class="line">    <span class="number">1</span>.</span><br></pre></td></tr></table></figure><p>外部热更新</p><p>主程序热更新，旧程序不会改变，新旧程序同时存在</p><h2 id="关卡"><a href="#关卡" class="headerlink" title="关卡"></a>关卡</h2><p>增加模式匹配的条件，常用作条件表达式（返回布尔值）</p><ul><li>原子true；</li><li>其他常量（各种数据结构和已绑定变量），它们在关卡表达式里都会成为false；</li><li>调用后面表1里的关卡判断函数和表2里的内置函数；</li><li>数据结构比较（参见表6）；</li><li>算术表达式（参见表3）；</li><li>布尔表达式（参见8.7节）；</li><li>短路布尔表达式（参见8.23节）。</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">max</span><span class="params">(X,Y)</span> <span class="title">when</span> X&gt;Y-&gt;</span>X;</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(X,Y)</span> -&gt;</span> Y.</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>逗号（,）分隔函数调用、数据构造和模式中的参数。</li><li>分号（;）分隔子句。我们能在很多地方看到子句，例如函数定义，以及case、if、try..catch和receive表达式。</li><li>句号（.）（后接空白）分隔函数整体，以及shell里的表达式。</li></ul><p>元数，指函数拥有的参数数量</p><p>分号用于分隔子句，每个子句包含头部和主题两部分，用<code>-&gt;</code>隔开</p><p>头部包含模式，在成功匹配时子句被调用</p><p>没有for循环，只能用递归</p><h3 id="fun：基本的抽象单元"><a href="#fun：基本的抽象单元" class="headerlink" title="fun：基本的抽象单元"></a>fun：基本的抽象单元</h3><p>函数式编程语言还表示函数可以被用作其他函数的参数，也可以返回函数。操作其他函数的函数被称为高阶函数（higher-order function），而在Erlang中用于代表函数的数据类型被称为fun，是一种匿名函数。</p><ul><li>对列表里的每一个元素执行相同的操作。在这个案例里，将fun作为参数传递给<br>lists:map/2和lists:filter/2等函数。fun的这种用法是极其普遍的。</li><li>创建自己的控制抽象。这一技巧极其有用。例如，Erlang没有for循环，但我们可以轻松<br>创建自己的<strong>for循环</strong>。创建控制抽象的优点是可以让它们精确实现我们想要的做法，而不<br>是依赖一组预定义的控制抽象，因为它们的行为可能不完全是我们想要的。</li><li>实现可重入解析代码（reentrant parsing code）、解析组合器（parser combinator）或惰性求<br>值器（lazy evaluator）等事物。在这个案例里，我们编写返回fun的函数。这种技术很强<br>大，但可能会导致程序难以调试</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test=<span class="keyword">fun</span>(X,Y)-&gt;X*Y <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><h3 id="以fun作为参数的函数"><a href="#以fun作为参数的函数" class="headerlink" title="以fun作为参数的函数"></a>以fun作为参数的函数</h3><ul><li>lists:map(F,L) 返回的是一个列表，它通过给列表L里的各个元素应用fun F生成</li><li>lists:filter(P,L) 返回一个新的列表，内含L中所有符合条件的元素（条件是对元素E而言P(E)为true）</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].</span><br><span class="line">lists:map(<span class="keyword">fun</span>(X)-&gt;<span class="number">2</span>*X <span class="keyword">end</span>, L).</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">Even=<span class="keyword">fun</span>(X)-&gt;(X <span class="keyword">rem</span> <span class="number">2</span>)=:=<span class="number">0</span> <span class="keyword">end</span>.</span><br><span class="line">lists:filter(Even, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]).</span><br></pre></td></tr></table></figure><h3 id="返回fun的函数"><a href="#返回fun的函数" class="headerlink" title="返回fun的函数"></a>返回fun的函数</h3><ul><li>lists:member(X,L) 如果X是列表L中的成员，lists:member(X, L)就返回true，否则返回false</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Fruit = [apple,pear,orange].</span><br><span class="line">MakeTest = <span class="keyword">fun</span>(L)-&gt;</span><br><span class="line">               (<span class="keyword">fun</span>(X) -&gt; lists:member(X,L) <span class="keyword">end</span>) </span><br><span class="line">           <span class="keyword">end</span>.</span><br><span class="line">IsFruit=MakeTest(Fruit).</span><br><span class="line">IsFruit(pear).</span><br><span class="line"></span><br><span class="line"><span class="comment">%%相当于</span></span><br><span class="line">lists:meber(pear, Fruit).</span><br></pre></td></tr></table></figure><h3 id="定义控制抽象"><a href="#定义控制抽象" class="headerlink" title="定义控制抽象"></a>定义控制抽象</h3><h2 id="模块、编译和预处理器"><a href="#模块、编译和预处理器" class="headerlink" title="模块、编译和预处理器"></a>模块、编译和预处理器</h2><p>编译器是<code>.erl</code>文件，编译后是<code>.beam</code>文件</p><h2 id="编译和运行程序"><a href="#编译和运行程序" class="headerlink" title="编译和运行程序"></a>编译和运行程序</h2><p>三种方式</p><ol><li><p>Erlang shell中编译运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c(hello).</span><br><span class="line">hello:hello().</span><br></pre></td></tr></table></figure></li><li><p>命令行中编译运行</p><ul><li>-noshell 以不带交互式shell的方式启动Erlang（因此不会看到Erlang的“徽标”，也就是通常系统启动时首先显示的那些信息）。</li><li>-s hello start 运行hello:start()函数。注意：使用-s Mod …选项时，Mod必须是已编译的。</li><li>-s init stop 在之前的命令完成后执行init:stop()函数，从而停止系统。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">erlc hello.erl</span><br><span class="line">erl -noshell -s hello start -s init stop</span><br></pre></td></tr></table></figure></li><li><p>作为Escript运行</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env escript</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span><span class="params">(Args)</span>-&gt;</span></span><br><span class="line">    io:format(<span class="string">&quot;hello world ~n&quot;</span>).</span><br></pre></td></tr></table></figure></li></ol><p>编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">erlc hello.erl</span><br><span class="line">erl -noshell -s hello start -s init stop</span><br></pre></td></tr></table></figure><p>好处是可以借助makefile等自动化构建</p><p>进程-对象</p><p>模块-类</p><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><p>并发的实现可分为基于操作系统的并发和基于语言的并发。</p><ul><li>在Erlang里，并发性由Erlang虚拟机提供，而非操作系统或任何的外部库。</li><li>在大多数顺序编程语言里（C语言等），并发性都是以接口的形式提供，指向主机操作系统的内部并发函数。</li></ul><p>erlang是基于进程的并发。每个进程都带有一个邮箱，这个邮箱是和进程同步创建的。</p><ul><li>self(). % 显示当前进程号</li><li>i() % 显示所有进程信息</li></ul><h2 id="发送和接收消息"><a href="#发送和接收消息" class="headerlink" title="发送和接收消息"></a>发送和接收消息</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%创建进程</span></span><br><span class="line">Pid = spawn(<span class="keyword">fun</span>)</span><br><span class="line">Pid = spawn(module, <span class="keyword">fun</span>, args) <span class="comment">% 确保运行进程能够正确升级为新版模块代码（即使用中被再次编译）的恰当方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%发送消息</span></span><br><span class="line">Pid ! Msg</span><br><span class="line"><span class="comment">%接收消息</span></span><br><span class="line"><span class="keyword">receive</span></span><br><span class="line">&#123;From, Message&#125;-&gt;</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>对于命令，发送原子</p><p>需要需要回复的消息，发送<code>&#123;self(), Msg&#125;</code>，接收<code>&#123;From, Msg&#125;</code></p><p>对loop中每个模式，封装为API（参数为请求模块的Pid）实现信息隐藏。</p><h3 id="接收高级选项"><a href="#接收高级选项" class="headerlink" title="接收高级选项"></a>接收高级选项</h3><ol><li><p>带超时的接收</p><ul><li>使用after指定</li><li>超时值为0，立即执行</li><li>超时值为原子<code>infinity</code>，永远不会超时</li></ul> <figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">receive</span></span><br><span class="line">    &#123;From, Message&#125;-&gt;</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">after</span> Time-&gt;</span><br><span class="line">    Expressions</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>选择性接收</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><h2 id="进程注册"><a href="#进程注册" class="headerlink" title="进程注册"></a>进程注册</h2><p>如果想给一个进程发送消息，就需要知道它的PID，但是当进程创建时，只有父进程才知道它的PID。系统里没有其他进程知道它的存在。这通常很不方便，因为你必须把PID发送给系统里所有想要和它通信的进程。另一方面，这也很安全。如果不透露某个进程的PID，其他进程就无法以任何方式与其交互。</p><p>进程注册是Erlang中一种<strong>公布进程标识符</strong>的方法，使用register将进程和一个指定的注册名（必须是atom类型）绑定，之后可以使用注册名来向这个进程发送消息。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pid=sspawn(area_server0,loop,[]).</span><br><span class="line"><span class="function"><span class="title">register</span><span class="params">(area,Pid)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">area</span>!&#123;<span class="title">rectangle</span>,4,5&#125;</span></span><br></pre></td></tr></table></figure><p>详细的BIF介绍如下：</p><table><thead><tr><th><strong>BIF</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>register(Name, Pid)</td><td>Associates the name Name, an atom, with the process Pid.</td></tr><tr><td>registered()</td><td>Returns a list of names that have been registered using register/2.</td></tr><tr><td>whereis(Name)</td><td>Returns the pid registered under Name, or undefined if the name is not registered.</td></tr></tbody></table><h2 id="进程别名"><a href="#进程别名" class="headerlink" title="进程别名"></a>进程别名</h2><p>发送消息的第三种方式是使用进程别名，前两种是Pid和进程注册名。</p><p>进程别名本质上是一种引用类型。</p><ul><li>创建别名</li><li>删除别名</li></ul><h2 id="进程字典"><a href="#进程字典" class="headerlink" title="进程字典"></a>进程字典</h2><p>进程字典是一个属于本进程的键值对数据结构，每个进程都存在一个进程区域存放进程字典。进程字典只存在本进程，不存在跨进程。</p><ul><li><code>put(Key,value)-&gt;OldValue</code><br>注意会返回旧值</li><li><code>get(Key-&gt;Value)</code></li><li><code>get()-[&#123;Key,Value&#125;]</code></li><li><code>erase(Key)-&gt;Value</code></li><li><code>erase()-&gt;[&#123;Key,Value&#125;]</code> </li></ul><p>注意：进程字典在实际中较少用，因为可能会给程序引入不易察觉的bug（有时会忘记使用了进程字典），让调试变得困难。</p><p>建议使用进程字典来保存“<strong>一次性写入</strong>”的变量。如果某个键一次性获得一个值而且不会改变它，那么将其保存在进程字典里在某些时候还是可以接受的。</p><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h2 id="错误的分类"><a href="#错误的分类" class="headerlink" title="错误的分类"></a>错误的分类</h2><p>程序的错误大致可分为以下四类：</p><ul><li><strong>Compile-time errors</strong>，编译产生的错误，例如一些语法错误，可以借助编译器和静态代码分析器找出错误。</li><li><strong>Logical errors</strong>，程序的行为与预想中的不同，例如点击按钮没有反应。</li><li><strong>Run-time errors</strong>，使程序发生崩溃的严重错误，例如运算符作用在错误的类型。</li><li><strong>Generated errors</strong>，在代码中调用<code>exit/1</code>和<code>throw/1</code>来生成错误。</li></ul><p>在erlang中，将运行时错误和生成错误表示为以下三类：</p><table><thead><tr><th><strong>Class</strong></th><th><strong>Origin</strong></th></tr></thead><tbody><tr><td>error</td><td>Run-time error, for example, 1+a, or the process called error/1,2</td></tr><tr><td>exit</td><td>The process called exit/1</td></tr><tr><td>throw</td><td>The process called throw/1</td></tr></tbody></table><p>可以使用<code>raise/3</code>函数来生成以上三种错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erlang:raise(Class, Reason, Stacktrace) -&gt; badarg</span><br></pre></td></tr></table></figure><p><a href="https://www.erlang.org/doc/reference_manual/errors.html#exit_reasons">Reason</a>的取值如下：</p><table><thead><tr><th><strong>Reason</strong></th><th><strong>Type of Error</strong></th></tr></thead><tbody><tr><td>badarg</td><td>Bad argument. The argument is of wrong data type, or is otherwise badly formed.</td></tr><tr><td>badarith</td><td>Bad argument in an arithmetic expression.</td></tr><tr><td>{badmatch,V}</td><td>Evaluation of a match expression failed. The value V did not match.</td></tr><tr><td>function_clause</td><td>No matching function clause is found when evaluating a function call.</td></tr><tr><td>{case_clause,V}</td><td>No matching branch is found when evaluating a case expression. The value V did not match.</td></tr><tr><td>if_clause</td><td>No true branch is found when evaluating an if expression.</td></tr><tr><td>{try_clause,V}</td><td>No matching branch is found when evaluating the of-section of a try expression. The value V did not match.</td></tr><tr><td>undef</td><td>The function cannot be found when evaluating a function call.</td></tr><tr><td>{badfun,F}</td><td>Something is wrong with a fun F.</td></tr><tr><td>{badarity,F}</td><td>A fun is applied to the wrong number of arguments. F describes the fun and the arguments.</td></tr><tr><td>timeout_value</td><td>The timeout value in a receive..after expression is evaluated to something else than an integer or infinity.</td></tr><tr><td>noproc</td><td>Trying to link or monitor to a non-existing process or port.</td></tr><tr><td>noconnection</td><td>A link or monitor to a remote process was broken because a connection between the nodes could not be established or was severed.</td></tr><tr><td>{nocatch,V}</td><td>Trying to evaluate a throw outside a catch. V is the thrown term.</td></tr><tr><td>system_limit</td><td>A system limit has been reached. See <strong><a href="https://www.erlang.org/doc/efficiency_guide/advanced.html">Efficiency Guide</a></strong> for information about system limits.</td></tr></tbody></table><p>另外，可以使用throw/1函数函数生成throw类型错误：</p><ul><li>throw(Any) -&gt; no_return()</li></ul><p>产生exit类型错误的函数如下：</p><ul><li>exit(Reason) -&gt; no_return()</li><li>exit(Pid, Reason) -&gt; true</li></ul><h2 id="Catch-and-Throw"><a href="#Catch-and-Throw" class="headerlink" title="Catch and Throw"></a>Catch and Throw</h2><p>Catch和Throw提供对表达式（顺序编程代码）的监控，在进程内部生成并处理错误。</p><ol><li><p>捕获错误，在try中编写可能出错的代码，可以使用可选的of进行分支选择。</p></li><li><p>匹配错误</p><ul><li><p>冒号前的ExceptionType取值为error、exit、throw中一种。</p></li><li><p>冒号后的ExPattern用于匹配catch的返回值，以便进行处理。</p><ul><li><p>若程序崩溃（error类型错误），catch子句返回元组<code>&#123;&#39;EXIT&#39;,&#123;Reason,Stack&#125;&#125;</code></p></li><li><p>若程序退出（exit类型错误），catch子句返回Any，Any为exit函数参数</p></li><li><p>若程序抛出异常（throw类型错误），catch子句返回Any，Any为throw函数参数</p></li></ul></li></ul></li><li><p>处理错误，若模式匹配成功可以在-&gt;后处理，处理完成后执行after子句的内容。</p></li></ol><p>程序结构如下：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> FuncOrExpressionSeq <span class="keyword">of</span></span><br><span class="line">    Patern1 [<span class="keyword">when</span> Guard1] -&gt; Expressions1;</span><br><span class="line">    Patern1 [<span class="keyword">when</span> Guard2] -&gt; Expressions2;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">ExceptionType1: ExPattern1 [<span class="keyword">when</span> ExGuard1] -&gt; ExExpressions1;</span><br><span class="line">ExceptionType2: ExPattern2 [<span class="keyword">when</span> ExGuard2] -&gt; ExExpressions2;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">after</span></span><br><span class="line">    AfterExpressions</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="并发程序中的错误处理"><a href="#并发程序中的错误处理" class="headerlink" title="并发程序中的错误处理"></a>并发程序中的错误处理</h2><p>并发程序中的错误处理就是<strong>使用一个进程来监控另一个进程的行为</strong>的过程，这个过程可以用两个概念来表示：进程链接（links）和退出（EXIT）信号。</p><p>在进程运行过程中，可以和其他进程或端口创建链接，当一个进程终止时，会对所有<strong>链接进程</strong>发送<strong>EXIT信号</strong>，格式为：<code>&#123;&#39;EXIT&#39;, Exiting_Process_Id, Reason&#125;</code>，Exiting_Process_Id是终止进程的标识符，Reason可以是任何Term。对于接收到EXIT信号的进程：</p><ul><li>若EXIT信号中的Reason是原子normal，EXIT信号会被忽略</li><li>若EXIT信号中的Reason不是原子normal，默认的处理是终止当前进程并对所有链接进程发送EXIT信号。</li></ul><p>可以重写处理策略，使接收到EXIT信号执行必要的操作来修复并重启非正常退出的进程。</p><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>本质上，进程和端口之间的通信都通过发送和接受异步信号来完成，消息就是一种常用的信号。</p><ol><li>发送信号，调用指定的BIF来发送指定的信号。</li><li>接收信号。信号是由进程异步、自动接收的，不需要做特殊处理。<br>注意：信号的接收和消息的接收不是一回事，并非发生在receive字句内，而是可能在程序执行的任意时刻。</li></ol><ul><li><strong>message</strong><ul><li>发送<ul><li>使用<code>!</code>运算符</li><li>erlang:send(Dest, Msg) -&gt; Msg</li><li>erlang:send(Dest, Msg, Options) -&gt; Res</li><li>erlang:send_after(Time, Dest, Msg) -&gt; TimerRef</li><li>erlang:send_after(Time, Dest, Msg, Options) -&gt; TimerRef</li><li>erlang:send_nosuspend(Dest, Msg) -&gt; boolean()</li><li>erlang:send_nosuspend(Dest, Msg, Options) -&gt; boolean()</li></ul></li><li>接收<ul><li>对非活动进程发送，抛弃。</li><li>对活动进程发送，添加到消息队列，使用receive表达式从消息队列获取消息。</li></ul></li></ul></li><li><strong>link, unlink</strong>，更改关于链接的信息<ul><li>发送<ul><li>link(PidOrPort) -&gt; true</li><li>unlink(Id) -&gt; true</li></ul></li><li>接收</li></ul></li><li><strong>exit</strong><ul><li>发送</li><li>接收</li></ul></li><li><strong>monitor, demonitor</strong>，更改关于监视者的信息</li><li><strong>down, change</strong>，若接收进程是活动进程，转换为message，否则丢弃。down由被监控进程发送，所有可见资源释放后发送。</li><li><strong>group_leader</strong>，更改进程组的组长<ul><li>group_leader(GroupLeader, Pid) -&gt; true</li></ul></li><li><strong>spawn_reply</strong></li><li><strong>alive_request</strong></li><li><strong>process_info_request, garbage_collect_request, check_process_code_request</strong></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>进程可以和另一个进程或端口建立链接，其中任何一个进程都可以创建和删除链接关系。</p><ul><li>创建链接<ul><li>link(PidOrPort) -&gt; true</li><li>spawn_link(Fun) -&gt; pid()</li><li>spawn_link(Node, Fun) -&gt; pid()</li><li>spawn_link(Module, Function, Args) -&gt; pid()</li><li>spawn_link(Node, Module, Function, Args) -&gt; pid()</li></ul></li><li>删除链接<ul><li>unlink(Id) -&gt; true</li></ul></li></ul><h3 id="监控Monitors"><a href="#监控Monitors" class="headerlink" title="监控Monitors"></a>监控Monitors</h3><p>除了双向的link外，还可以使用单向的monitor来监控一个进程。</p><p>创建监控</p><ul><li>monitor(Type :: process, Item :: monitor_process_identifier()) -&gt;<pre><code>MonitorRef</code></pre></li><li>monitor_node(Node, Flag) -&gt; true</li><li>erlang:monitor_node(Node, Flag, Options) -&gt; true</li><li>spawn_monitor(Fun) -&gt; {pid(), reference()}</li><li>spawn_monitor(Node, Fun) -&gt; {pid(), reference()}</li><li>spawn_monitor(Module, Function, Args) -&gt; {pid(), reference()}</li><li>spawn_monitor(Node, Module, Function, Args) -&gt; {pid(), reference()}</li></ul><p>删除监控</p><ul><li>demonitor(MonitorRef) -&gt; true</li><li>demonitor(MonitorRef, OptionList) -&gt; boolean()</li></ul><h3 id="修复和重启"><a href="#修复和重启" class="headerlink" title="修复和重启"></a>修复和重启</h3><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="为何使用分布式系统"><a href="#为何使用分布式系统" class="headerlink" title="为何使用分布式系统"></a>为何使用分布式系统</h2><ul><li>性能<br>可以通过安排程序的不同部分在不同的机器上并行运行来让程序跑得更快。</li><li>可靠性<br>可以通过让系统运行在数台机器上来实现容错式系统。如果一台机器出了故障，可以在另<br>一台机器上继续。</li><li>可扩展性<br>随着我们把应用程序越做越大，即使机器的处理能力再强大也迟早会耗尽。到那时，就必<br>须添加更多的机器来提升处理能力。添加一台新机器应当是一次简单的操作，不需要对应<br>用程序的架构做出大的修改。</li><li>天生分布式的程序<br>许多应用程序天生就是分布式的。如果编写一个多用户游戏或聊天系统，就会有来自世界<br>各地的分散用户。如果我们在某个地理位置上拥有大量的用户，就会希望把计算资源放置<br>在接近这些用户的地方。</li><li>fun<br>我想要编写的fun程序大部分都是分布式的。其中许多涉及与全世界各地的人与机器进行交互。</li></ul><h2 id="分布式erlang"><a href="#分布式erlang" class="headerlink" title="分布式erlang"></a>分布式erlang</h2><p>分布式erlang以节点为中心。节点是一个运行的erlang系统，节点可以在同一台机器或在不同机器上，许多个节点组成一个分布式系统。</p><p>命名。在一个分布式系统内，所有节点都必须使用同种命名模式，例如全是短命名，或者全是长命名。</p><p>通信</p><p>统一标识，分布式节点上的进程，其标识方式与在本地节点上时完全一样，因此可以使用<code>Pid ！Msg</code> 给集群内任意节点上的进程发送消息。</p><p>分裂、链接的操作也可对任意节点的任意进程作用。</p><p>为了能够相互通信， Erlang 的节点问必须共享一个私密的cookie 值。</p><p>适合编写那些可信任其他参与者的集群应用程序。</p><ul><li><p>第1阶段：在一个常规的非分布式Erlang系统上编写和测试名称服务器。</p></li><li><p>第2阶段：在同一台机器的两个节点上测试名称服务器。</p></li><li><p>第3阶段：在同一局域网内分属两台不同机器的节点上测试名称服务器。</p></li><li><p>第4阶段：在分属两个不同国家和域的两台机器上测试名称服务器。</p></li></ul><p>参数-sname gandalf的意思是“在本地主机上启动一个名为gandalf的Erlang节点”</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">erl -sname gandalf</span><br><span class="line">erl -sname bilbo</span><br></pre></td></tr></table></figure><ol><li>用-name参数启动Erlang</li><li>确保两个节点拥有相同的cookie。这正是启动两个节点时都使用命令行参数<code>-setcookie abc</code>的原因。</li><li>确保相关节点的完全限定主机名（fully qualified hostname）可以被DNS解析。对于我来说，域名myerl.example.com完全属于我的家庭网络，通过在/etc/hosts里添加一个条目来实现本地解析。</li><li>确保两个系统拥有相同版本的代码和相同版本的Erlang</li></ol><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>创建节点需要用命令行选项-name或-sname，节点名的格式是<code>name@host</code>，name是自定义的节点名，使用-name选项host需要使用完整的host，使用-sname选项只需要用到第一部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% erl -name dilbert</span><br><span class="line">(dilbert@uab.ericsson.se)1&gt; node().</span><br><span class="line">&#x27;dilbert@uab.ericsson.se&#x27;</span><br><span class="line"></span><br><span class="line">% erl -sname dilbert</span><br><span class="line">(dilbert@uab)1&gt; node().</span><br><span class="line">dilbert@uab</span><br></pre></td></tr></table></figure><p>也可以使用**<a href="https://www.erlang.org/doc/man/net_kernel.html#start-1">net_kernel:start/1</a>**函数在运行时指定节点名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% erl</span><br><span class="line">1&gt; node().</span><br><span class="line">nonode@nohost</span><br><span class="line">2&gt; net_kernel:start([dilbert,shortnames]).</span><br><span class="line">&#123;ok,&lt;0.102.0&gt;&#125;</span><br><span class="line">(dilbert@uab)3&gt; node().</span><br><span class="line">dilbert@uab</span><br></pre></td></tr></table></figure><p>以下是详细的命令行选项说明：</p><table><thead><tr><th><strong>Command-Line Flag</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>-connect_all false</td><td>Only explicit connection set-ups are used.</td></tr><tr><td>-hidden</td><td>Makes a node into a hidden node.</td></tr><tr><td>-name Name</td><td>Makes a runtime system into a node, using long node names.</td></tr><tr><td>-setcookie Cookie</td><td>Same as calling erlang:set_cookie(Cookie).</td></tr><tr><td>-setcookie Node Cookie</td><td>Same as calling erlang:set_cookie(Node, Cookie).</td></tr><tr><td>-sname Name</td><td>Makes a runtime system into a node, using short node names.</td></tr></tbody></table><p>需要通过RPC服务来解决跨网络通信问题。</p><h3 id="连接节点"><a href="#连接节点" class="headerlink" title="连接节点"></a>连接节点</h3><p>分布式erlang中的节点是松散连接的，在第一次使用另一个节点名时会自动连接两个节点，例如使用spawn(Node,M,F,A) 或 **net_adm:ping(Node)**等函数。</p><p>默认情况下，连接具有传递性，即若B连接C，当新进程A尝试连接B时，还会尝试连接C。可以使用命令行选项<code>-connect_all false</code>来关闭传递连接。</p><p>当节点关闭时，会调用erlang:disconnect_node(Node)函数关闭所有连接。</p><p>可以使用函数nodes()查看已连接的节点。</p><p>一般按以下四个顺序测试分布式程序</p><ol><li><p>非分布式Erlang系统测试</p></li><li><p>同一台机器的两个节点<br>只需要在同一台计算机上启动两个Erlang节点</p></li><li><p>同一<strong>局域网</strong>内分属两台不同机器的节点<br>节点的IP地址不同</p><ol><li>用-name参数启动Erlang</li><li>确保两个节点拥有相同的cookie</li><li>确保相关节点的完全限定主机名（fully qualified hostname）可以被DNS解析</li><li>确保两个系统拥有相同版本的代码和相同版本的Erlang</li></ol></li><li><p>不同国家和域（互联网）的两台机器上的节点<br>和第3阶段是一样的，但现在我们必须更加关注安全性</p><ol><li><p>确保4369端口对TCP和UDP流量都开放。这个端口会被一个名为epmd的程序使用（它是<br>Erlang Port Mapper Daemon的缩写，即Erlang端口映射守护进程）。</p></li><li><p>选择一个或一段连续端口给分布式Erlang使用，并确保这些端口是开放的。如果这些端<br>口位于Min和Max之间（只想用一个端口就让Min=Max），就用以下命令启动Erlang：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erl -name... -setcookie ... -kernel</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>分布式编程的大坑是安全策略，局域网中可以先用-sname测试，</p><p>配置主机名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># sudo vim /etc/hostname</span><br><span class="line">sudo hostnamectl set-hostname your-new-hostname</span><br><span class="line">sudo systemctl restart NetworkManager</span><br><span class="line">hostname</span><br></pre></td></tr></table></figure><p>配置域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">192.168.1.100 myhost.example.com myhost</span><br></pre></td></tr></table></figure><h4 id="分布式erlang端口安全"><a href="#分布式erlang端口安全" class="headerlink" title="分布式erlang端口安全"></a>分布式erlang端口安全</h4><p>在分布式 Erlang 系统中，节点之间可以通过端口进行通信。要确保端口的安全性，可以采取以下措施：</p><ol><li>限制端口范围：只打开必要的端口，并限制其范围，以减少攻击者的可能性。可以使用防火墙等工具来限制端口范围。</li><li>使用安全通信协议：Erlang 支持加密的通信协议，如 TLS，可以使用这些协议来确保通信的安全性。使用这些协议可以防止窃听和中间人攻击。</li><li>使用访问控制列表：可以使用访问控制列表来限制哪些节点可以访问端口。这可以防止未经授权的访问，并减少攻击的可能性。</li><li>更新 Erlang 版本：Erlang 的新版本通常包含安全更新和修复程序，因此请确保使用最新版本的 Erlang。</li><li>使用安全的操作系统：Erlang 运行在操作系统上，因此使用安全的操作系统可以增加系统的安全性。</li><li>遵循最佳实践：遵循安全最佳实践，如安全密码管理和多因素身份验证等，可以帮助保护分布式 Erlang 系统的安全。</li></ol><p>综上所述，要确保分布式 Erlang 端口的安全，需要采取多种措施，包括限制端口范围、使用安全通信协议、使用访问控制列表、更新 Erlang 版本、使用安全的操作系统以及遵循最佳实践。</p><h4 id="centos打开所有端口"><a href="#centos打开所有端口" class="headerlink" title="centos打开所有端口"></a>centos打开所有端口</h4><p>在 CentOS 中打开所有端口并不是一种安全的做法，因为这将使您的系统容易受到网络攻击。然而，如果您确实需要打开所有端口，可以按照以下步骤进行操作：</p><ol><li><p>使用 root 用户登录系统。</p></li><li><p>修改防火墙规则，可以使用以下命令禁用防火墙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arduinoCopy codesystemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>或者使用以下命令允许所有端口的流量通过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cssCopy codeiptables -F</span><br><span class="line">iptables -A INPUT -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br></pre></td></tr></table></figure><p>注意：上述命令将禁用 CentOS 中的防火墙，因此建议在必要时使用此方法，并在使用后重新启用防火墙以保护您的系统。</p></li><li><p>启用所有端口的流量，可以使用以下命令打开所有端口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p>或者修改 SELinux 配置文件 /etc/selinux/config 中的 SELINUX 参数，将其设置为 disabled，然后重新启动系统。</p><p>注意：禁用 SELinux 将使系统更加容易受到攻击。因此，在必要时使用此方法，并在使用后重新启用 SELinux 以保护您的系统。</p></li></ol><p>请注意，在打开所有端口之前，应该评估您的安全需求和风险，并采取适当的安全措施来保护您的系统和数据。</p><h4 id="net-adm"><a href="#net-adm" class="headerlink" title="net_adm"></a>net_adm</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net_adm:ping(&#x27;gandalf@www.server.com&#x27;).</span><br><span class="line">net_adm:ping(&#x27;gandalf@segandalf.server.com&#x27;).</span><br><span class="line"></span><br><span class="line">net_adm:ping(&#x27;ssvr@gandalf.server.com&#x27;).</span><br></pre></td></tr></table></figure><h3 id="分布式编程"><a href="#分布式编程" class="headerlink" title="分布式编程"></a>分布式编程</h3><table><thead><tr><th><strong>BIF</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>erlang:disconnect_node(Node)</td><td>Forces the disconnection of a node.</td></tr><tr><td>erlang:get_cookie()</td><td>Returns the magic cookie of the current node.</td></tr><tr><td>erlang:get_cookie(Node)</td><td>Returns the magic cookie for node Node.</td></tr><tr><td>is_alive()</td><td>Returns true if the runtime system is a node and can connect to other nodes, false otherwise.</td></tr><tr><td>monitor_node(Node, true|false)</td><td>Monitors the status of Node. A message{nodedown, Node} is received if the connection to it is lost.</td></tr><tr><td>node()</td><td>Returns the name of the current node. Allowed in guards.</td></tr><tr><td>node(Arg)</td><td>Returns the node where Arg, a pid, reference, or port, is located.</td></tr><tr><td>nodes()</td><td>Returns a list of all visible nodes this node is connected to.</td></tr><tr><td>nodes(Arg)</td><td>Depending on Arg, this function can return a list not only of visible nodes, but also hidden nodes and previously known nodes, and so on.</td></tr><tr><td>erlang:set_cookie(Cookie)</td><td>Sets the magic cookie, Cookie to use when connecting all nodes that have no explicit cookie set with erlang:set_cookie/2.</td></tr><tr><td>erlang:set_cookie(Node, Cookie)</td><td>Sets the magic cookie used when connecting Node. If Node is the current node, Cookie is used when connecting all nodes that have no explicit cookie set with this function.</td></tr><tr><td>spawn[_link|_opt](Node, Fun)</td><td>Creates a process at a remote node.</td></tr><tr><td>spawn[_link|opt](Node, Module, FunctionName, Args)</td><td>Creates a process at a remote node.</td></tr></tbody></table><h3 id="分布式编程的库和内置函数"><a href="#分布式编程的库和内置函数" class="headerlink" title="分布式编程的库和内置函数"></a>分布式编程的库和内置函数</h3><table><thead><tr><th><strong>Module</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>global</td><td>A global name registration facility.</td></tr><tr><td>global_group</td><td>Grouping nodes to global name registration groups.</td></tr><tr><td>net_adm</td><td>Various Erlang net administration routines.</td></tr><tr><td>net_kernel</td><td>Erlang networking kernel.</td></tr></tbody></table><table><thead><tr><th><strong>Module</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>slave</td><td>Start and control of slave nodes.</td></tr></tbody></table><h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3><p>提供了许多远程过程调用服务</p><ul><li>call(Node, Module, Function, Args) -&gt; Res | {badrpc, Reason}</li><li>call(Node, Module, Function, Args, Timeout) -&gt;<pre><code>Res | &#123;badrpc, Reason&#125;</code></pre></li><li>cast(Node, Module, Function, Args) -&gt; true</li></ul><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>用来在分布式系统里注册名称和加锁，以及维护一个全连接网络。</p><h3 id="global-group"><a href="#global-group" class="headerlink" title="global_group"></a>global_group</h3><h3 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h3><h2 id="基于套接字的分布式模型"><a href="#基于套接字的分布式模型" class="headerlink" title="基于套接字的分布式模型"></a>基于套接字的分布式模型</h2><p>适合在并非人人都可信的开放式环境中编写分布式程序。</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><h3 id="创建端口"><a href="#创建端口" class="headerlink" title="创建端口"></a>创建端口</h3><p>创建端口的进程被称为该端口的<strong>相连进程</strong>。相连进程有其特殊的重要性：所有发往端口的消息都必须标明相连进程的PID，所有来自外部程序的消息都会发往相连进程。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">open_port</span><span class="params">(PortName, PortSettings)</span> -&gt;</span> port()</span><br></pre></td></tr></table></figure><ul><li>PortName<ul><li>{spawn, Command}<br>启动一个<strong>外部程序</strong>。Command是这个外部程序的名称。除非能找到一个名为Command的内链驱动，否则Command会在Erlang工作空间之外运行。</li><li>{fd, In, Out}<br>允许一个Erlang进程访问Erlang使用的任何当前打开<strong>文件描述符</strong>。文件描述符In可以用作标准输入，文件描述符Out可以用作标准输出</li></ul></li><li>PortSettings<ul><li>{packet, N}<br>数据包（packet）前面有N（1、2或4）个字节的长度计数。</li><li>stream<br>发送消息时不带数据包长度信息。应用程序必须知道如何处理这些数据包。</li><li>{line, Max}<br>发送消息时使用一次一行的形式。如果有一行超过了Max字节，就会在Max字节处被拆分。</li><li>{cd, Dir}<br>只适用于{spawn, Command}选项。外部程序从Dir里启动。</li><li>{env, Env}<br>只适用于{spawn, Command}选项。外部程序的环境通过Env列表里的环境变量进行扩展。<br>Env列表由若干个{VarName, Value}对组成，其中VarName和Value是字符串。</li></ul></li></ul><h3 id="端口通信"><a href="#端口通信" class="headerlink" title="端口通信"></a>端口通信</h3><p>相连进程通过发送和接收消息来和端口通信，向端口发送消息的格式如下：</p><table><thead><tr><th><strong>Message</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>{Pid,{command,Data}}</td><td>Sends Data to the port.</td></tr><tr><td>{Pid,close}</td><td>Closes the port. Unless the port is already closed, the port replies with {Port,closed} when all buffers have been flushed and the port really closes.</td></tr><tr><td>{Pid,{connect,NewPid}}</td><td>Sets the port owner of Port to NewPid. Unless the port is already closed, the port replies with{Port,connected} to the old port owner. Note that the old port owner is still linked to the port, but the new port owner is not.</td></tr></tbody></table><p>也可以通过BIF和端口进行通信</p><table><thead><tr><th><strong>Port BIF</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>port_command(Port,Data)</td><td>Sends Data to the port.</td></tr><tr><td>port_close(Port)</td><td>Closes the port.</td></tr><tr><td>port_connect(Port,NewPid)</td><td>Sets the port owner of Portto NewPid. The old port owner Pid stays linked to the port and must call unlink(Port) if this is not desired.</td></tr><tr><td>erlang:port_info(Port,Item)</td><td>Returns information as specified by Item.</td></tr><tr><td>erlang:ports()</td><td>Returns a list of all ports on the current node.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> erlang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行基础使用</title>
      <link href="/2023/03/16/Linux/"/>
      <url>/2023/03/16/Linux/</url>
      
        <content type="html"><![CDATA[<p>关于Linux命令行的基本使用。</p><span id="more"></span><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><p>安装计算机系统的步骤可以概括为以下几个步骤：</p><ol><li>准备安装介质：选择合适的安装介质，如光盘、USB闪存盘等，并确保安装介质的可靠性和完整性。</li><li>进入BIOS设置：开机时按下相应的按键（通常是F2、DEL等），进入BIOS设置界面，设置启动顺序和其他必要参数，确保计算机能够从安装介质启动。</li><li>启动计算机并进入安装界面：将安装介质插入计算机，重新启动计算机，等待计算机从安装介质启动并进入安装界面。</li><li>选择安装类型：根据需求选择安装类型，如新安装、升级安装、自定义安装等，然后按照提示进行操作。</li><li>准备磁盘，完成磁盘分区。</li><li>选择安装位置：选择安装系统的位置，如硬盘的分区或未分配空间等，然后按照提示进行操作。</li><li>安装系统：根据选择的安装类型和安装位置，开始安装系统，安装过程中需要进行一些基本设置，如时区、键盘布局、用户名等，按照提示进行操作。</li><li>安装驱动程序和更新：安装完成后，需要安装相应的驱动程序和更新，以确保计算机正常运行和安全。</li><li>安装软件和配置环境：根据需要安装相应的软件和配置环境，如浏览器、办公软件、编程环境等。</li><li>完成设置和备份：完成设置后，需要进行一些基本的备份和恢复操作，以确保数据的安全性和完整性。</li></ol><h2 id="磁盘分区（partition）"><a href="#磁盘分区（partition）" class="headerlink" title="磁盘分区（partition）"></a>磁盘分区（partition）</h2><p>磁盘分区是将物理硬盘分成多个逻辑分区的过程。每个分区看起来像是一个单独的硬盘，在操作系统中被视为一个独立的存储设备。通过分区，可以将一个硬盘分成多个部分来存储不同的数据，例如操作系统、应用程序、用户文件等。</p><p>在Windows上，分区就是把磁盘分层C盘，D盘，E盘的过程。分区的基本概念有：</p><ul><li>主分区：是硬盘的基本分区，最多只能有4个主分区。</li><li>扩展分区：是一种特殊的主分区，可以包含多个逻辑分区。一个硬盘只能有一个扩展分区。</li><li>逻辑分区：是在扩展分区中创建的，可以被格式化为文件系统并用于存储数据。</li><li>分区表：是记录硬盘分区信息的数据结构，可以分为MBR分区表和GPT分区表两种。</li><li>分区工具：是用来创建、删除、调整分区的软件工具，例如Windows的磁盘管理工具、Linux的fdisk命令等。</li></ul><h3 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h3><p>MBR（Master Boot Record）是一种旧的磁盘分区方案，用于记录磁盘的分区信息和引导程序。MBR存在于硬盘的第一个扇区（512字节）中，通常被称为主引导记录（Master Boot Record）。</p><p>MBR分区方案最多支持4个主分区或3个主分区和1个扩展分区，每个分区最大支持2TB的存储空间。在MBR分区中，分区信息被存储在MBR中的分区表中，<strong>分为四个16字节的分区表项</strong>，每个分区表项描述一个分区的起始位置、大小、分区类型等信息。</p><p>MBR分区方案存在一些缺点，例如不支持大于2TB的硬盘、分区数有限等。随着硬盘容量的不断扩大，MBR分区方案已经逐渐被GPT分区方案取代。</p><p>尽管MBR分区方案已经逐渐被淘汰，但由于历史原因和兼容性需求，一些旧系统和软件仍然使用MBR分区方案。</p><h3 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h3><p>GPT（GUID Partition Table）是一种新的磁盘分区方案，取代了旧的MBR（Master Boot Record）分区方案。GPT分区方案支持大于2TB的硬盘，最多支持128个分区，<strong>每个分区可以使用GUID进行标识</strong>。GPT分区方案的优势在于：</p><ol><li>支持大于2TB的硬盘。MBR分区方案只支持最大2TB的硬盘，而GPT分区方案可以支持超过2TB的硬盘。</li><li>最多支持128个分区。MBR分区方案最多只支持4个主分区或3个主分区和1个扩展分区，而GPT分区方案可以支持最多128个分区。</li><li>数据冗余和校验。GPT分区方案在分区表中存储了分区数据的备份和校验信息，可以提高数据的安全性和可靠性。</li><li>逻辑分区的独立性。GPT分区方案中每个分区都有独立的GUID标识，可以避免不同分区之间的冲突。</li><li>兼容性。GPT分区方案可以兼容MBR分区方案，可以在旧的操作系统和硬件上使用。</li></ol><p>在使用GPT分区方案时，需要使用支持GPT分区的操作系统和磁盘管理工具。例如，Windows Vista、Windows 7、Windows 8、Windows 10、Mac OS X等操作系统都支持GPT分区方案。同时，使用GPT分区方案也需要备份重要的数据，以免分区操作不当导致数据丢失。</p><p>早期磁盘第一个扇区里面含有的重要信息我们称为MBR （Master Boot<br>Record） 格式，但是由于近年来磁盘的容量不断扩大，造成读写上的一些困扰， 甚至有些大于 2TB 以上的磁盘分区已经让某些操作系统无法存取。因此后来又多了一个新的磁盘分区格式，称为 GPT （GUID partition table）</p><h3 id="Linux磁盘分区"><a href="#Linux磁盘分区" class="headerlink" title="Linux磁盘分区"></a>Linux磁盘分区</h3><p>磁盘挂载</p><p>磁盘挂载是将一个文件系统连接到Linux文件系统树的过程，以便于访问文件和目录。在Linux中，所有文件和目录都存在于文件系统中，包括硬盘、U盘、CD-ROM等存储设备上的文件。磁盘挂载就是将这些存储设备中的文件系统连接到Linux文件系统树（目录树）中的一个挂载点上，使得Linux系统能够访问这些存储设备上的文件。</p><p>在Linux中，每个挂载点都是一个目录，它是由管理员创建的，并用于连接文件系统。当管理员想要使用磁盘上的文件时，需要先将磁盘挂载到某个挂载点上，然后才能访问文件系统中的文件和目录。挂载点的选择通常是根据需要访问的文件系统的类型和目的来决定的。</p><p>简单来说，Linux可以把硬盘或分区挂载到目录树的任意一个目录，而Windows全部都挂载到根目录，分成了C盘，D盘等。</p><p>假设硬盘分为两个分区，partition1挂载到根目录，partition 2挂载到/home目录。 那么，当把数据放置在/home内的各级目录时，数据是放置到partition2，如果不是放在/home下面的目录， 那么数据就会被放置到partition1。</p><p>分区规划</p><ul><li>最简单的分区方法：仅分区出根目录与内存交换空间（ / &amp; swap ）即可。 然后再预留一些剩余的磁盘以供后续的练习之用。不过，这当然是不保险的分区方法（所以鸟哥常常说这是“懒人分区法”）！ 因为如果任何一个小细节坏掉（例如坏轨的产生），你的根目录将可能整个的损毁～挽救方面较困难！</li><li>稍微麻烦一点的方式： 较麻烦一点的分区方式就是先分析这部主机的未来用途，然后根据用途去分析需要较大容量的目录， 以及读写较为频繁的目录，将这些重要的目录分别独立出来而不与根目录放在一起， 那当这些读写较频繁的磁盘分区有问题时，至少不会<br>影响到根目录的系统数据，那挽救方面就比较容易啊！ 在默认的CentOS环境中，下面的目录是比较符合容量大且（或）读写频繁的目录啰：<ul><li>/boot</li><li>/</li><li>/home</li><li>/var</li><li>Swap</li></ul></li></ul><p>分区实例</p><p>案例一：家用的小型Linux服务器，IP分享与文件分享中心</p><ul><li>提供服务： 提供家里的多部计算机的网络连线分享，所以需要NAT功能。提供家庭成员的数据存放容量，由于家里使用Windows系统的成员不少， 所以创建SAMBA服务器，提供网芳的网络磁盘功能。</li><li>主机硬件配备：<ul><li>CPU使用 AMD Athlon 4850e 省电型 CPU</li><li>内存大小为 4GB</li><li>两张网卡，控制芯片为常见的螃蟹卡（Realtek）</li><li>只有一颗 640GB 的磁盘</li><li>显卡为 CPU 内的内置显卡 （Radeon HD 3200）</li><li>安装完毕后将屏幕,键盘,鼠标,DVD-ROM等配备均移除，仅剩下网络线与电源线。</li></ul></li><li>硬盘分区：<ul><li>分成 /, /usr, /var, /tmp等目录均独立；</li><li>1 GB的Swap；</li><li>安装比较过时的 CentOS 5.x 最新版</li></ul></li></ul><p>案例二：提供Linux的PC计算机集群：</p><ul><li>提供服务： 提供研究室成员对于模式仿真的软、硬件平台，主要提供的服务并非网际网络服务，而是研究室内部的研究工作分析。</li><li>主机硬件配备：<ul><li>利用两部多核系统处理器 （一部 20核 40绪，一部 12核 24绪），搭配 10G 网卡组<br>合而成</li><li>使用内置的显卡</li><li>运算用主机仅一颗磁盘，储存用主机提供 8 颗 2TB 磁盘组成的磁盘阵列</li><li>一部 128GB 内存，一部 96GB 内存</li></ul></li><li>硬盘分区：<ul><li>运算主机方面，整颗磁盘仅分 /boot, / 及 swap 而已</li><li>储存主机方面，磁盘阵列分成两颗磁盘，一颗 100G 给系统用，一颗 12T 给数据<br>用。系统磁盘用的分区为 /boot, /, /home, /tmp, /var 等分区， 数据磁盘全部容量规划<br>在同一个分区而已。</li><li>安装最新的 CentOS 7.x 版</li></ul></li></ul><p>案例三：</p><h2 id="开机检测程序"><a href="#开机检测程序" class="headerlink" title="开机检测程序"></a>开机检测程序</h2><h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><p>BIOS（Basic Input/Output System）是计算机系统中的一项基本固件，它提供了操作系统和硬件设备之间的接口，控制着计算机的启动过程和硬件设备的基本功能。BIOS通常存储在计算机主板上的Flash ROM中，它是计算机启动过程中第一个被执行的程序。</p><p>BIOS的主要功能包括以下几个方面：</p><ol><li>硬件初始化：BIOS会在计算机启动时对各种硬件设备进行初始化和检测，确保它们能够正常工作。</li><li>启动顺序：BIOS会根据预设的启动顺序来查找可启动设备（例如硬盘、光驱、USB设备等），并从中加载操作系统的引导程序。</li><li>系统设置：BIOS可以提供一些基本的系统设置，例如时间、日期、硬件设备设置等。</li><li>系统自检：BIOS会对计算机系统进行一些自检操作，例如检查内存是否正常、硬盘是否存在等。</li></ol><p>随着计算机技术的不断发展，BIOS逐渐被UEFI（Unified Extensible Firmware Interface）所取代。UEFI提供了比BIOS更强大和灵活的功能，例如支持硬盘容量大于2TB、支持图形化界面等。不过，BIOS仍然广泛存在于许多老旧的计算机系统中。</p><h3 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h3><p>UEFI是“Unified Extensible Firmware Interface”的缩写，中文名为“统一可扩展固件接口”。它是一种新型的固件接口标准，用于取代传统的BIOS固件接口。UEFI最初由Intel提出，并得到了多家计算机硬件厂商的支持，目前已经成为主流的固件接口标准。</p><p>UEFI相比于传统的BIOS具有以下优点：</p><ol><li>更快的启动速度：UEFI启动的速度比BIOS更快，因为UEFI在启动过程中可以并行执行多个操作。</li><li>更好的可扩展性：UEFI接口可以轻松地扩展和更新，支持新的硬件和功能，使计算机系统更具灵活性和可升级性。</li><li>更好的安全性：UEFI可以提供更好的安全性，支持安全启动和数字签名，可以保护计算机系统免受恶意软件和攻击。</li><li>更多的操作系统支持：UEFI可以支持多个操作系统，包括Windows、Linux、macOS等，同时还支持64位操作系统。</li></ol><p>UEFI在功能上与传统的BIOS类似，都具有控制计算机启动过程、管理硬件设备、提供基本的输入输出功能等。但UEFI接口更加现代化、灵活性更高、可扩展性更强、安全性更好。UEFI已经成为现代计算机系统的标准固件接口，越来越多的计算机硬件厂商和操作系统厂商开始支持UEFI接口。</p><h2 id="引导程序"><a href="#引导程序" class="headerlink" title="引导程序"></a>引导程序</h2><p>开机流程、模块管理与 Loader</p><h3 id="grub2"><a href="#grub2" class="headerlink" title="grub2"></a>grub2</h3><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><p>鸟哥20章</p><p>网络设置</p><p>参数</p><ul><li>method: manual （手动设置）</li><li>IP: 172.16.1.1</li><li>netmask: 255.255.0.0</li><li>gateway: 172.16.200.254</li><li>DNS: 172.16.200.254</li><li>hostname: study.centos.vbird</li></ul><p>网卡</p><ul><li>eno1 ：代表由主板 BIOS 内置的网卡</li><li>ens1 ：代表由主板 BIOS 内置的 PCI-E 界面的网卡</li><li>enp2s0 ：代表 PCI-E 界面的独立网卡，可能有多个插孔，因此会有 s0, s1… 的编号～</li><li>eth0 ：如果上述的名称都不适用，就回到原本的默认网卡编号</li></ul><p>日期与时间设置</p><p>世界事件标准</p><ol><li>协调世界时（Coordinated Universal Time，缩写为UTC）：UTC是目前全球通用的时间标准，基于原子钟的国际时间。它通过对格林威治时间（GMT）进行时区和夏令时调整，以确保与地球各个区域的时间保持一致。UTC通常以24小时制表示时间。</li><li>格林威治标准时间（Greenwich Mean Time，缩写为GMT）：GMT是以伦敦格林威治天文台所在地的当地时间作为基准的时间标准。它不考虑夏令时的调整，保持在标准时间。GMT已被UTC取代，但仍然在一些时区标识符中使用。</li><li>国际原子时间（International Atomic Time，缩写为TAI）：TAI是由国际原子时标准实验室（BIPM）维护的一种基于原子钟的时间标准。它是通过原子钟测量获得的连续时间流，与地球的自转速率无关。</li><li>地球时间（Terrestrial Time，缩写为TT）：TT是基于地球自转的时间标准，与国际原子时间略有不同，因为地球自转速率会受到多种因素的影响。</li><li>协调射电时（Coordinated Radioactive Time，缩写为TAI(R)）：TAI(R)是TAI与地球自转速率的差异之间的校正值，以确保与地球的动力学时标准（如TT）保持一致。</li></ol><p>在日常生活和计算机系统中，最常用的时间标准是UTC，它为世界各地提供了统一的时间参考。其他时间标准主要在科学、导航、天文学等领域中使用。</p><p>计算机的日期和时间表示</p><ol><li><p>时间戳（Timestamp）：时间戳是一个整数或浮点数，表示从一个特定的基准时间（通常是UNIX纪元，即1970年1月1日00:00:00 UTC）开始经过的时间量。时间戳以<strong>秒</strong>为单位，可以用于进行日期和时间的计算和比较。</p></li><li><p>字符串表示：日期和时间可以使用字符串来表示，遵循特定的格式。常见的日期和时间格式包括：</p><ul><li>年-月-日（例如：2023-05-15）</li><li>月/日/年（例如：05/15/2023）</li><li>日-月-年（例如：15-05-2023）</li><li>24小时制时间（例如：14:30:00）</li><li>12小时制时间（例如：2:30:00 PM）</li></ul><p>字符串表示可以使用不同的分隔符、顺序和时间制式，具体取决于所使用的日期和时间格式。</p></li><li><p>结构化对象：在编程语言中，常常使用特定的日期和时间对象或类来表示日期和时间。这些对象通常具有属性或方法，用于存储和操作日期和时间信息。例如，Python中的<code>datetime</code>模块提供了<code>datetime</code>类，可以存储日期和时间，并提供各种操作方法。</p></li><li><p>时区信息：在计算机中，日期和时间表示通常也包含与之关联的时区信息。时区信息用于将本地时间与全球标准时间（如UTC）进行转换，并考虑夏令时的调整。</p></li><li><p>ISO 8601格式： ISO 8601是国际标准化组织定义的日期和时间表示标准。它的格式为<code>YYYY-MM-DDTHH:MM:SS</code>，其中<code>T</code>是日期和时间的分隔符。</p></li></ol><p>设置日期和时间</p><ol><li><p>使用<code>date</code>命令设置日期和时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">sudo date --set=&quot;YYYY-MM-DD HH:MM:SS&quot;</span><br></pre></td></tr></table></figure><p>其中，<code>YYYY-MM-DD</code>是日期，<code>HH:MM:SS</code>是时间。</p><p>例如，要将日期设置为2023年5月15日，时间设置为14:30:00，可以运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">sudo date --set=&quot;2023-05-15 14:30:00&quot;</span><br></pre></td></tr></table></figure><p>请注意，使用<code>date</code>命令需要超级用户（root）权限。</p></li><li><p>使用<code>timedatectl</code>命令设置时区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl list-timezones</span><br><span class="line">sudo timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure></li><li><p>使用<code>timedatectl</code>命令设置日期和时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timedatectl set-time &quot;YYYY-MM-DD HH:MM:SS&quot;</span><br></pre></td></tr></table></figure><p>同样，替换<code>YYYY-MM-DD</code>和<code>HH:MM:SS</code>为您想要设置的日期和时间。</p><p>例如，要将日期设置为2023年5月15日，时间设置为14:30:00，可以运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo timedatectl set-time &quot;2023-05-15 14:30:00&quot;</span><br></pre></td></tr></table></figure><p><code>timedatectl</code>命令还提供其他与时间相关的设置和管理功能，如设置时区、启用/禁用网络时间同步等。</p></li><li><p>网络校时</p><ul><li><p>手动网络校时</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ntpdate &lt;时间服务器&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>自动网络校时，使用NTP等软件可以自动校时，但是会开几个端口，占用一些资源。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install ntp</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用<code>hwclock</code>命令设置硬件时钟（RTC）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hwclock --set --date=&quot;YYYY-MM-DD HH:MM:SS&quot;</span><br><span class="line">sudo hwclock --hctosys         # 将硬件时钟同步到系统时钟</span><br></pre></td></tr></table></figure><p>先使用第一行命令将硬件时钟设置为指定日期和时间，然后使用第二行命令将硬件时钟同步到系统时钟。</p><p>请注意，<code>hwclock</code>命令需要超级用户（root）权限。</p></li></ol><p>语系设置</p><p>防火墙简易设置</p><ul><li>服务：一般来说，如果你的 Linux server 是作为 Internet 的服务器，提供的是比较一般<br>的服务，那么只要处理“服务”项目即可。默认你的服务器已经提供了 ssh 与 dhcpv6-<br>client 的服务端口喔！<br>端口：如果你提供的服务所启用的端口并不是正规的端口，举例来说，为了玩 systemd<br>与 SELinux 我们曾经将 ssh 的端口调整到 222 ，同时也曾经将 ftp 的端口调整到 555 对<br>吧！那如果你想要让人家连进来，就不能只开放上面的“服务”项目，连这个“端口”的地方<br>也需要调整才行！另外， 如果有某些比较特别的服务是 CentOS 默认没有提供的，所<br>以“服务”当然也就没有存在！这时你也可以直接通过端口来搞定它！<br>丰富规则（rich rule）：如果你有“整个网域”需要放行或者是拒绝的时候，那么前两个项<br>目就没有办法适用， 这时就得要这个项目来处理了。不过鸟哥测试了 7.1 这一版的设<br>置，似乎怪怪的～因此，下面我们会以 firewall-cmd 来增加这一个项目的设置。<br>接口：就是这个界域主要是针对哪一个网卡来做规范的意思，我们只有一张网卡，所以<br>当然就是 eth0 啰！</li></ul><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><p>CentOS使用yum管理，Ubuntu使用RPM管理</p><h2 id="RPM-RedHat-Package-Manager"><a href="#RPM-RedHat-Package-Manager" class="headerlink" title="RPM(RedHat Package Manager)"></a>RPM(RedHat Package Manager)</h2><p>查询和检验</p><p><strong>目录配置</strong>：安装包存放位置</p><p>安装：<code>rpm -ivh 文件位置|网络地址</code></p><p>升级：<br>-Uvh    没有安装，安装新软件<br>-Fvh    没有安装，不升级</p><p><strong>查询</strong>  位置：/var/lib/rpm/<br><code>rpm -qa|grep xxx</code></p><p>i686、i386表示32位系统，noarch：通用</p><p>RPM 验证与数位签章(Verify/signature)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -Va </span><br><span class="line">rpm -V已安装的软体名称</span><br><span class="line">rpm -Vp某个RPM档案的档名</span><br><span class="line">rpm -Vf在系统上面的某个档案</span><br></pre></td></tr></table></figure><p> RPM 卸载与重建资料库(erase/rebuilddb)</p><p>找出与pam有关的软件名称，并尝试移除pam这个软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep pam</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>列出所有可更新的软件清单命令：<strong>sudo apt update</strong></li><li>升级软件包：<strong>sudo apt upgrade</strong></li><li>列出可更新的软件包及版本信息：<strong>apt list –upgradeable</strong></li><li>升级软件包，升级前先删除需要更新软件包：<strong>sudo apt full-upgrade</strong></li><li>安装指定的软件命令：<strong>sudo apt install <package_name></strong></li><li>安装多个软件包：<strong>sudo apt install <package_1> <package_2> <package_3></strong></li><li>更新指定的软件命令：<strong>sudo apt update <package_name></strong></li><li>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：<strong>sudo apt show <package_name></strong></li><li>删除软件包命令：<strong>sudo apt remove <package_name></strong></li><li>清理不再使用的依赖和库文件: <strong>sudo apt autoremove</strong></li><li>移除软件包及配置文件: <strong>sudo apt purge <package_name></strong></li><li>查找软件包命令： <strong>sudo apt search <keyword></strong></li><li>列出所有已安装的包：<strong>apt list –installed</strong></li><li>列出所有已安装的包的版本信息：<strong>apt list –all-versions</strong></li></ul><h2 id="YUM-Yellow-dog-Updater"><a href="#YUM-Yellow-dog-Updater" class="headerlink" title="YUM(Yellow dog Updater)"></a><strong>YUM(Yellow dog Updater)</strong></h2><p><strong>查找</strong>：yum [list|info|search|provides|whatprovides] 参数</p><p><strong>安装/升级功能</strong>：yum [install|update] 软体</p><p><strong>卸载</strong>：yum [remove] 软体</p><p>设置yum映射站：vim /etc/yum.repos.d/CentOS-Base.repo</p><h3 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h3><ol><li><p>直接下载<code>repo</code>文件，放到<code>/etc/yum.repos.d</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/yum.repos.d/mongodb-org-6.0.repo</span><br></pre></td></tr></table></figure></li><li><p>下载<code>rpm</code>文件，命令行安装</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh mysql57-community-release-el7-9.noarch.rpm # 生成repo文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Shell简介"><a href="#Shell简介" class="headerlink" title="Shell简介"></a>Shell简介</h1><p>壳程序（shell）是能够操作应用程序的接口</p><p>合法shell可以在/etc/shells查看</p><p>bash shell的优点：</p><ul><li>history</li><li>命令和文件补全（tab）</li><li>别名</li><li>脚本</li><li>万用字符</li></ul><p>查询指令是否为 Bash shell 的内置命令： type</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>echo，取用变量，注意要加上<code>$</code>符</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;PATH&#125;</span> <span class="comment"># 推荐</span></span><br></pre></td></tr></table></figure></li><li><p>=，设置变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=VBird<span class="string">&#x27;s name</span></span><br><span class="line"><span class="string">PATH=$&#123;PATH&#125;:/home/bin # 扩增</span></span><br><span class="line"><span class="string">unset myname”</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>使用命令行设置，只会作用于<strong>当前终端</strong></p><ul><li>set 观察所有变量 （含环境变量与自订变量）</li><li>export 把自定义变量变成环境变量</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">env <span class="comment"># 列出所有的环境变量；</span></span><br><span class="line"><span class="built_in">export</span> <span class="comment"># 也能列出所有的环境变量，另外还可添加环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> <span class="comment"># echo $PATH 用于列出变量PATH的值，里面包含了已添加的目录。</span></span><br><span class="line"><span class="comment"># 加到PATH末尾</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/path/to/your/dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加到PATH开头</span></span><br><span class="line"><span class="built_in">export</span> PATH=/path/to/your/dir:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> VAR_NAME=value</span><br></pre></td></tr></table></figure><p>配置文件</p><ul><li>/etc/profile<br>这是系统整体的设置（所有用户），你最好不要修改这个文件；</li><li>~/.bash_profile 或 ~/.bash_login 或 ~/.profile<br>属于使用者个人设置，你要改自己的数据，就写入这里！</li><li>source ：读入环境配置文件的指令（使配置文件生效）</li></ul><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><ul><li><p>alias</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias lm=&#x27;ls -al &amp;#124; more&#x27;</span><br></pre></td></tr></table></figure></li><li><p>unalias</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unalias</span> lm</span><br></pre></td></tr></table></figure></li><li><p>history，显示最近1000条</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!number <span class="comment"># 执行第几条指令的意思</span></span><br><span class="line">!<span class="built_in">command</span> <span class="comment"># 由最近的指令向前搜寻“指令串开头为 command”的那个指令，并执行</span></span><br><span class="line">!! <span class="comment"># 执行上一个指令（相当于按↑按键后，按 Enter）</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="基本bash-shell命令"><a href="#基本bash-shell命令" class="headerlink" title="基本bash shell命令"></a>基本bash shell命令</h2><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sync 内存数据同步到磁盘，关机和重启前使用</span><br><span class="line"></span><br><span class="line">shutdown 关机</span><br><span class="line">shutdown -h now 立即关机</span><br><span class="line">shutdown -h 1:1分钟关机</span><br><span class="line">shutdown -r now :立即重启</span><br><span class="line"></span><br><span class="line">-t sec：-t 后面加秒数，几秒后关机</span><br><span class="line">-k：只是发送警告消息</span><br><span class="line">-r：将系统服务停掉后就重启</span><br><span class="line">-h：将系统服务停掉后就关机</span><br><span class="line">-n：不经过init程序，直接以shutdown功能关机</span><br><span class="line">-f：关机并开机后，强制略过fsck磁盘检查</span><br><span class="line">-F：系统重启之后，强制进行fsck磁盘检查</span><br><span class="line">-c：取消已经在进行的shutdown命令内容</span><br><span class="line"></span><br><span class="line">reboot ; 重启</span><br><span class="line"></span><br><span class="line">halt ; poweroff; 关机</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ctrl+alt+f1f2f3 切换不同虚拟终端</span><br><span class="line">ctrl+c <span class="comment"># 中止命令</span></span><br><span class="line">init 0<span class="comment"># 关键</span></span><br><span class="line">who  <span class="comment"># 当前用户</span></span><br><span class="line">whoami <span class="comment"># 当前用户及权限</span></span><br><span class="line"></span><br><span class="line">date <span class="comment"># 月日时分年</span></span><br><span class="line">hwclock <span class="comment"># -s 同步硬件 -w 同步系统</span></span><br><span class="line"> </span><br><span class="line">cal <span class="comment"># 日历</span></span><br><span class="line">cal 7 2001</span><br><span class="line"> </span><br><span class="line">clear / ctrl+l <span class="comment"># 清屏 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取帮助</span></span><br><span class="line">man su</span><br><span class="line">su --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Linux版本</span></span><br><span class="line"><span class="comment"># 1.查看系统版本信息的命令 </span></span><br><span class="line">lsb_release -a</span><br><span class="line"><span class="comment"># (使用命令时提示command not found,需要安装yum install redhat-lsb -y)</span></span><br><span class="line"></span><br><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure><h1 id="文件管理和文件系统"><a href="#文件管理和文件系统" class="headerlink" title="文件管理和文件系统"></a>文件管理和文件系统</h1><h2 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h2><ul><li><p><strong>ls</strong>：列出目录内容。</p></li><li><p><strong>file</strong>：确定文件类型。</p></li><li><p><strong>less</strong>：查看文件内容，more的替换（less is more），可以前后翻页。</p></li><li><p><strong>cd</strong> （change directory， 变换目录） </p></li><li><p><strong>pwd</strong> （显示当前所在目录）<br>-p 显示出确切路径</p></li><li><p><strong>cp</strong>：复制文件和目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp item1 item2 <span class="comment"># 复制文件</span></span><br><span class="line">cp item… directory <span class="comment">#复制到目录</span></span><br></pre></td></tr></table></figure></li><li><p><strong>mv</strong>：移动或重命名文件和目录，使用与cp类似。</p></li><li><p><strong>mkdir</strong> （创建新目录） <code>mkdir directory…</code></p><ul><li>-m 设定权限</li><li>-p 递归建立所需目录（不使用-p选项需要一层一层地创建，如/home/bird/testing/test1）</li></ul></li><li><p><strong>rmdir</strong> （删除”空”的目录）<br>-r：删除此目录下的所有文件，但是此目录不删除</p></li><li><p><strong>rm</strong>：移除文件和目录。</p></li></ul><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl 显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li><li>od 以二进制的方式读取文件内容！</li></ul><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><ul><li>which （寻找“可执行文件”）</li><li>whereis （由一些特定的目录中寻找文件文件名）</li><li>locate / updatedb</li><li>find</li></ul><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>Linux一般将文件可存取的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 等权限。</p><p>文件类型有以下几种，使用<code>ls -l</code>查看</p><ul><li>[ d ]表示目录，例如上表文件名为“.config”的那一行；</li><li>[ - ]表示文件，例如上表文件名为“initial-setup-ks.cfg”那一行；</li><li>[ l ]表示为链接文件（link file）；</li><li>[ b ]表示为设备文件里面的可供储存的周边设备（可随机存取设备）；</li><li>[ c ]表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设<br>备）。</li></ul><p>修改文件和目录权限</p><ul><li><p>chgrp：更改文件所属群组，群组必须在/etc/group中存在</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp users initial-setup-ks.cfg</span><br></pre></td></tr></table></figure></li><li><p>chown：更改文件所有者。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown bin initial-setup-ks.cfg</span><br><span class="line">chown root:root initial-setup-ks.cfg</span><br><span class="line">chown .root <span class="comment"># 更改群组</span></span><br></pre></td></tr></table></figure></li><li><p>chmod：更改文件的权限。</p><ul><li>数字类型：&gt; r:4 &gt; w:2 &gt; x:1</li><li>符号类型：使用<code>+,-,=</code>三个符号表示增加、除去和设置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 .bashrc</span><br><span class="line">chmod u=rwx,go=rx .bashr</span><br><span class="line">chmod a+w .bashrc</span><br></pre></td></tr></table></figure></li></ul><p>对于文件和目录，权限有不同的意义：</p><table><thead><tr><th>类型</th><th>内容</th><th>r</th><th>w</th><th>x</th></tr></thead><tbody><tr><td>文件</td><td>详细数据 data</td><td>读到文件内容</td><td>修改文件内容</td><td>执行文件内容</td></tr><tr><td>目录</td><td>文件名</td><td>读取文件名</td><td>修改文件名（创建、修改文件和目录）</td><td>进入该目录的权限</td></tr></tbody></table><p>对于开放资源，目录要设置r和w的权限，不能只设置r，否则无法获取目录下的资源。</p><h2 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h2><p>关于Linux的目录可以参考一些规范。</p><p>Filesystem Hierarchy Standard（FHS）</p><p>Linux Standard Base（LSB）</p><p>记录文件</p><ul><li>/etc/passwd</li><li>/etc/shadow</li><li>/etc/group</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><h2 id="磁盘和文件系统管理"><a href="#磁盘和文件系统管理" class="headerlink" title="磁盘和文件系统管理"></a>磁盘和文件系统管理</h2><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p>磁盘状态</p><ul><li>df：列出文件系统的整体磁盘使用量；</li><li>du：评估文件系统的磁盘使用量（常用在推估目录所占容量）</li></ul><p>实体链接与符号链接</p><p><strong>in</strong>：创建硬链接和符号链接。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln file link <span class="comment"># 硬链接</span></span><br><span class="line">ln –s item link <span class="comment"># 符号链接</span></span><br></pre></td></tr></table></figure><p>磁盘的分区、格式化、检验与挂载</p><ul><li>lsblk 列出系统上的所有磁盘列表</li><li>blkid 列出设备的 UUID 等参数</li><li>parted 列出磁盘的分区表类型与分区信息</li></ul><p>分区</p><ul><li>gdisk</li><li>partprobe 更新 Linux 核心的分区表信息</li><li>fdisk</li></ul><p>格式化</p><p>检验</p><ul><li>xfs_repair 处理 XFS 文件系统</li><li>fsck.ext4 处理 EXT4 文件系统</li></ul><p>挂载</p><ul><li>mount</li><li>umount （将设备文件卸载）</li></ul><p>磁盘/文件系统参数</p><ul><li>mknod</li><li>xfs_admin 修改 XFS 文件系统的 UUID 与 Label name</li><li>tune2fs 修改 ext4 的 label name 与 UUID<br>鸟哥的 Linux 私房菜：基础学习篇 第四版<br>7.3</li></ul><p>开机挂载</p><p>内存交换空间（swap）之创建</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>常见的文件系统有以下几种</p><ul><li>Windows<ul><li>FAT</li><li>NTFS</li></ul></li><li>macOS</li><li>Linux<ul><li>Ext2 （Linux second extended<br>file system, ext2fs）</li></ul></li></ul><p>Linux 文件系统</p><p>EXT2</p><ul><li>superblock：记录此 filesystem 的整体信息，包括inode/block的总量、使用量、剩余量，<br>以及文件系统的格式与相关信息等；</li><li>inode：记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的 block<br>号码；</li><li>block：实际记录文件的内容，若文件太大时，会占用多个 block 。</li></ul><p>EXT2</p><p>EXT2（第二扩展文件系统）是Linux操作系统最早采用的一种文件系统，是一种基于磁盘块的文件系统。它是Linux中最古老、最稳定、最成熟的文件系统之一，被广泛用于许多Linux发行版中。</p><p>EXT2文件系统支持大多数常见的Unix文件系统功能，如硬链接、软链接、文件权限、访问控制、文件系统日志等。它将文件系统的数据和元数据分别存储在不同的区域，可以有效提高文件系统的性能和稳定性。</p><p>EXT2文件系统的最大文件大小为2TB，最大文件系统大小为32TB。它使用块组来组织文件系统的布局，每个块组包含一个超级块、块位图、inode位图和数据块。块组大小可以根据文件系统大小和性能需求进行配置。</p><p>虽然EXT2文件系统已经相对落后，但它仍然在某些特殊的应用场景中被使用，比如嵌入式设备、老旧服务器等。同时，它也是EXT3和EXT4文件系统的基础，这两种文件系统在功能和性能上都对EXT2进行了改进和增强。</p><p>EXT2（第二扩展文件系统）是Linux操作系统最早采用的一种文件系统，是一种基于磁盘块的文件系统。它将文件系统的数据和元数据分别存储在不同的区域，可以有效提高文件系统的性能和稳定性。</p><p>EXT2文件系统的数据分为两类：文件数据和元数据。文件数据指的是文件中的实际内容，包括文件的文本、图片、视频、音频等等。元数据则是描述文件的数据，包括文件的大小、创建时间、修改时间、访问权限等等。EXT2文件系统将文件数据和元数据分别存储在不同的磁盘块中，以提高文件系统的性能和稳定性。</p><p>EXT2文件系统采用了inode（索引节点）的机制来管理文件，每个文件都有一个唯一的inode号码，用于描述文件的元数据信息。inode中存储了文件的类型、大小、权限、所有者、创建时间、修改时间、链接数等信息，同时也包含了指向文件数据的指针，使得文件系统可以快速地访问文件数据。</p><p>EXT2文件系统还采用了块位图的机制来管理磁盘块的分配和释放。每个块组都有一个块位图，用于记录该块组中每个磁盘块的使用情况。块位图中的每个位代表一个磁盘块，如果该位为1，则表示该块已被分配给某个文件，否则表示该块未被分配或已被释放。</p><p>EXT2文件系统还提供了文件系统日志功能，可以记录文件系统的操作，包括文件的创建、修改、删除等，以提高文件系统的可靠性和稳定性。</p><p>总之，EXT2文件系统采用了一系列的机制和算法来管理文件和磁盘块，使得文件系统具有高效、可靠、稳定的特点。虽然现在已经有了EXT3、EXT4等更先进的文件系统，但EXT2仍然在一些特殊的应用场景中得到广泛应用。</p><p>EXT3</p><p>EXT3是Linux操作系统上一种常用的日志文件系统，是EXT2文件系统的升级版本。EXT3文件系统在保留EXT2的文件和目录结构的基础上，增加了日志功能，可以提高文件系统的性能和稳定性。</p><p>EXT3文件系统的日志功能可以记录文件系统的操作，包括文件的创建、修改、删除等，以防止文件系统崩溃或断电导致的数据丢失或损坏。当文件系统遇到意外的断电或崩溃时，可以通过日志来恢复文件系统，保证文件系统的完整性和稳定性。</p><p>EXT3文件系统的索引节点（inode）的结构和EXT2类似，但它增加了一个状态位，用于标记文件是否是删除状态。当文件被删除时，该状态位会被设置，但文件的数据和元数据并不会被立即删除，只有在磁盘空间紧张时，文件的数据和元数据才会被真正删除。</p><p>EXT3文件系统还提供了许多其他的功能，例如支持大文件（最大可达2TB），支持日志和数据分离、支持热插拔设备等等。EXT3文件系统相对于EXT2文件系统来说，性能更加稳定、可靠，更适合作为生产环境下的文件系统。</p><p>EXT4</p><p>EXT4是Linux操作系统上一种常用的日志文件系统，是EXT3文件系统的升级版本。与EXT3相比，EXT4文件系统在性能和可靠性方面都有了一定的提升。</p><p>EXT4文件系统在保留EXT3的日志功能的基础上，对文件系统的管理进行了优化。EXT4使用了更加高效的索引节点（inode）布局，支持更大的文件和更快的文件系统检索。同时，EXT4还支持更高效的块分配算法，可以减少磁盘碎片和提高磁盘空间的利用率。</p><p>EXT4文件系统还支持更好的错误处理能力，可以在文件系统发生错误时，自动进行修复和恢复。EXT4还提供了一些新的特性，例如支持多种块大小、支持延迟分配、支持extents等。</p><p>总的来说，EXT4是一种高性能、高可靠性、高可扩展性的文件系统，适用于需要处理大量数据和高并发访问的场景，是当前Linux操作系统下最为常用的文件系统之一。</p><p>XFS</p><p>XFS是一种高性能、高扩展性的文件系统，最初由SGI公司开发，现已被广泛应用于Linux等操作系统中。</p><p>XFS的主要特点是高性能、高可扩展性和强大的容错能力。它支持非常大的文件系统和大文件，可以扩展到数百万甚至数十亿个文件，支持多达9EB的文件系统大小，支持实时在线扩容，非常适合处理海量数据。同时，XFS还具有强大的容错能力，即使在发生系统崩溃或断电等异常情况时，XFS也可以很快地恢复文件系统。</p><p>XFS还支持许多高级特性，如快照、透明压缩、延迟分配、文件系统元数据日志、在线文件系统检查和修复等，这些特性可以提高系统的性能和可靠性，并减少管理员的工作负担。</p><p>XFS的高性能主要得益于其基于B+树的文件索引结构，以及采用了延迟写技术，将写操作合并在一起，减少磁盘I/O操作。同时，XFS还支持异步I/O和多线程，可以充分利用系统的多核CPU和多个磁盘并行处理数据，提高系统的吞吐量和响应速度。</p><p>总之，XFS是一种高性能、高可扩展性、高容错性的文件系统，适用于处理大量数据和高并发访问的场景。</p><h1 id="磁盘配额（Quota）与进阶文件系统管理"><a href="#磁盘配额（Quota）与进阶文件系统管理" class="headerlink" title="磁盘配额（Quota）与进阶文件系统管理"></a>磁盘配额（Quota）与进阶文件系统管理</h1><p>磁盘阵列 （RAID） </p><p>逻辑卷轴文件系统 （LVM）</p><h1 id="压缩、打包和备份"><a href="#压缩、打包和备份" class="headerlink" title="压缩、打包和备份"></a>压缩、打包和备份</h1><h2 id="文件压缩程序"><a href="#文件压缩程序" class="headerlink" title="文件压缩程序"></a>文件压缩程序</h2><h3 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h3><p>压缩和解压缩文件工具，Linux的主要压缩指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gzip foo.txt</span><br><span class="line">gunzip foo.txt.gz </span><br><span class="line"></span><br><span class="line">gzip -c 345.txt &gt; 345.txt.gz  <span class="comment"># 保留原文件压缩</span></span><br><span class="line">gunzip -c 345.txt.gz &gt; 234.txt <span class="comment"># 保留原文件解压</span></span><br><span class="line"></span><br><span class="line">gzip * <span class="comment"># 压缩目录下的所有文件</span></span><br><span class="line">gzip -dv * <span class="comment"># 解压并显示详细信息</span></span><br><span class="line">gunzip -c foo.txt | less <span class="comment"># 查看某个压缩文本文件的内容</span></span><br></pre></td></tr></table></figure><h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><p>块排序文件压缩工具，牺牲速度以换取高质量的数据压缩。<strong>支持gzip的所有选项</strong>，区别是压缩级别选项不同，另外，解压缩bzip2压缩文件的专用工具是bunzip2和bzcat命令。bzip2还配有专门的bzip2recover命令，该命令用于恢复损坏的.bz2文件。</p><h2 id="文件归档程序"><a href="#文件归档程序" class="headerlink" title="文件归档程序"></a>文件归档程序</h2><p>归档是一个聚集众多文件并将它们组合为一个大文件的过程，它通常作为系统备份的一部分，而且通常也用于将旧数据从某个系统移到某些长期存储设备的情况下。</p><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>磁带归档工具。</p><ul><li>以.tar结尾文件，用普通的tar命令归档的文件</li><li>以.tgz结尾文件，gzip归档的文件</li></ul><p>操作模式</p><ul><li>-c –create <strong>创建</strong>文件和/或目录列表的归档文件</li><li>-x, –extract 从归档文件中提取文件</li><li>-t, –list列出归档文件的内容</li><li>-r, –append 在归档文件末尾追加内容</li><li>-f, –file=ARCHIVE 指定文件名</li><li>-C, –directory=DIR 指定<strong>提取路径</strong></li><li>-v, –verbose 详细列出已处理的文件</li><li>-j, –bzip2 指定用<strong>bzip2</strong>归档</li><li>-J, –xz 指定用<strong>xz</strong>归档</li><li>-z, –gzip 指定用<strong>gzip</strong>归档</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar cf test.tar <span class="built_in">test</span></span><br><span class="line">tar xf test.tar <span class="comment"># 提取到当前位置</span></span><br><span class="line">tar xf test.tar -C target <span class="comment"># 提取到当前位置</span></span><br><span class="line">tar -xf foo.txt.tar -C ./target/ <span class="comment"># 提取到目标文件夹</span></span><br><span class="line">tar tf test.tar <span class="comment"># 归档并列出归档文件的内容</span></span><br></pre></td></tr></table></figure><p>tar命令创建归档文件时通常辅助以find命令。首先使用find命令查找到需要被归档的文件，然后使用tar对这些文件进行归档，实例如下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find playground -name <span class="string">&#x27;file-A&#x27;</span> -<span class="built_in">exec</span> tar rf playground.tar <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> <span class="string">&#x27;+&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可使用标准输出</span></span><br><span class="line">find playground -name <span class="string">&#x27;file-A&#x27;</span> | tar cf - --files-from=- | gzip</span><br><span class="line">&gt; playground.tgz</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>既是文件压缩工具也是文件归档工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip -r playground.zip playground</span><br><span class="line">unzip ../playground.zip</span><br></pre></td></tr></table></figure><p>需要注意的是：如果指定的归档文件已经存在，那么zip仅仅只会更新而不会取而代之。这意味着原来存在的归档文件会保留下来，只是增加了一些新文件，原有匹配文件则被替换。</p><h2 id="文件同步程序rsync"><a href="#文件同步程序rsync" class="headerlink" title="文件同步程序rsync"></a>文件同步程序rsync</h2><p>快速检测到本地和远程系统上两个目录之间的不同，从而以最少数量的复制动作以完成两个目录之间的同步。</p><p>调用方式：<code>rsync options source destination</code></p><p>source和destination的目标</p><ul><li>一个本地文件或目录；</li><li>一个远程文件或目录，形式为[user@]host:path；</li><li>一个远程rsync服务器，由rsync://[user@]host[:port]/path指定。</li></ul><h1 id="网络和远程管理"><a href="#网络和远程管理" class="headerlink" title="网络和远程管理"></a>网络和远程管理</h1><p>网络和远程管理</p><p>熟悉Linux网络服务，如SSH、FTP、HTTP、DNS、DHCP等，能够配置网络回环、网卡和VIP等网络参数<br>熟悉Linux系统的远程管理和监测，如ssh、telnet等远程管理工具，以及netstat、tcpdump等网络监测工具</p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>不同的Linux发行版可能会使用不同的网络管理工具和配置文件。以下是一些主要的Linux发行版的网络管理工具和配置文件：</p><ul><li>Ubuntu：Ubuntu使用Netplan作为网络管理工具，它的配置文件位于<code>/etc/netplan/</code>目录下，以<code>.yaml</code>为扩展名。</li><li>Debian：Debian使用<code>/etc/network/interfaces</code>文件来配置网络。</li><li>Fedora：Fedora使用NetworkManager作为网络管理工具，并使用<code>/etc/NetworkManager/system-connections/</code>目录下的文件来配置网络。</li><li>CentOS：CentOS使用<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>文件来配置网络。</li><li>Arch Linux：Arch Linux使用systemd-networkd和Netctl来管理网络，它们的配置文件位于<code>/etc/systemd/network/</code>和<code>/etc/netctl/</code>目录下。</li></ul><h3 id="NetworkManager"><a href="#NetworkManager" class="headerlink" title="NetworkManager"></a>NetworkManager</h3><p><a href="https://networkmanager.dev/">https://networkmanager.dev/</a></p><p>NetworkManager是目前最常见的默认网络管理工具。它是一个守护进程，可以在Linux系统上管理各种类型的网络连接，包括以太网、Wi-Fi、VPN和移动宽带等。 NetworkManager 提供了一个图形用户界面和一个命令行界面，让用户方便地配置和管理网络连接。</p><p>除了 NetworkManager 之外，还有一些其他的网络管理工具可供选择，例如 systemd-networkd、ifup 和 ConnMan 等。但是，这些工具使用的并不广泛，NetworkManager 仍然是最常见的默认网络管理工具之一。</p><h3 id="Netplan"><a href="#Netplan" class="headerlink" title="Netplan"></a>Netplan</h3><p>Netplan是Ubuntu 17.10及更高版本中的网络配置工具。它的目的是提供一种简单的方式来配置网络，特别是对于使用多个网络接口的服务器来说更为方便。它采用 YAML 格式的配置文件，可以轻松地定义网络接口、IP地址、DNS服务器和路由等。</p><p>Netplan 可以通过在 <code>/etc/netplan/</code> 目录中创建 YAML 文件来进行配置。每个文件定义了一组网络接口和相应的配置信息。例如，下面的示例配置文件定义了一个以太网接口，使用静态 IP 地址和 DNS 服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yamlCopy codenetwork:</span><br><span class="line">  version: 2</span><br><span class="line">  ethernets:</span><br><span class="line">    eth0:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses: [192.168.0.2/24]</span><br><span class="line">      gateway4: 192.168.0.1</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [8.8.8.8, 8.8.4.4]</span><br></pre></td></tr></table></figure><p>配置文件中的 <code>network</code> 部分指定了要进行配置的网络类型，本例中是以太网。<code>ethernets</code> 部分列出了要配置的所有以太网接口，本例中只有一个 <code>eth0</code> 接口。接口的配置选项包括静态或动态 IP 地址、DNS 服务器和路由等。</p><p>一旦配置文件创建好了，就可以使用 <code>netplan apply</code> 命令来应用配置更改。如果有多个配置文件，则会按字母顺序依次应用它们。如果出现错误，则会显示错误消息。</p><p>Netplan 是 Ubuntu 中的默认网络配置工具，并且可以在 Ubuntu Server 和 Desktop 版本中使用。</p><p>systemd-networkd</p><p>ifup</p><p>Network Scripts</p><p>Netctl</p><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>要配置CentOS的网络，可以按照以下步骤进行：</p><ol><li><p>打开终端或命令行界面，并以管理员身份登录系统。</p></li><li><p>编辑<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>文件（以eth0网卡为例），可以使用vi编辑器或nano等其他编辑器。</p></li><li><p>在文件中添加以下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">makefileCopy codeDEVICE=eth0</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=&lt;your IP address&gt;</span><br><span class="line">NETMASK=&lt;your netmask&gt;</span><br><span class="line">GATEWAY=&lt;your gateway IP&gt;</span><br><span class="line">DNS1=&lt;your primary DNS&gt;</span><br><span class="line">DNS2=&lt;your secondary DNS&gt;</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure></li><li><p>重新启动网络服务以使新的网络配置生效，可以执行以下命令：</p><ul><li><p>对于 CentOS 7及更高版本（使用systemd）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart network</span><br></pre></td></tr></table></figure></li><li><p>对于 CentOS 6及更低版本（使用init脚本）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network restart</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>在 CentOS 中，网络配置文件主要位于<code>/etc/sysconfig/network-scripts/</code>目录下。以下是常见的网络配置文件：</p><ol><li><code>/etc/sysconfig/network</code>：此文件包含全局网络配置参数，如主机名（<code>HOSTNAME</code>）和网关（<code>GATEWAY</code>）等。</li><li><code>/etc/sysconfig/network-scripts/ifcfg-&lt;interface&gt;</code>：此文件包含每个网络接口（例如<code>eth0</code>、<code>eth1</code>等）的配置信息。每个接口都有一个对应的文件，以<code>ifcfg-&lt;interface&gt;</code>的形式命名。例如，如果您的接口名是<code>eth0</code>，则配置文件名为<code>ifcfg-eth0</code>。在该文件中，您可以设置接口的IP地址（<code>IPADDR</code>）、子网掩码（<code>NETMASK</code>）、默认网关（<code>GATEWAY</code>）等。</li><li><code>/etc/sysconfig/network-scripts/ifcfg-lo</code>：此文件是本地回环接口（loopback interface）的配置文件。该接口通常用于本地通信，IP地址默认为<code>127.0.0.1</code>。</li><li><code>/etc/resolv.conf</code>：此文件包含DNS解析器的配置信息，指定用于解析主机名的DNS服务器。</li></ol><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>在 Ubuntu 中，网络配置文件主要位于<code>/etc/netplan/</code>目录下。以下是常见的网络配置文件：</p><ol><li><code>/etc/netplan/50-cloud-init.yaml</code>：这是由云初始化工具生成的默认网络配置文件。它包含有关网络接口和配置的信息。</li><li><code>/etc/netplan/*.yaml</code>：在某些情况下，可能会存在其他以<code>.yaml</code>为扩展名的网络配置文件。这些文件的名称可能会有所不同，但它们都遵循<code>.yaml</code>格式。</li></ol><p>您可以编辑这些文件来配置网络接口、IP地址、子网掩码、网关和DNS等网络参数。然后，您需要应用配置更改并重新加载网络配置。</p><ol start="3"><li>应用网络配置更改并重新加载网络配置，请执行以下命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><h2 id="检查、监测网络"><a href="#检查、监测网络" class="headerlink" title="检查、监测网络"></a>检查、监测网络</h2><ul><li><p>ping：向网络主机发送ICMP ECHO_REQUEST数据包。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping linuxcommand.org</span><br></pre></td></tr></table></figure></li><li><p>traceroute：显示数据包到网络主机的路由路径。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute slashdot.org</span><br></pre></td></tr></table></figure></li><li><p>netstat：显示网络连接、路由表、网络接口数据、伪连接以及多点传送成员等信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ie</span><br></pre></td></tr></table></figure></li><li><p>ifconfig: 显示或设置网络设备</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">ifconfig eth0 down <span class="comment">#关闭网卡</span></span><br><span class="line">ifconfig eth0 up <span class="comment"># 启动网卡</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改网络配置</span></span><br><span class="line">ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE <span class="comment"># 设置Mac地址</span></span><br><span class="line"><span class="comment"># 设置IP地址</span></span><br><span class="line"><span class="comment"># 设置ARP协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置MTU</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h2><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><p>采用FTP（文件传输协议）传输文件，<strong>交互式</strong>网络下载器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ftp fileserver</span><br><span class="line">anonymous <span class="comment"># 匿名登陆</span></span><br><span class="line"><span class="comment"># 输入密码</span></span><br><span class="line"><span class="built_in">cd</span> pub/cd_images/Ubuntu-8.04 <span class="comment"># 进入服务器文件夹 </span></span><br><span class="line">lcd Desktop <span class="comment"># 进入本地桌面</span></span><br><span class="line">get ubuntu-8.04-desktop-i386.iso <span class="comment"># 下载文件</span></span><br></pre></td></tr></table></figure><h3 id="lftp"><a href="#lftp" class="headerlink" title="lftp"></a>lftp</h3><p>改善后的文件传输命令，更多额外的便利功能，包括多协议支持（HTTP）、下载失败时自动重新尝试、后台进程支持、Tab键完成文件名输入等许多其他的功能。</p><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>非交互式网络下载器，既可以用于从网站上下载内容也可以<br>用于从FTP站点下载，单个文件、多个文件甚至整个网站都可以被下载。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://linuxcommand.org/index.php</span><br></pre></td></tr></table></figure><p>许多参数选项支持递归下载、后台文件下载（允许下线的情况下继续下载）以及继续下载部分被下载的文件等操作。</p><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>即client URL，用来请求 Web 服务器。</p><ol><li><p>标头相关</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -A <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span> https://google.com <span class="comment"># 指定User-Agent</span></span><br><span class="line">curl -e <span class="string">&#x27;https://google.com?q=example&#x27;</span> https://www.example.com <span class="comment"># 设置Referer</span></span><br><span class="line">curl -H <span class="string">&#x27;Accept-Language: en-US&#x27;</span> https://google.com <span class="comment"># 设置任意标头</span></span><br><span class="line">curl -i https://www.example.com <span class="comment"># 打印response的header</span></span><br></pre></td></tr></table></figure></li><li><p>Cookie相关</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl https://www.example.com <span class="comment"># 默认get请求</span></span><br><span class="line">curl -b cookies.txt https://www.google.com <span class="comment"># 发送cookie</span></span><br><span class="line">curl -c cookies.txt https://www.google.com <span class="comment"># 将返回的cookie写入文件</span></span><br></pre></td></tr></table></figure></li><li><p>请求相关</p><ul><li><p>post相关</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -d<span class="string">&#x27;login=emma＆password=123&#x27;</span>-X POST https://google.com/login <span class="comment"># 发送 POST 请求的数据体，省略 -X选项</span></span><br><span class="line">curl --data-urlencode <span class="string">&#x27;comment=hello world&#x27;</span> https://google.com/login <span class="comment"># 等同于-d 区别在于会自动将发送的数据进行 URL 编码 此处的空格需要进行url编码</span></span><br><span class="line">curl -G -d <span class="string">&#x27;q=kitties&#x27;</span> -d <span class="string">&#x27;count=20&#x27;</span> https://google.com/search <span class="comment"># -G 构造 URL 的查询字符串</span></span><br></pre></td></tr></table></figure></li><li><p>其他</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com <span class="comment"># 指定 HTTP 请求的代理</span></span><br><span class="line">curl -X POST https://www.example.com <span class="comment"># 指定 HTTP 请求的方法。</span></span><br><span class="line">curl -k https://www.example.com <span class="comment"># 跳过 SSL 检测。</span></span><br><span class="line">curl -L -d <span class="string">&#x27;tweet=hi&#x27;</span> https://api.twitter.com/tweet <span class="comment"># 跟随服务器的重定向 curl 默认不跟随重定向</span></span><br><span class="line">curl --limit-rate 200k https://google.com <span class="comment"># 限制 HTTP 请求和回应的带宽 模拟慢网速的环境</span></span><br><span class="line">curl -o example.html https://www.example.com <span class="comment"># 将服务器的回应保存成文件 等同于wget命令</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="远程通信"><a href="#远程通信" class="headerlink" title="远程通信"></a>远程通信</h2><p>ssh：OpenSSH（SSH协议的免费开源实现）版的SSH客户端（远程系统登录命令）。</p><p>scp：secure copy 的缩写，是远程复制文件命令。</p><p>sftp：secure file transfer program的缩写，安全文件传输程序。</p><p>Windows SSH：使用<a href="https://www.putty.org/">PuTTY</a></p><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><h1 id="安全管理和系统监控"><a href="#安全管理和系统监控" class="headerlink" title="安全管理和系统监控"></a>安全管理和系统监控</h1><p>Linux安全和系统监控</p><p>熟悉Linux系统安全管理基本原则，能够使用如iptables等Linux系统相关的安全管理工具<br>熟悉Linux系统的监控管理，能够使用常用系统资源监控工具，如sar、top、iostat、vmstat等</p><p>账号管理</p><p>文件使用UID和GID判断拥有者和拥有群组</p><ul><li>id：显示用户身份标识。</li><li>umask：设置文件的默认权限。</li><li>su：以另一个用户的身份运行shell。<ul><li>-l 使用目标用户的环境</li></ul></li><li>sudo：以另一个用户的身份来执行命令。</li><li>passwd：更改用户密码。</li></ul><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><ul><li><p>ps：显示当前所有进程的运行情况。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps axu</span><br></pre></td></tr></table></figure></li><li><p>top：<strong>实时显示</strong>当前所有任务的资源占用情况。</p></li><li><p>jobs：列出所有活动作业的状态信息。</p></li></ul><h3 id="控制进程"><a href="#控制进程" class="headerlink" title="控制进程"></a>控制进程</h3><h4 id="中断进程"><a href="#中断进程" class="headerlink" title="中断进程"></a>中断进程</h4><p>在终端里按下<strong>Ctrl-C</strong>键将会中断（interrupt）一个程序，它意味着我们委婉地<strong>请求程序结束</strong>。许多（但不是所有）命令行程序都可以使用这种方法来实现中断。</p><h4 id="使进程后台运行"><a href="#使进程后台运行" class="headerlink" title="使进程后台运行"></a>使进程后台运行</h4><p>在命令后面加上和号字符（&amp;）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit &amp;</span><br></pre></td></tr></table></figure><h4 id="使进程回到前台运行"><a href="#使进程回到前台运行" class="headerlink" title="使进程回到前台运行"></a>使进程回到前台运行</h4><p>使用fg设置在前台中运行作业，要用到作业编号（jobspec选项），一般先用jobs命令查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fg</span> %1</span><br></pre></td></tr></table></figure><h4 id="停止暂停进程"><a href="#停止暂停进程" class="headerlink" title="停止暂停进程"></a>停止暂停进程</h4><p>按下Ctrl-Z键，程序将会暂停，此时可以用fg命令设置在前台中运行作业，也可以用bg命令设置在后台中运行作业。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bg</span> %1</span><br></pre></td></tr></table></figure><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>kill：发送信号给某个进程。</p><ul><li>1 HUP 挂起信号。这是美好的过去留下的痕迹，当时通过电话线和调制解调器来把终端和远端计算机连接在一起。该信号用来指示程序控制终端已被“挂起”。该信号的效果通过关闭终端会话的方式来表现。运行在终端上的前台程序收到该信号后将终止。该信号也被很多后台程序用来进行重新初始化。这就意味着，当一个后台进程接收到该信号时，它将重启并且重新读取它的配置文件。Apache Web服务器就是后台进程使用HUP信号重新初始化的一个例子。</li><li>2 INT 中断信号。执行效果和在终端按下Ctrl-C键的效果一样。通常用来<strong>终止</strong>一个程序</li><li>9 KILL 杀死信号。该信号比较特殊。鉴于程序可以选择不同的方式来处理发送过来的信号，包括忽略所有的这些信号，KILL信号将不会真正意义上地被发送到目标程序。而是内核宁愿立即终止了该进程。当进程以这种方式被终止时，它将<strong>没有机会对它自己进行“清理”或者对当前工作进行保存</strong>。考虑到这个原因，KILL信号只能当作其他的终端信号都执行失败的情况下的<strong>最后选择</strong>。</li><li>15 TERM 终止信号。这是kill命令<strong>默认</strong>发送的信号类型。如果程序仍然有足够的“活力”（alive enough）来接收信号，那么它将被<strong>终止</strong>。</li><li>18 CONT 继续运行信号。恢复之前接受了STOP信号的进程。</li><li>19 STOP 暂停信号。该信号将使进程暂停，而不是终止。和KILL信号类似，该信号不会被发送给目标进程，因此它<strong>不能被忽略</strong>。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -KILL 73927</span><br><span class="line"><span class="built_in">kill</span> -l <span class="comment"># 查看更多信号</span></span><br></pre></td></tr></table></figure><p>kill命令准确地说并不是“杀死”进程，而是给进程发送信号（signal）。</p><p>在按下Ctrl-C键的情况下，它将发送一个称为INT（中断，Interrupt）的信号；在按下Ctrl-Z的情况下，它将发送一个称为TSTP（终端暂停，Terminal Stop）的信号。</p><p>没有指定信号，那么默认发送TERM（终止，Terminate）信号。</p><p>killall：可以给<strong>指定程序</strong>或者<strong>指定用户名</strong>的多个进程发<br>送信号。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall [-u user] [-signal] name...</span><br></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>pstree 以树状的模式输出进程列表，该模式显示了进程间的父/子关系</li><li>vmstat 输出系统资源使用情况的快照，包括内存，交换空间和磁盘I/O。如果想要持续查看输出，可以在命令后面加上一个间隔时间（以秒为单位），命令将按照间隔时间来动态更新显示的内容（比如，vmstat 5）。按下Ctrl-C键可以终止输出</li><li>xload 用来绘制显示系统时间负载情况图形的一种图形化界面程序</li><li>tload 类似于xload程序，但是图形是在终端上绘制。按下Ctrl-C键终止输出</li></ul><h1 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h1><p>Linux调优</p><p>了解Linux系统性能调优方法，根据系统负载、资源占用率等调整系统相关参数，如内核参数、进程调度参数等<br>能够使用性能监测工具，如perf、strace、gdb、lsof等，分析系统瓶颈并进行调优操作</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文写作篇</title>
      <link href="/2021/10/02/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E7%AF%87/"/>
      <url>/2021/10/02/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul><li>在线环境：<a href="https://www.overleaf.com/">https://www.overleaf.com/</a></li><li>Texlive：<a href="https://www.tug.org/texlive/">https://www.tug.org/texlive/</a></li></ul><span id="more"></span><h1 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h1><p>命令<code>\documentclass</code>用于设置文档的基本属性，如文档类型，纸张大小等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[12pt, letterpaper]&#123;article&#125;</span><br></pre></td></tr></table></figure><ul><li>article，排版科学期刊、 演示文档、 短报告、 程序文档、 邀请函……</li><li>book，排版书籍</li><li>report，排版多章节长报告、 短篇书籍、 博士论文……</li><li>letter，排版信件</li><li>proc，一个基于 article 的会议文集类</li><li>minimal，非常小的文档类。 只设置了页面尺寸和基本字体。 主要用来查错。</li><li>slides，排版幻灯片，很少使用。该文档类使用大号 sans serif 字体。 也可以选用 FoilTEXa 来得到相同的效果。</li></ul><h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125; % 文档类型，定义纸张大小等</span><br><span class="line">%%%%%%%%%%%%%%%  导言区  %%%%%%%%%%%%%%%</span><br><span class="line">\usepackage &#123; graphicx &#125; % 引用宏包</span><br><span class="line">\graphicspath &#123;&#123; fig /&#125;&#125; % 设置图片目录</span><br><span class="line">\title&#123;你好，world!&#125;</span><br><span class="line">\author[*]&#123;Author A&#125;</span><br><span class="line">\author[**]&#123;Author B&#125;</span><br><span class="line">\affil[*]&#123;Department of Computer Science, \LaTeX\ University&#125;  % 定义机构</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\date&#123;October 2, 2021&#125;% 自定义日期，里面直接写</span><br><span class="line">\date&#123;2021年10月2日&#125;</span><br><span class="line">%%%%%%%%%%%%%%%  导言区  %%%%%%%%%%%%%%%</span><br><span class="line"></span><br><span class="line">%%%%%%%%%%%%%%%%  正文  %%%%%%%%%%%%%%%%</span><br><span class="line">\begin&#123;document&#125; </span><br><span class="line">    \maketitle</span><br><span class="line">\end&#123;document&#125;</span><br><span class="line">%%%%%%%%%%%%%%%%  正文  %%%%%%%%%%%%%%%%</span><br></pre></td></tr></table></figure><h3 id="摘要、段落以及新行"><a href="#摘要、段落以及新行" class="headerlink" title="摘要、段落以及新行"></a>摘要、段落以及新行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;abstract&#125;</span><br><span class="line">This is a simple paragraph at the beginning of the document. A brief introduction to the main subject.</span><br><span class="line">\end&#123;abstract&#125;</span><br><span class="line">共有</span><br><span class="line">一使用`par&#x27;命令开始一个新的段落\par</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>在文档类 <code>article</code>/<code>ctexart</code> 中，定义了五个控制序列来调整行文组织结构</p><ul><li><code>\section&#123;·&#125;</code></li><li><code>\subsection&#123;·&#125;</code></li><li><code>\subsubsection&#123;·&#125;</code></li><li><code>\paragraph&#123;·&#125;</code></li><li><code>\subparagraph&#123;·&#125;</code></li></ul><p>paragraph和subparagraph比较少用，换行可以用，\par 命令或者空行，一般为了文章的分段清晰，采用空行来实现</p><p>换行，\newline</p><p>空行，</p><p><code>\bigskip</code>、<code>\medskip</code>、<code>\smallskip</code>和<code>\vspace&#123;&lt;len&gt;&#125;</code>，其中<code>&lt;len&gt;</code>为自行定义的高度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;document&#125; </span><br><span class="line">This is text contained in the first paragraph. </span><br><span class="line">This is text contained in the first paragraph. </span><br><span class="line">This is text contained in the first paragraph.\par</span><br><span class="line">This is text contained in the second paragraph. </span><br><span class="line">This is text contained in the second paragraph.</span><br><span class="line">This is text contained in the second paragraph.</span><br><span class="line"></span><br><span class="line">\\ %空行 </span><br><span class="line">This is text contained in the third paragraph. </span><br><span class="line">This is text contained in the third paragraph. </span><br><span class="line">This is text contained in the third paragraph.</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><h4 id="段落对齐"><a href="#段落对齐" class="headerlink" title="段落对齐"></a>段落对齐</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">%左对齐</span><br><span class="line">\section*&#123;A paragraph typeset flush left&#125;</span><br><span class="line">\begin&#123;flushleft&#125;</span><br><span class="line">La\TeX&#123;&#125; is a document preparation system and document markup </span><br><span class="line">language. \LaTeX&#123;&#125; uses the \TeX&#123;&#125; typesetting program for formatting </span><br><span class="line">its output, and is itself written in the \TeX&#123;&#125; macro language. </span><br><span class="line">\LaTeX&#123;&#125; is not the name of a particular (executable) typesetting program, but </span><br><span class="line">refers to the suite of commands (\TeX&#123;&#125; macros) which form the markup </span><br><span class="line">conventions used to typeset \LaTeX&#123;&#125; documents.</span><br><span class="line">\end&#123;flushleft&#125;</span><br><span class="line">%右对齐</span><br><span class="line">\section*&#123;A paragraph typeset flush right&#125;</span><br><span class="line">\begin&#123;flushright&#125;</span><br><span class="line">La\TeX&#123;&#125; is a document preparation system and document markup </span><br><span class="line">language. \LaTeX&#123;&#125; uses the \TeX&#123;&#125; typesetting program for formatting </span><br><span class="line">its output, and is itself written in the \TeX&#123;&#125; macro language. </span><br><span class="line">\LaTeX&#123;&#125; is not the name of a particular (executable) typesetting program, but </span><br><span class="line">refers to the suite of commands (\TeX&#123;&#125; macros) which form the markup </span><br><span class="line">conventions used to typeset \LaTeX&#123;&#125; documents.</span><br><span class="line">\end&#123;flushright&#125;</span><br><span class="line">%居中</span><br><span class="line">\begin&#123;center&#125;</span><br><span class="line">Example 1: The following paragraph (given in quotes) is an </span><br><span class="line">example of centred alignment using the center environment. </span><br><span class="line"></span><br><span class="line">``La\TeX&#123;&#125; is a document preparation system and document markup </span><br><span class="line">language. \LaTeX&#123;&#125; uses the \TeX&#123;&#125; typesetting program for formatting </span><br><span class="line">its output, and is itself written in the \TeX&#123;&#125; macro language. </span><br><span class="line">\LaTeX&#123;&#125; is not the name of a particular (executable) typesetting program, but </span><br><span class="line">refers to the suite of commands (\TeX&#123;&#125; macros) which form the markup </span><br><span class="line">conventions used to typeset \LaTeX&#123;&#125; documents.&quot;</span><br><span class="line">\end&#123;center&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="控制缩进"><a href="#控制缩进" class="headerlink" title="控制缩进"></a>控制缩进</h4><p>段落缩进受三个命令影响</p><ul><li><code>\parindent</code>，保存缩进长度的变量</li><li><code>\indent</code>，</li><li><code>\noindent</code>，</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\setlength &#123; \parindent &#125;&#123; 20pt &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>加粗、斜体和下划线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Some of the greatest discoveries in \textbf&#123;science&#125; were made by accident.</span><br><span class="line">Some of the greatest discoveries in \underline&#123;science&#125; were made by accident.</span><br><span class="line">Some of the greatest \emph&#123;discoveries&#125; in science were made by accident.</span><br></pre></td></tr></table></figure><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\graphicspath&#123; &#123;./images/&#125; &#125; %定义图像存放路径</span><br><span class="line"></span><br><span class="line">\includegraphics&#123;universe&#125;</span><br><span class="line">\includegraphics[scale=1.2, angle=45]&#123;overleaf-logo&#125;  %缩放1.5倍，旋转45°</span><br><span class="line"></span><br><span class="line">\begin&#123;figure&#125;[h]</span><br><span class="line">\includegraphics[width=8cm]&#123;Plot&#125;</span><br><span class="line">\centering %使图像居中，默认居左</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure><p>figure环境参数</p><table><thead><tr><th align="left">Parameter</th><th align="left">Position</th></tr></thead><tbody><tr><td align="left"><code>h</code></td><td align="left">Place the float <em>here</em>, i.e., <em>approximately</em> at the same point it occurs in the source text (however, not <em>exactly</em> at the spot)</td></tr><tr><td align="left"><code>t</code></td><td align="left">Position at the <em>top</em> of the page.</td></tr><tr><td align="left"><code>b</code></td><td align="left">Position at the <em>bottom</em> of the page.</td></tr><tr><td align="left"><code>p</code></td><td align="left">Put on a special <em>page</em> for floats only.</td></tr><tr><td align="left"><code>!</code></td><td align="left">Override internal parameters LaTeX uses for determining “good” float positions.</td></tr><tr><td align="left"><code>H</code></td><td align="left">Places the float at precisely the location in the LATEX code. Requires the <code>float</code> package, though may cause problems occasionally. This is somewhat equivalent to <code>h!</code>.</td></tr></tbody></table><h3 id="使文字环绕图片"><a href="#使文字环绕图片" class="headerlink" title="使文字环绕图片"></a>使文字环绕图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%图片居右</span><br><span class="line">\begin&#123;wrapfigure&#125;&#123;r&#125;&#123;0.25\textwidth&#125; %this figure will be at the right</span><br><span class="line">    \centering</span><br><span class="line">    \includegraphics[width=0.25\textwidth]&#123;mesh&#125;</span><br><span class="line">\end&#123;wrapfigure&#125;</span><br><span class="line">%图片居左</span><br><span class="line">\begin&#123;wrapfigure&#125;&#123;l&#125;&#123;0.25\textwidth&#125;</span><br><span class="line">    \centering</span><br><span class="line">    \includegraphics[width=0.25\textwidth]&#123;contour&#125;</span><br><span class="line">\end&#123;wrapfigure&#125;</span><br></pre></td></tr></table></figure><h3 id="图名、编号"><a href="#图名、编号" class="headerlink" title="图名、编号"></a>图名、编号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[h]</span><br><span class="line">    \centering</span><br><span class="line">    \includegraphics[width=0.25\textwidth]&#123;mesh&#125;</span><br><span class="line">    \caption&#123;a nice plot&#125; %图名</span><br><span class="line">    \label&#123;fig:mesh1&#125; %标签，是一个变量，用于被引用</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">As you can see in the figure \ref&#123;fig:mesh1&#125;, the   %ref可以引用图编号</span><br><span class="line">function grows near 0. Also, in the page \pageref&#123;fig:mesh1&#125;   %pageref可以引用图所在页数</span><br><span class="line">is the same example.</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a><a href="https://www.overleaf.com/learn/latex/Tables">表格</a></h2><p>&amp;分割单元格，<code>\\</code>分割表格的一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;center&#125;</span><br><span class="line">\begin&#123;tabular&#125;&#123; |c|c|c| &#125; </span><br><span class="line"> \hline  %添加一条水平线</span><br><span class="line"> cell1 &amp; cell2 &amp; cell3 \\ </span><br><span class="line"> cell4 &amp; cell5 &amp; cell6 \\ </span><br><span class="line"> cell7 &amp; cell8 &amp; cell9 \\ </span><br><span class="line"> \hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\end&#123;center&#125;</span><br></pre></td></tr></table></figure><h3 id="不等长表格"><a href="#不等长表格" class="headerlink" title="不等长表格"></a>不等长表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### 自适应表格</span><br><span class="line"></span><br><span class="line">不需要控制单个单元格的宽度，只需要控制表格的宽度</span><br><span class="line"></span><br><span class="line">```latex</span><br><span class="line">\begin&#123;tabularx&#125;&#123;0.8\textwidth&#125; &#123;    % tabularx相较tabular更灵活</span><br><span class="line">  | &gt;&#123;\raggedright\arraybackslash&#125;X </span><br><span class="line">  | &gt;&#123;\centering\arraybackslash&#125;X </span><br><span class="line">  | &gt;&#123;\raggedleft\arraybackslash&#125;X | &#125;</span><br><span class="line"> \hline</span><br><span class="line"> item 11 &amp; item 12 &amp; item 13 \\</span><br><span class="line"> \hline</span><br><span class="line"> item 21  &amp; item 22  &amp; item 23  \\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabularx&#125;</span><br></pre></td></tr></table></figure><h3 id="合并行和列"><a href="#合并行和列" class="headerlink" title="合并行和列"></a>合并行和列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">% 使用\multicolumn合并多个列</span><br><span class="line">\multicolumn&#123;4&#125;&#123;|c|&#125;&#123;Country List&#125; \\</span><br><span class="line"></span><br><span class="line">% 合并多个行</span><br><span class="line">\usepackage&#123;multirow&#125;</span><br><span class="line">\begin&#123;center&#125;</span><br><span class="line">\begin&#123;tabular&#125;&#123; |c|c|c|c| &#125; </span><br><span class="line">\hline</span><br><span class="line">col1 &amp; col2 &amp; col3 \\</span><br><span class="line">\hline</span><br><span class="line">\multirow&#123;3&#125;&#123;4em&#125;&#123;Multiple row&#125; &amp; cell2 &amp; cell3 \\ </span><br><span class="line">&amp; cell5 &amp; cell6 \\ </span><br><span class="line">&amp; cell8 &amp; cell9 \\ </span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\end&#123;center&#125;</span><br></pre></td></tr></table></figure><h3 id="表名、编号"><a href="#表名、编号" class="headerlink" title="表名、编号"></a>表名、编号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">%将表格放在table的浮动环境中定位和引用很容易</span><br><span class="line">\begin&#123;table&#125;[h!]</span><br><span class="line">\centering</span><br><span class="line">\begin&#123;tabular&#125;&#123;||c c c c||&#125; </span><br><span class="line"> \hline</span><br><span class="line"> Col1 &amp; Col2 &amp; Col2 &amp; Col3 \\ [0.5ex] </span><br><span class="line"> \hline\hline</span><br><span class="line"> 1 &amp; 6 &amp; 87837 &amp; 787 \\ </span><br><span class="line"> 2 &amp; 7 &amp; 78 &amp; 5415 \\</span><br><span class="line"> 3 &amp; 545 &amp; 778 &amp; 7507 \\</span><br><span class="line"> 4 &amp; 545 &amp; 18744 &amp; 7560 \\</span><br><span class="line"> 5 &amp; 88 &amp; 788 &amp; 6344 \\ [1ex] </span><br><span class="line"> \hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\caption&#123;Table to test captions and labels.&#125;</span><br><span class="line">\label&#123;table:1&#125;</span><br><span class="line">\end&#123;table&#125;</span><br></pre></td></tr></table></figure><p>注：table环境的参数与figure环境类似</p><h3 id="修改表格样式"><a href="#修改表格样式" class="headerlink" title="修改表格样式"></a>修改表格样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%线宽和单元格填充</span><br><span class="line"></span><br><span class="line">%行的颜色</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="页面样式pagestyle"><a href="#页面样式pagestyle" class="headerlink" title="页面样式pagestyle"></a>页面样式pagestyle</h2><h2 id="表格-1"><a href="#表格-1" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 参考文献</span><br><span class="line"></span><br><span class="line">latex主要有三种方式管理参考文献：`bibtex`，`natbib` 和 `biblatex`.</span><br><span class="line"></span><br><span class="line">本文介绍`biblatex`，这是现代常用的宏包</span><br><span class="line"></span><br><span class="line">```latex</span><br><span class="line">\usepackage&#123;biblatex&#125; %Imports biblatex package</span><br><span class="line">\addbibresource&#123;sample.bib&#125; %Import the bibliography file</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">Let&#x27;s cite! Einstein&#x27;s journal paper \cite&#123;einstein&#125; and Dirac&#x27;s  %\cite用于文内引用</span><br><span class="line">book \cite&#123;dirac&#125; are physics-related items. </span><br><span class="line"></span><br><span class="line">\printbibliography %Prints bibliography  文末打印参考文献列表</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>在目录中添加参考文献</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">% 添加到新的一章或节（一级条目）</span><br><span class="line">\printbibliography[</span><br><span class="line">heading=bibintoc,</span><br><span class="line">title=&#123;Whole bibliography&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">% 添加二级条目</span><br><span class="line">\printbibliography[heading=subbibintoc,type=article,title=&#123;Articles only&#125;]  </span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\href</span><br><span class="line"></span><br><span class="line">\ref</span><br><span class="line"></span><br><span class="line">\textbf  %粗体</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="排版中文"><a href="#排版中文" class="headerlink" title="排版中文"></a>排版中文</h1><p>使用<code>XeLaTeX </code>或<code>LuaLaTeX</code>编译器，它们能直接支持utf-8编码</p><ol><li>使用<code>ctexart</code>文档类，并使用<code>XeLaTeX</code>或<code>LuaLaTex</code>编译</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\tableofcontents</span><br><span class="line"></span><br><span class="line">\begin&#123;abstract&#125;</span><br><span class="line">这是简介及摘要。</span><br><span class="line">\end&#123;abstract&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;前言&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;关于数学部分&#125;</span><br><span class="line">数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.</span><br><span class="line"></span><br><span class="line">這是繁體中文。</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>xeCJK</code>宏包，并使用<code>XeLaTex</code>编译</li></ol><p>如果文档只有部分中文，可以使用。注意：这个宏包只能在<code>XeLaTex</code>环境编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;xeCJK&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\section&#123;前言&#125;</span><br><span class="line">这是一些文字。</span><br><span class="line"></span><br><span class="line">\section&#123;关于数学部分&#125;</span><br><span class="line">数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.</span><br><span class="line"></span><br><span class="line">這是繁體中文。</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用<code>CJKutf8</code>宏包和<code>pdfLaTeX</code>编译</li></ol><p>如果文档主要以英文（拉丁语系）为主，并且夹杂中文，使用<code>CJKutf8</code>宏包和<code>pdfLaTeX</code>编译比较方便。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;CJKutf8&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\begin&#123;CJK*&#125;&#123;UTF8&#125;&#123;gbsn&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;前言&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;关于数学部分&#125;</span><br><span class="line">数学、中英文皆可以混排。You can intersperse math, Chinese and English (Latin script) without adding extra environments.</span><br><span class="line"></span><br><span class="line">\end&#123;CJK*&#125;</span><br><span class="line"></span><br><span class="line">\bigskip  %% Just some white space</span><br><span class="line"></span><br><span class="line">You can also insert Latin text in your document</span><br><span class="line"></span><br><span class="line">\bigskip  %% Just some white space</span><br><span class="line"></span><br><span class="line">\begin&#123;CJK*&#125;&#123;UTF8&#125;&#123;bsmi&#125;</span><br><span class="line">這是繁體中文。</span><br><span class="line">\end&#123;CJK*&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客写作篇</title>
      <link href="/2021/07/23/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%AF%87/"/>
      <url>/2021/07/23/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo博客写作篇"><a href="#Hexo博客写作篇" class="headerlink" title="Hexo博客写作篇"></a>Hexo博客写作篇</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft title</span><br><span class="line">hexo publish title <span class="comment"># 发布，将草稿从 _drafts 移动到 _posts 中</span></span><br><span class="line">hexo clean &amp;&amp; hexo deploy <span class="comment"># 发布</span></span><br><span class="line"><span class="comment"># post 归档 source/_posts</span></span><br><span class="line"><span class="comment"># page source</span></span><br><span class="line"><span class="comment"># draft 草稿 source/_drafts</span></span><br></pre></td></tr></table></figure><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 博客写作篇</span><br><span class="line">date: 2021-07-23 00:53:11</span><br><span class="line">tags: hexo</span><br><span class="line">categories:</span><br><span class="line">  - 写作</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h3><h4 id="置顶"><a href="#置顶" class="headerlink" title="置顶"></a>置顶</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top: true</span><br></pre></td></tr></table></figure><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date: 2021-07-21 23:38:53</span><br></pre></td></tr></table></figure><h4 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h4><p>next内置多级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories: </span><br><span class="line">- 父目录</span><br><span class="line">- 子目录</span><br></pre></td></tr></table></figure><h4 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- tagA</span><br><span class="line">- tagB</span><br></pre></td></tr></table></figure><hr><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><h4 id="使用绝对路径"><a href="#使用绝对路径" class="headerlink" title="使用绝对路径"></a>使用绝对路径</h4><p>当Hexo项目中只用到少量图片时，可以将图片统一放在 <strong><code>source/images</code></strong> 文件夹中，通过markdown语法访问它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/example.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h4 id="使用相对路径"><a href="#使用相对路径" class="headerlink" title="使用相对路径"></a>使用相对路径</h4><p>首先修改站点配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](example.jpg)</span><br></pre></td></tr></table></figure><h4 id="使用标签插件-推荐方式"><a href="#使用标签插件-推荐方式" class="headerlink" title="使用标签插件 - 推荐方式"></a>使用标签插件 - 推荐方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><img src="/2021/07/23/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%AF%87/example.jpg" class="" title="This is an example image"><h4 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h4><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如<a href="http://cloudinary.com/">Cloudinary</a>提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</p><h4 id="GitHub-PicGo图床设置"><a href="#GitHub-PicGo图床设置" class="headerlink" title="GitHub+PicGo图床设置"></a>GitHub+PicGo图床设置</h4><ol><li>下载<a href="https://picgo.github.io/PicGo-Doc/en/guide/">PicGo</a></li><li>Github设置<ul><li>创建Github仓库，注意必须是public，否则图片不可见</li><li>在Github的 Settings/Developer settings 中生成token</li></ul></li><li>设置Picgo<ul><li>仓库名：honghangzhi/blog-images</li><li>分支名：master（新版main）</li><li>Token：粘贴GitHub token</li><li>存储路径：</li><li>自定义域名（必须写明分支名）：<a href="https://github.com/honghangzhi/blog-images@master">https://github.com/honghangzhi/blog-images@master</a></li></ul></li></ol><h3 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h3><h4 id="使用-iframe-标签"><a href="#使用-iframe-标签" class="headerlink" title="使用 iframe 标签"></a>使用 iframe 标签</h4><h5 id="B站"><a href="#B站" class="headerlink" title="B站"></a>B站</h5><p>点击<strong>分享</strong>获取嵌入代码</p><img src="/2021/07/23/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%AF%87/screenshot.png" class="" title="screenshot"><p>获取到的嵌入代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=333955458&amp;bvid=BV1Tw411Z7sV&amp;cid=364494199&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建议修改样式，获得更好的兼容性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=333955458&amp;bvid=BV1Tw411Z7sV&amp;cid=364494199&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; width: 100%; </span></span></span><br><span class="line"><span class="string"><span class="tag">height: 100%; left: 0; top: 0;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=933339494&bvid=BV1QT4y1Z7pk&cid=417227224&page=1" title="Bilibili video player" frameborder="0" allow="accelerometer;clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h5 id="youtube"><a href="#youtube" class="headerlink" title="youtube"></a>youtube</h5><p>同样是点击分享获取嵌入代码，效果：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/WUvTyaaNkzM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h2><p>建议参考这个 <a href="https://www.markdownguide.org/"><em>Markdown Guide</em></a> 开源教程</p><h2 id="使用mermaid进行画图"><a href="#使用mermaid进行画图" class="headerlink" title="使用mermaid进行画图"></a>使用<a href="https://mermaid.js.org/">mermaid</a>进行画图</h2><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>类间关系表示如下：</p><table><thead><tr><th align="left">Type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">`&lt;</td><td align="left">–`</td></tr><tr><td align="left"><code>*--</code></td><td align="left">Composition</td></tr><tr><td align="left"><code>o--</code></td><td align="left">Aggregation</td></tr><tr><td align="left"><code>--&gt;</code></td><td align="left">Association</td></tr><tr><td align="left"><code>--</code></td><td align="left">Link (Solid)</td></tr><tr><td align="left"><code>..&gt;</code></td><td align="left">Dependency</td></tr><tr><td align="left">`..</td><td align="left">&gt;`</td></tr><tr><td align="left"><code>..</code></td><td align="left">Link (Dashed)</td></tr></tbody></table><h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3>]]></content>
      
      
      <categories>
          
          <category> 写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 和 Github Pages 搭建博客</title>
      <link href="/2021/07/22/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AF%87/"/>
      <url>/2021/07/22/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>首先需要安装 node.js 和 git，网上有安装教程</p><p><strong>使用Hexo的常用命令先放在开头</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s <span class="comment"># 调试</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">hexo clean &amp;&amp; hexo deploy <span class="comment"># 发布</span></span><br><span class="line"> <span class="comment"># 新建一博客</span></span><br></pre></td></tr></table></figure><hr><p>正式开始开始搭建博客 <span id="more"></span></p><h2 id="Hexo本地设置"><a href="#Hexo本地设置" class="headerlink" title="Hexo本地设置"></a>Hexo本地设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo clean   <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo s <span class="comment"># 启动服务器查看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo d # 自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure><h3 id="一键部署到GitHub"><a href="#一键部署到GitHub" class="headerlink" title="一键部署到GitHub"></a>一键部署到GitHub</h3><p>安装 <strong>deployer</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>打开 <strong>_config.yml</strong> 文件，加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/honghangzhi/honghangzhi.github.io  #你的仓库网址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>在命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:honghangzhi/honghangzhi.github.io.git</span><br><span class="line">hexo clean &amp;&amp; hexo deploy</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>在 <a href="https://xxx.github.io/">https://xxx.github.io</a> 打开</p><h3 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h3><p>更新博客每次都重新<strong>部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>修改 <strong>_config.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>选择主题 - /themes/next/_config.yml - chemes</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br></pre></td></tr></table></figure><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="友情链接：几个热门的主题"><a href="#友情链接：几个热门的主题" class="headerlink" title="友情链接：几个热门的主题"></a>友情链接：几个热门的主题</h3><ul><li><a href="https://github.com/theme-next/hexo-theme-next">next</a></li><li><a href="http://theme-next.iissnan.com/">老版next文档</a></li><li><a href="https://github.com/litten/hexo-theme-yilia">yilia</a></li></ul><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>两个配置文件：</p><ul><li>站点配置文件，根目录下的 <strong>_config.yml</strong> 文件</li><li>主题配置文件，\root\themes\next 下的 <strong>_config.yml</strong>  文件</li></ul><h3 id="显示文章字数和阅读时长"><a href="#显示文章字数和阅读时长" class="headerlink" title="显示文章字数和阅读时长"></a>显示文章字数和阅读时长</h3><p>在站点配置文件，根目录下的 <strong>_config.yml</strong> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: <span class="literal">true</span> <span class="comment"># 文章字数</span></span><br><span class="line">  time: <span class="literal">true</span> <span class="comment"># 阅读时长</span></span><br><span class="line">  total_symbols: <span class="literal">false</span> <span class="comment"># 所有文章总字数</span></span><br><span class="line">  total_time: <span class="literal">false</span> <span class="comment"># 所有文章阅读中时长</span></span><br></pre></td></tr></table></figure><p><strong>以下的设置均在主题配置文件中设置</strong></p><h3 id="设置菜单栏"><a href="#设置菜单栏" class="headerlink" title="设置菜单栏"></a>设置菜单栏</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span>                      <span class="comment">#首页</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span>       <span class="comment">#分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span>                 <span class="comment">#标签</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span>      <span class="comment">#归档</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span>               <span class="comment">#关于</span></span><br><span class="line">  <span class="comment"># resources: /resources/ || download   #资源</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar    #日历</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat      #腾讯公益404</span></span><br></pre></td></tr></table></figure><p>此时菜单栏并没有页面，在根目录执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;resources&quot;</span><br></pre></td></tr></table></figure><p>来生成页面，sources文件夹下会生成categories、tags、about、resources四个文件，每个文件中有一个<code>index.md</code>文件，修改内容分别如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 资源</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;resources&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="菜单栏添加搜索框（Local-Search）"><a href="#菜单栏添加搜索框（Local-Search）" class="headerlink" title="菜单栏添加搜索框（Local Search）"></a>菜单栏添加搜索框（Local Search）</h3><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br></pre></td></tr></table></figure><p>主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>将图片 avatar.gif 移动到 \root\themes\next\source\images 目录下，在主题配置文件配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.gif   #图片的位置，也可以是http://xxx.com/avatar.png</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true   #头像展示在圈里</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false  #头像随光标旋转</span><br></pre></td></tr></table></figure><h3 id="社交网站链接"><a href="#社交网站链接" class="headerlink" title="社交网站链接"></a>社交网站链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/honghangzhi || fab fa-github</span><br></pre></td></tr></table></figure><h3 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><h3 id="暗夜模式-新版next主题内置"><a href="#暗夜模式-新版next主题内置" class="headerlink" title="暗夜模式 - 新版next主题内置"></a>暗夜模式 - 新版next主题内置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="设置博文内链接为蓝色"><a href="#设置博文内链接为蓝色" class="headerlink" title="设置博文内链接为蓝色"></a>设置博文内链接为蓝色</h3><p>在 themes/next/source/css/_common/components/post/post.styl文件中末尾加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">     color: #0593d3;</span><br><span class="line">     border-bottom: none;</span><br><span class="line">     &amp;:hover &#123;</span><br><span class="line">       color: #0477ab;</span><br><span class="line">       text-decoration: underline;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="设置文章末尾”本文结束”标记"><a href="#设置文章末尾”本文结束”标记" class="headerlink" title="设置文章末尾”本文结束”标记"></a>设置文章末尾”本文结束”标记</h3><p>在路径 /themes/next/layout/_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:24px;&quot;&gt;（完）&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开/themes/next/layout/_macro/post.swig文件，在post-footer前添加代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index and theme.passage_end_tag.enabled %&#125;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h3 id="设置建站时间"><a href="#设置建站时间" class="headerlink" title="设置建站时间"></a>设置建站时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2020-02   #建站时间</span><br></pre></td></tr></table></figure><h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h3><h4 id="（1）安装插件"><a href="#（1）安装插件" class="headerlink" title="（1）安装插件"></a>（1）安装插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h4 id="（2）设置置顶标志"><a href="#（2）设置置顶标志" class="headerlink" title="（2）设置置顶标志"></a>（2）设置置顶标志</h4><p>打开blog/themes/next/layout/_macro目录下的post.swig文件，定位到 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> 标签下，插入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）在文章中添加top"><a href="#（3）在文章中添加top" class="headerlink" title="（3）在文章中添加top"></a>（3）在文章中添加top</h4><p>然后在需要置顶的文章的Front-matter中加上top: true即可，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="添加评论（使用valine）"><a href="#添加评论（使用valine）" class="headerlink" title="添加评论（使用valine）"></a>添加评论（使用valine）</h3><p>可以参考这篇<a href="https://blog.csdn.net/blue_zy/article/details/79071414?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162688580716780265414057%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162688580716780265414057&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-79071414.first_rank_v2_pc_rank_v29&utm_term=hexo+%E8%AF%84%E8%AE%BA">文章</a>，步骤</p><h4 id="（1）注册Leancloud"><a href="#（1）注册Leancloud" class="headerlink" title="（1）注册Leancloud"></a>（1）注册Leancloud</h4><p>① <a href="https://console.leancloud.cn/apps">LeanCloud</a>注册<br>② 创建应用<br>③ 应用 - 设置 - 应用凭证，复制<strong>AppID</strong>和<strong>AppKey</strong></p><h4 id="（2）修改主题配置文件"><a href="#（2）修改主题配置文件" class="headerlink" title="（2）修改主题配置文件"></a>（2）修改主题配置文件</h4><p>将复制的<strong>AppID</strong>和<strong>AppKey</strong>添加到配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line">  active: valine</span><br><span class="line">  </span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: # Your leancloud application appid</span><br><span class="line">  appkey # Your leancloud application appkey</span><br></pre></td></tr></table></figure><h3 id="添加多级分类"><a href="#添加多级分类" class="headerlink" title="添加多级分类"></a>添加多级分类</h3><p>next 内置多级分类，在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories: </span><br><span class="line">- 父目录</span><br><span class="line">- 子目录</span><br></pre></td></tr></table></figure><p>此时查看博文将显示 <code>父目录，子目录</code></p><h4 id="设置多级分类只显示子类别"><a href="#设置多级分类只显示子类别" class="headerlink" title="设置多级分类只显示子类别"></a>设置多级分类只显示子类别</h4><p>搜索 <code>post.in</code> 将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if post.categories and post.categories.length and theme.post_meta.categories %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;far fa-folder&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.in&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;%- for cat in post.categories.toArray() %&#125;</span><br><span class="line">      &lt;span itemprop=&quot;about&quot; itemscope itemtype=&quot;http://schema.org/Thing&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(cat.path) &#125;&#125;&quot; itemprop=&quot;url&quot; rel=&quot;index&quot;&gt;&lt;span itemprop=&quot;name&quot;&gt;&#123;&#123; cat.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">      &#123;%- set cat_length = post.categories.length %&#125;</span><br><span class="line">      &#123;%- if cat_length &gt; 1 and loop.index !== cat_length %&#125;</span><br><span class="line">        &#123;&#123; __(&#x27;symbol.comma&#x27;) &#125;&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>替换如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if post.categories and post.categories.length and theme.post_meta.categories %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;far fa-folder&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.in&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;%- for cat in post.categories.toArray() %&#125;</span><br><span class="line"></span><br><span class="line">      &#123;%- if loop.last %&#125;</span><br><span class="line">        &lt;span itemprop=&quot;about&quot; itemscope itemtype=&quot;http://schema.org/Thing&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;&#123;&#123; url_for(cat.path) &#125;&#125;&quot; itemprop=&quot;url&quot; rel=&quot;index&quot;&gt;&lt;span itemprop=&quot;name&quot;&gt;&#123;&#123; cat.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#123;%- endfor %&#125;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="启用fancybox：点击查看图片大图"><a href="#启用fancybox：点击查看图片大图" class="headerlink" title="启用fancybox：点击查看图片大图"></a>启用fancybox：点击查看图片大图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><ul><li><p>免费域名：<a href="https://www.freenom.com/zh/index.html?lang=zh">https://www.freenom.com/zh/index.html?lang=zh</a></p></li><li><p>付费域名</p><ul><li><p>阿里云：<a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com/</a></p></li><li><p>腾讯云：<a href="https://dnspod.cloud.tencent.com/">https://dnspod.cloud.tencent.com/</a></p></li></ul></li></ul><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>TODO</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://hexo.io/docs/one-command-deployment">Hexo</a></li><li><a href="https://hexo.io/zh-cn/">Hexo中文</a></li><li><a href="https://docs.github.com/cn/pages">Github Pages</a></li></ul><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul><li><a href="https://blog.csdn.net/wapchief/article/details/54602515?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162677118916780262589207%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162677118916780262589207&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduend~default-1-54602515.pc_v2_rank_blog_default&utm_term=hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">搭建教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/106060640">主题美化参考</a></li><li><a href="https://hexo.io/zh-cn/docs/configuration.html">关于写作</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
